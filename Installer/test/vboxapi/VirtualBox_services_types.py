################################################## 
# VirtualBox_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://www.virtualbox.org/
##############################

class ns0:
    targetNamespace = "http://www.virtualbox.org/"

    class SettingsVersion_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SettingsVersion")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AccessMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AccessMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MachineState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MachineState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SessionState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SessionState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CPUPropertyType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CPUPropertyType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HWVirtExPropertyType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HWVirtExPropertyType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FaultToleranceState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FaultToleranceState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LockType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "LockType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SessionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "SessionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeviceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DeviceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DeviceActivity_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DeviceActivity")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ClipboardMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ClipboardMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Scope_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "Scope")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BIOSBootMenuMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "BIOSBootMenuMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessorFeature_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessorFeature")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FirmwareType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FirmwareType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PointingHidType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "PointingHidType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class KeyboardHidType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "KeyboardHidType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VFSType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VFSType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VFSFileType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VFSFileType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ImportOptions_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ImportOptions")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VirtualSystemDescriptionType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VirtualSystemDescriptionType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VirtualSystemDescriptionValueType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VirtualSystemDescriptionValueType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CleanupMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CleanupMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CloneMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CloneMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CloneOptions_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CloneOptions")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HostNetworkInterfaceMediumType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HostNetworkInterfaceMediumType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HostNetworkInterfaceStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HostNetworkInterfaceStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class HostNetworkInterfaceType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "HostNetworkInterfaceType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsFacilityType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsFacilityType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsFacilityClass_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsFacilityClass")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsFacilityStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsFacilityStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsRunLevelType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsRunLevelType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AdditionsUpdateFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AdditionsUpdateFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExecuteProcessFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ExecuteProcessFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ExecuteProcessStatus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ExecuteProcessStatus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessInputFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessInputFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProcessOutputFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ProcessOutputFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CopyFileFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "CopyFileFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DirectoryCreateFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DirectoryCreateFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DirectoryOpenFlag_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DirectoryOpenFlag")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestDirEntryType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestDirEntryType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumVariant_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumVariant")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DataType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DataType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DataFlags_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "DataFlags")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MediumFormatCapabilities_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MediumFormatCapabilities")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MouseButtonState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "MouseButtonState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FramebufferPixelFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "FramebufferPixelFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkAttachmentType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NetworkAttachmentType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkAdapterType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NetworkAdapterType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NetworkAdapterPromiscModePolicy_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NetworkAdapterPromiscModePolicy")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PortMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "PortMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class USBDeviceState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "USBDeviceState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class USBDeviceFilterAction_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "USBDeviceFilterAction")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AudioDriverType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AudioDriverType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AudioControllerType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AudioControllerType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AuthType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "AuthType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StorageBus_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "StorageBus")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class StorageControllerType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "StorageControllerType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ChipsetType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ChipsetType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NATAliasMode_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NATAliasMode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class NATProtocol_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "NATProtocol")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class BandwidthGroupType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "BandwidthGroupType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VBoxEventType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "VBoxEventType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GuestMonitorChangedEventType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "GuestMonitorChangedEventType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IPciAddress_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IPciAddress")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IPciAddress_Def.schema
            TClist = [ZSI.TCnumbers.Ishort(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ishort(pname="devFunction", aname="_devFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bus = None
                    self._device = None
                    self._devFunction = None
                    return
            Holder.__name__ = "IPciAddress_Holder"
            self.pyclass = Holder

    class IPciDeviceAttachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IPciDeviceAttachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IPciDeviceAttachment_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isPhysicalDevice", aname="_isPhysicalDevice", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostAddress", aname="_hostAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="guestAddress", aname="_guestAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._isPhysicalDevice = None
                    self._hostAddress = None
                    self._guestAddress = None
                    return
            Holder.__name__ = "IPciDeviceAttachment_Holder"
            self.pyclass = Holder

    class IVRDEServerInfo_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IVRDEServerInfo")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IVRDEServerInfo_Def.schema
            TClist = [ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="numberOfClients", aname="_numberOfClients", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="beginTime", aname="_beginTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="endTime", aname="_endTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesSent", aname="_bytesSent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesSentTotal", aname="_bytesSentTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesReceived", aname="_bytesReceived", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="bytesReceivedTotal", aname="_bytesReceivedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="user", aname="_user", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientName", aname="_clientName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="clientIP", aname="_clientIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="clientVersion", aname="_clientVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="encryptionStyle", aname="_encryptionStyle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._active = None
                    self._port = None
                    self._numberOfClients = None
                    self._beginTime = None
                    self._endTime = None
                    self._bytesSent = None
                    self._bytesSentTotal = None
                    self._bytesReceived = None
                    self._bytesReceivedTotal = None
                    self._user = None
                    self._domain = None
                    self._clientName = None
                    self._clientIP = None
                    self._clientVersion = None
                    self._encryptionStyle = None
                    return
            Holder.__name__ = "IVRDEServerInfo_Holder"
            self.pyclass = Holder

    class IGuestOSType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IGuestOSType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IGuestOSType_Def.schema
            TClist = [ZSI.TC.String(pname="familyId", aname="_familyId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="familyDescription", aname="_familyDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="is64Bit", aname="_is64Bit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedIOAPIC", aname="_recommendedIOAPIC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedVirtEx", aname="_recommendedVirtEx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="recommendedRAM", aname="_recommendedRAM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="recommendedVRAM", aname="_recommendedVRAM", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="recommendedHDD", aname="_recommendedHDD", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAdapterType",lazy=False)(pname="adapterType", aname="_adapterType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedPae", aname="_recommendedPae", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="recommendedDvdStorageController", aname="_recommendedDvdStorageController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="recommendedDvdStorageBus", aname="_recommendedDvdStorageBus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="recommendedHdStorageController", aname="_recommendedHdStorageController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="recommendedHdStorageBus", aname="_recommendedHdStorageBus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="recommendedFirmware", aname="_recommendedFirmware", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedUsbHid", aname="_recommendedUsbHid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedHpet", aname="_recommendedHpet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedUsbTablet", aname="_recommendedUsbTablet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="recommendedRtcUseUtc", aname="_recommendedRtcUseUtc", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="recommendedChipset", aname="_recommendedChipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioControllerType",lazy=False)(pname="recommendedAudioController", aname="_recommendedAudioController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._familyId = None
                    self._familyDescription = None
                    self._id = None
                    self._description = None
                    self._is64Bit = None
                    self._recommendedIOAPIC = None
                    self._recommendedVirtEx = None
                    self._recommendedRAM = None
                    self._recommendedVRAM = None
                    self._recommendedHDD = None
                    self._adapterType = None
                    self._recommendedPae = None
                    self._recommendedDvdStorageController = None
                    self._recommendedDvdStorageBus = None
                    self._recommendedHdStorageController = None
                    self._recommendedHdStorageBus = None
                    self._recommendedFirmware = None
                    self._recommendedUsbHid = None
                    self._recommendedHpet = None
                    self._recommendedUsbTablet = None
                    self._recommendedRtcUseUtc = None
                    self._recommendedChipset = None
                    self._recommendedAudioController = None
                    return
            Holder.__name__ = "IGuestOSType_Holder"
            self.pyclass = Holder

    class IAdditionsFacility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IAdditionsFacility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IAdditionsFacility_Def.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsFacilityClass",lazy=False)(pname="classType", aname="_classType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="lastUpdated", aname="_lastUpdated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityStatus",lazy=False)(pname="status", aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._classType = None
                    self._lastUpdated = None
                    self._name = None
                    self._status = None
                    self._type = None
                    return
            Holder.__name__ = "IAdditionsFacility_Holder"
            self.pyclass = Holder

    class IGuestDirEntry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IGuestDirEntry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IGuestDirEntry_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="nodeId", aname="_nodeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","GuestDirEntryType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nodeId = None
                    self._name = None
                    self._type = None
                    return
            Holder.__name__ = "IGuestDirEntry_Holder"
            self.pyclass = Holder

    class IMediumAttachment_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "IMediumAttachment")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.IMediumAttachment_Def.schema
            TClist = [ZSI.TC.String(pname="medium", aname="_medium", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="controller", aname="_controller", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="passthrough", aname="_passthrough", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="temporaryEject", aname="_temporaryEject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="isEjected", aname="_isEjected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="nonRotational", aname="_nonRotational", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bandwidthGroup", aname="_bandwidthGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._medium = None
                    self._controller = None
                    self._port = None
                    self._device = None
                    self._type = None
                    self._passthrough = None
                    self._temporaryEject = None
                    self._isEjected = None
                    self._nonRotational = None
                    self._bandwidthGroup = None
                    return
            Holder.__name__ = "IMediumAttachment_Holder"
            self.pyclass = Holder

    class ISharedFolder_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://www.virtualbox.org/"
        type = (schema, "ISharedFolder")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.ISharedFolder_Def.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="accessible", aname="_accessible", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="autoMount", aname="_autoMount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="lastAccessError", aname="_lastAccessError", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._hostPath = None
                    self._accessible = None
                    self._writable = None
                    self._autoMount = None
                    self._lastAccessError = None
                    return
            Holder.__name__ = "ISharedFolder_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getResultCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getResultCode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getResultCode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getResultCode")
            kw["aname"] = "_IVirtualBoxErrorInfo_getResultCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getResultCode_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getResultCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getResultCodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getResultCodeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getResultCodeResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getResultCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getResultCodeResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getInterfaceID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getInterfaceID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getInterfaceID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getInterfaceID")
            kw["aname"] = "_IVirtualBoxErrorInfo_getInterfaceID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getInterfaceID_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getInterfaceIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getInterfaceIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getInterfaceIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getInterfaceIDResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getInterfaceIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getInterfaceIDResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getComponent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getComponent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getComponent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getComponent")
            kw["aname"] = "_IVirtualBoxErrorInfo_getComponent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getComponent_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getComponentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getComponentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getComponentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getComponentResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getComponentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getComponentResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getText_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getText"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getText_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getText")
            kw["aname"] = "_IVirtualBoxErrorInfo_getText"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getText_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getTextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getTextResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getTextResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getTextResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getTextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getTextResponse_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getNext_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getNext"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getNext_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getNext")
            kw["aname"] = "_IVirtualBoxErrorInfo_getNext"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getNext_Holder"
            self.pyclass = Holder

    class IVirtualBoxErrorInfo_getNextResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBoxErrorInfo_getNextResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBoxErrorInfo_getNextResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBoxErrorInfo_getNextResponse")
            kw["aname"] = "_IVirtualBoxErrorInfo_getNextResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBoxErrorInfo_getNextResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getEnabled")
            kw["aname"] = "_IDHCPServer_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getEnabled_Holder"
            self.pyclass = Holder

    class IDHCPServer_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getEnabledResponse")
            kw["aname"] = "_IDHCPServer_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setEnabled")
            kw["aname"] = "_IDHCPServer_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IDHCPServer_setEnabled_Holder"
            self.pyclass = Holder

    class IDHCPServer_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setEnabledResponse")
            kw["aname"] = "_IDHCPServer_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getIPAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getIPAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getIPAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getIPAddress")
            kw["aname"] = "_IDHCPServer_getIPAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getIPAddress_Holder"
            self.pyclass = Holder

    class IDHCPServer_getIPAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getIPAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getIPAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getIPAddressResponse")
            kw["aname"] = "_IDHCPServer_getIPAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getIPAddressResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkMask_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkMask"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkMask_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkMask")
            kw["aname"] = "_IDHCPServer_getNetworkMask"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkMask_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkMaskResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkMaskResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkMaskResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkMaskResponse")
            kw["aname"] = "_IDHCPServer_getNetworkMaskResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkMaskResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkName")
            kw["aname"] = "_IDHCPServer_getNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkName_Holder"
            self.pyclass = Holder

    class IDHCPServer_getNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getNetworkNameResponse")
            kw["aname"] = "_IDHCPServer_getNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getNetworkNameResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getLowerIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getLowerIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getLowerIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getLowerIP")
            kw["aname"] = "_IDHCPServer_getLowerIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getLowerIP_Holder"
            self.pyclass = Holder

    class IDHCPServer_getLowerIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getLowerIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getLowerIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getLowerIPResponse")
            kw["aname"] = "_IDHCPServer_getLowerIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getLowerIPResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_getUpperIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getUpperIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getUpperIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getUpperIP")
            kw["aname"] = "_IDHCPServer_getUpperIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_getUpperIP_Holder"
            self.pyclass = Holder

    class IDHCPServer_getUpperIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_getUpperIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_getUpperIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_getUpperIPResponse")
            kw["aname"] = "_IDHCPServer_getUpperIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDHCPServer_getUpperIPResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_setConfiguration_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setConfiguration"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setConfiguration_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPAddress", aname="_IPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkMask", aname="_networkMask", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="FromIPAddress", aname="_FromIPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="ToIPAddress", aname="_ToIPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setConfiguration")
            kw["aname"] = "_IDHCPServer_setConfiguration"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPAddress = None
                    self._networkMask = None
                    self._FromIPAddress = None
                    self._ToIPAddress = None
                    return
            Holder.__name__ = "IDHCPServer_setConfiguration_Holder"
            self.pyclass = Holder

    class IDHCPServer_setConfigurationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_setConfigurationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_setConfigurationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_setConfigurationResponse")
            kw["aname"] = "_IDHCPServer_setConfigurationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_setConfigurationResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_start_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_start"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_start_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkName", aname="_networkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trunkName", aname="_trunkName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="trunkType", aname="_trunkType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_start")
            kw["aname"] = "_IDHCPServer_start"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._networkName = None
                    self._trunkName = None
                    self._trunkType = None
                    return
            Holder.__name__ = "IDHCPServer_start_Holder"
            self.pyclass = Holder

    class IDHCPServer_startResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_startResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_startResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_startResponse")
            kw["aname"] = "_IDHCPServer_startResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_startResponse_Holder"
            self.pyclass = Holder

    class IDHCPServer_stop_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_stop"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_stop_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_stop")
            kw["aname"] = "_IDHCPServer_stop"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDHCPServer_stop_Holder"
            self.pyclass = Holder

    class IDHCPServer_stopResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDHCPServer_stopResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDHCPServer_stopResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDHCPServer_stopResponse")
            kw["aname"] = "_IDHCPServer_stopResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDHCPServer_stopResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getVersion")
            kw["aname"] = "_IVirtualBox_getVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getVersion_Holder"
            self.pyclass = Holder

    class IVirtualBox_getVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getVersionResponse")
            kw["aname"] = "_IVirtualBox_getVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getVersionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getRevision")
            kw["aname"] = "_IVirtualBox_getRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getRevision_Holder"
            self.pyclass = Holder

    class IVirtualBox_getRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getRevisionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getRevisionResponse")
            kw["aname"] = "_IVirtualBox_getRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getRevisionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPackageType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPackageType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPackageType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPackageType")
            kw["aname"] = "_IVirtualBox_getPackageType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getPackageType_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPackageTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPackageTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPackageTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPackageTypeResponse")
            kw["aname"] = "_IVirtualBox_getPackageTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getPackageTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getAPIVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getAPIVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getAPIVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getAPIVersion")
            kw["aname"] = "_IVirtualBox_getAPIVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getAPIVersion_Holder"
            self.pyclass = Holder

    class IVirtualBox_getAPIVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getAPIVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getAPIVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getAPIVersionResponse")
            kw["aname"] = "_IVirtualBox_getAPIVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getAPIVersionResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHomeFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHomeFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHomeFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHomeFolder")
            kw["aname"] = "_IVirtualBox_getHomeFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getHomeFolder_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHomeFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHomeFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHomeFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHomeFolderResponse")
            kw["aname"] = "_IVirtualBox_getHomeFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getHomeFolderResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSettingsFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSettingsFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSettingsFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSettingsFilePath")
            kw["aname"] = "_IVirtualBox_getSettingsFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getSettingsFilePath_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSettingsFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSettingsFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSettingsFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSettingsFilePathResponse")
            kw["aname"] = "_IVirtualBox_getSettingsFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getSettingsFilePathResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHost_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHost"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHost_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHost")
            kw["aname"] = "_IVirtualBox_getHost"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getHost_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHostResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHostResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHostResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHostResponse")
            kw["aname"] = "_IVirtualBox_getHostResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getHostResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSystemProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSystemProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSystemProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSystemProperties")
            kw["aname"] = "_IVirtualBox_getSystemProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getSystemProperties_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSystemPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSystemPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSystemPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSystemPropertiesResponse")
            kw["aname"] = "_IVirtualBox_getSystemPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getSystemPropertiesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachines_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachines"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachines_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachines")
            kw["aname"] = "_IVirtualBox_getMachines"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getMachines_Holder"
            self.pyclass = Holder

    class IVirtualBox_getMachinesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getMachinesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getMachinesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getMachinesResponse")
            kw["aname"] = "_IVirtualBox_getMachinesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getMachinesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHardDisks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHardDisks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHardDisks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHardDisks")
            kw["aname"] = "_IVirtualBox_getHardDisks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getHardDisks_Holder"
            self.pyclass = Holder

    class IVirtualBox_getHardDisksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getHardDisksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getHardDisksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getHardDisksResponse")
            kw["aname"] = "_IVirtualBox_getHardDisksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getHardDisksResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDVDImages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDVDImages"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDVDImages_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDVDImages")
            kw["aname"] = "_IVirtualBox_getDVDImages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getDVDImages_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDVDImagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDVDImagesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDVDImagesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDVDImagesResponse")
            kw["aname"] = "_IVirtualBox_getDVDImagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getDVDImagesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getFloppyImages_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getFloppyImages"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getFloppyImages_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getFloppyImages")
            kw["aname"] = "_IVirtualBox_getFloppyImages"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getFloppyImages_Holder"
            self.pyclass = Holder

    class IVirtualBox_getFloppyImagesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getFloppyImagesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getFloppyImagesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getFloppyImagesResponse")
            kw["aname"] = "_IVirtualBox_getFloppyImagesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getFloppyImagesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getProgressOperations_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getProgressOperations"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getProgressOperations_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getProgressOperations")
            kw["aname"] = "_IVirtualBox_getProgressOperations"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getProgressOperations_Holder"
            self.pyclass = Holder

    class IVirtualBox_getProgressOperationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getProgressOperationsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getProgressOperationsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getProgressOperationsResponse")
            kw["aname"] = "_IVirtualBox_getProgressOperationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getProgressOperationsResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSTypes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSTypes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSTypes")
            kw["aname"] = "_IVirtualBox_getGuestOSTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSTypes_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSTypesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSTypesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IGuestOSType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSTypesResponse")
            kw["aname"] = "_IVirtualBox_getGuestOSTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSTypesResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSharedFolders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSharedFolders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSharedFolders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSharedFolders")
            kw["aname"] = "_IVirtualBox_getSharedFolders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getSharedFolders_Holder"
            self.pyclass = Holder

    class IVirtualBox_getSharedFoldersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getSharedFoldersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getSharedFoldersResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ISharedFolder",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getSharedFoldersResponse")
            kw["aname"] = "_IVirtualBox_getSharedFoldersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getSharedFoldersResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPerformanceCollector_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPerformanceCollector"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPerformanceCollector_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPerformanceCollector")
            kw["aname"] = "_IVirtualBox_getPerformanceCollector"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getPerformanceCollector_Holder"
            self.pyclass = Holder

    class IVirtualBox_getPerformanceCollectorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getPerformanceCollectorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getPerformanceCollectorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getPerformanceCollectorResponse")
            kw["aname"] = "_IVirtualBox_getPerformanceCollectorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getPerformanceCollectorResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDHCPServers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDHCPServers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDHCPServers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDHCPServers")
            kw["aname"] = "_IVirtualBox_getDHCPServers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getDHCPServers_Holder"
            self.pyclass = Holder

    class IVirtualBox_getDHCPServersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getDHCPServersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getDHCPServersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getDHCPServersResponse")
            kw["aname"] = "_IVirtualBox_getDHCPServersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getDHCPServersResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getEventSource")
            kw["aname"] = "_IVirtualBox_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getEventSource_Holder"
            self.pyclass = Holder

    class IVirtualBox_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getEventSourceResponse")
            kw["aname"] = "_IVirtualBox_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getInternalNetworks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getInternalNetworks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getInternalNetworks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getInternalNetworks")
            kw["aname"] = "_IVirtualBox_getInternalNetworks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getInternalNetworks_Holder"
            self.pyclass = Holder

    class IVirtualBox_getInternalNetworksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getInternalNetworksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getInternalNetworksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getInternalNetworksResponse")
            kw["aname"] = "_IVirtualBox_getInternalNetworksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getInternalNetworksResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGenericNetworkDrivers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGenericNetworkDrivers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGenericNetworkDrivers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGenericNetworkDrivers")
            kw["aname"] = "_IVirtualBox_getGenericNetworkDrivers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getGenericNetworkDrivers_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGenericNetworkDriversResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGenericNetworkDriversResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGenericNetworkDriversResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGenericNetworkDriversResponse")
            kw["aname"] = "_IVirtualBox_getGenericNetworkDriversResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getGenericNetworkDriversResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_composeMachineFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_composeMachineFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_composeMachineFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="baseFolder", aname="_baseFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_composeMachineFilename")
            kw["aname"] = "_IVirtualBox_composeMachineFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._baseFolder = None
                    return
            Holder.__name__ = "IVirtualBox_composeMachineFilename_Holder"
            self.pyclass = Holder

    class IVirtualBox_composeMachineFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_composeMachineFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_composeMachineFilenameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_composeMachineFilenameResponse")
            kw["aname"] = "_IVirtualBox_composeMachineFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_composeMachineFilenameResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settingsFile", aname="_settingsFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="osTypeId", aname="_osTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="forceOverwrite", aname="_forceOverwrite", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createMachine")
            kw["aname"] = "_IVirtualBox_createMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settingsFile = None
                    self._name = None
                    self._osTypeId = None
                    self._id = None
                    self._forceOverwrite = None
                    return
            Holder.__name__ = "IVirtualBox_createMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_createMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createMachineResponse")
            kw["aname"] = "_IVirtualBox_createMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="settingsFile", aname="_settingsFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMachine")
            kw["aname"] = "_IVirtualBox_openMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._settingsFile = None
                    return
            Holder.__name__ = "IVirtualBox_openMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMachineResponse")
            kw["aname"] = "_IVirtualBox_openMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_openMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_registerMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_registerMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_registerMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="machine", aname="_machine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_registerMachine")
            kw["aname"] = "_IVirtualBox_registerMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._machine = None
                    return
            Holder.__name__ = "IVirtualBox_registerMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_registerMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_registerMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_registerMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_registerMachineResponse")
            kw["aname"] = "_IVirtualBox_registerMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_registerMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_findMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nameOrId", aname="_nameOrId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findMachine")
            kw["aname"] = "_IVirtualBox_findMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._nameOrId = None
                    return
            Holder.__name__ = "IVirtualBox_findMachine_Holder"
            self.pyclass = Holder

    class IVirtualBox_findMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findMachineResponse")
            kw["aname"] = "_IVirtualBox_findMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_findMachineResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createAppliance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createAppliance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createAppliance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createAppliance")
            kw["aname"] = "_IVirtualBox_createAppliance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_createAppliance_Holder"
            self.pyclass = Holder

    class IVirtualBox_createApplianceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createApplianceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createApplianceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createApplianceResponse")
            kw["aname"] = "_IVirtualBox_createApplianceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createApplianceResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createHardDisk_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createHardDisk"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createHardDisk_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createHardDisk")
            kw["aname"] = "_IVirtualBox_createHardDisk"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._location = None
                    return
            Holder.__name__ = "IVirtualBox_createHardDisk_Holder"
            self.pyclass = Holder

    class IVirtualBox_createHardDiskResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createHardDiskResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createHardDiskResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createHardDiskResponse")
            kw["aname"] = "_IVirtualBox_createHardDiskResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createHardDiskResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="deviceType", aname="_deviceType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AccessMode",lazy=False)(pname="accessMode", aname="_accessMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="forceNewUuid", aname="_forceNewUuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMedium")
            kw["aname"] = "_IVirtualBox_openMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._location = None
                    self._deviceType = None
                    self._accessMode = None
                    self._forceNewUuid = None
                    return
            Holder.__name__ = "IVirtualBox_openMedium_Holder"
            self.pyclass = Holder

    class IVirtualBox_openMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_openMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_openMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_openMediumResponse")
            kw["aname"] = "_IVirtualBox_openMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_openMediumResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_findMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findMedium")
            kw["aname"] = "_IVirtualBox_findMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._location = None
                    self._type = None
                    return
            Holder.__name__ = "IVirtualBox_findMedium_Holder"
            self.pyclass = Holder

    class IVirtualBox_findMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findMediumResponse")
            kw["aname"] = "_IVirtualBox_findMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_findMediumResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSType")
            kw["aname"] = "_IVirtualBox_getGuestOSType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSType_Holder"
            self.pyclass = Holder

    class IVirtualBox_getGuestOSTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getGuestOSTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getGuestOSTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IGuestOSType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getGuestOSTypeResponse")
            kw["aname"] = "_IVirtualBox_getGuestOSTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getGuestOSTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="automount", aname="_automount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createSharedFolder")
            kw["aname"] = "_IVirtualBox_createSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._hostPath = None
                    self._writable = None
                    self._automount = None
                    return
            Holder.__name__ = "IVirtualBox_createSharedFolder_Holder"
            self.pyclass = Holder

    class IVirtualBox_createSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createSharedFolderResponse")
            kw["aname"] = "_IVirtualBox_createSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_createSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeSharedFolder")
            kw["aname"] = "_IVirtualBox_removeSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IVirtualBox_removeSharedFolder_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeSharedFolderResponse")
            kw["aname"] = "_IVirtualBox_removeSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_removeSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraDataKeys_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraDataKeys"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraDataKeys_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraDataKeys")
            kw["aname"] = "_IVirtualBox_getExtraDataKeys"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualBox_getExtraDataKeys_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraDataKeysResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraDataKeysResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraDataKeysResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraDataKeysResponse")
            kw["aname"] = "_IVirtualBox_getExtraDataKeysResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualBox_getExtraDataKeysResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraData")
            kw["aname"] = "_IVirtualBox_getExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IVirtualBox_getExtraData_Holder"
            self.pyclass = Holder

    class IVirtualBox_getExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_getExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_getExtraDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_getExtraDataResponse")
            kw["aname"] = "_IVirtualBox_getExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_getExtraDataResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_setExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_setExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_setExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_setExtraData")
            kw["aname"] = "_IVirtualBox_setExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IVirtualBox_setExtraData_Holder"
            self.pyclass = Holder

    class IVirtualBox_setExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_setExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_setExtraDataResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_setExtraDataResponse")
            kw["aname"] = "_IVirtualBox_setExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_setExtraDataResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_createDHCPServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createDHCPServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createDHCPServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createDHCPServer")
            kw["aname"] = "_IVirtualBox_createDHCPServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IVirtualBox_createDHCPServer_Holder"
            self.pyclass = Holder

    class IVirtualBox_createDHCPServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_createDHCPServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_createDHCPServerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_createDHCPServerResponse")
            kw["aname"] = "_IVirtualBox_createDHCPServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_createDHCPServerResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_findDHCPServerByNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findDHCPServerByNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findDHCPServerByNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findDHCPServerByNetworkName")
            kw["aname"] = "_IVirtualBox_findDHCPServerByNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IVirtualBox_findDHCPServerByNetworkName_Holder"
            self.pyclass = Holder

    class IVirtualBox_findDHCPServerByNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_findDHCPServerByNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_findDHCPServerByNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_findDHCPServerByNetworkNameResponse")
            kw["aname"] = "_IVirtualBox_findDHCPServerByNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_findDHCPServerByNetworkNameResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeDHCPServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeDHCPServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeDHCPServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="server", aname="_server", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeDHCPServer")
            kw["aname"] = "_IVirtualBox_removeDHCPServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._server = None
                    return
            Holder.__name__ = "IVirtualBox_removeDHCPServer_Holder"
            self.pyclass = Holder

    class IVirtualBox_removeDHCPServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_removeDHCPServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_removeDHCPServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_removeDHCPServerResponse")
            kw["aname"] = "_IVirtualBox_removeDHCPServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualBox_removeDHCPServerResponse_Holder"
            self.pyclass = Holder

    class IVirtualBox_checkFirmwarePresent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_checkFirmwarePresent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_checkFirmwarePresent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="firmwareType", aname="_firmwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="version", aname="_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_checkFirmwarePresent")
            kw["aname"] = "_IVirtualBox_checkFirmwarePresent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._firmwareType = None
                    self._version = None
                    return
            Holder.__name__ = "IVirtualBox_checkFirmwarePresent_Holder"
            self.pyclass = Holder

    class IVirtualBox_checkFirmwarePresentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualBox_checkFirmwarePresentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualBox_checkFirmwarePresentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="url", aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualBox_checkFirmwarePresentResponse")
            kw["aname"] = "_IVirtualBox_checkFirmwarePresentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._file = None
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualBox_checkFirmwarePresentResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getPath")
            kw["aname"] = "_IVFSExplorer_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_getPath_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getPathResponse")
            kw["aname"] = "_IVFSExplorer_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_getPathResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getType")
            kw["aname"] = "_IVFSExplorer_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_getType_Holder"
            self.pyclass = Holder

    class IVFSExplorer_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VFSType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_getTypeResponse")
            kw["aname"] = "_IVFSExplorer_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_getTypeResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_update_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_update"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_update_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_update")
            kw["aname"] = "_IVFSExplorer_update"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_update_Holder"
            self.pyclass = Holder

    class IVFSExplorer_updateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_updateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_updateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_updateResponse")
            kw["aname"] = "_IVFSExplorer_updateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_updateResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cd"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cd_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aDir", aname="_aDir", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cd")
            kw["aname"] = "_IVFSExplorer_cd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aDir = None
                    return
            Holder.__name__ = "IVFSExplorer_cd_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cdResponse")
            kw["aname"] = "_IVFSExplorer_cdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_cdResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cdUp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cdUp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cdUp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cdUp")
            kw["aname"] = "_IVFSExplorer_cdUp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_cdUp_Holder"
            self.pyclass = Holder

    class IVFSExplorer_cdUpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_cdUpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_cdUpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_cdUpResponse")
            kw["aname"] = "_IVFSExplorer_cdUpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_cdUpResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_entryList_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_entryList"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_entryList_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_entryList")
            kw["aname"] = "_IVFSExplorer_entryList"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVFSExplorer_entryList_Holder"
            self.pyclass = Holder

    class IVFSExplorer_entryListResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_entryListResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_entryListResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="aNames", aname="_aNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="aTypes", aname="_aTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="aSizes", aname="_aSizes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="aModes", aname="_aModes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_entryListResponse")
            kw["aname"] = "_IVFSExplorer_entryListResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aNames = []
                    self._aTypes = []
                    self._aSizes = []
                    self._aModes = []
                    return
            Holder.__name__ = "IVFSExplorer_entryListResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_exists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_exists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_exists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aNames", aname="_aNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_exists")
            kw["aname"] = "_IVFSExplorer_exists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aNames = []
                    return
            Holder.__name__ = "IVFSExplorer_exists_Holder"
            self.pyclass = Holder

    class IVFSExplorer_existsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_existsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_existsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_existsResponse")
            kw["aname"] = "_IVFSExplorer_existsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVFSExplorer_existsResponse_Holder"
            self.pyclass = Holder

    class IVFSExplorer_remove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_remove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_remove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aNames", aname="_aNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_remove")
            kw["aname"] = "_IVFSExplorer_remove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aNames = []
                    return
            Holder.__name__ = "IVFSExplorer_remove_Holder"
            self.pyclass = Holder

    class IVFSExplorer_removeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVFSExplorer_removeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVFSExplorer_removeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVFSExplorer_removeResponse")
            kw["aname"] = "_IVFSExplorer_removeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVFSExplorer_removeResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getPath")
            kw["aname"] = "_IAppliance_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getPath_Holder"
            self.pyclass = Holder

    class IAppliance_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getPathResponse")
            kw["aname"] = "_IAppliance_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_getPathResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getDisks_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getDisks"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getDisks_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getDisks")
            kw["aname"] = "_IAppliance_getDisks"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getDisks_Holder"
            self.pyclass = Holder

    class IAppliance_getDisksResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getDisksResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getDisksResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getDisksResponse")
            kw["aname"] = "_IAppliance_getDisksResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getDisksResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getVirtualSystemDescriptions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getVirtualSystemDescriptions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getVirtualSystemDescriptions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getVirtualSystemDescriptions")
            kw["aname"] = "_IAppliance_getVirtualSystemDescriptions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getVirtualSystemDescriptions_Holder"
            self.pyclass = Holder

    class IAppliance_getVirtualSystemDescriptionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getVirtualSystemDescriptionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getVirtualSystemDescriptionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getVirtualSystemDescriptionsResponse")
            kw["aname"] = "_IAppliance_getVirtualSystemDescriptionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getVirtualSystemDescriptionsResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getMachines_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getMachines"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getMachines_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getMachines")
            kw["aname"] = "_IAppliance_getMachines"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getMachines_Holder"
            self.pyclass = Holder

    class IAppliance_getMachinesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getMachinesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getMachinesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getMachinesResponse")
            kw["aname"] = "_IAppliance_getMachinesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getMachinesResponse_Holder"
            self.pyclass = Holder

    class IAppliance_read_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_read"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_read_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_read")
            kw["aname"] = "_IAppliance_read"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._file = None
                    return
            Holder.__name__ = "IAppliance_read_Holder"
            self.pyclass = Holder

    class IAppliance_readResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_readResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_readResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_readResponse")
            kw["aname"] = "_IAppliance_readResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_readResponse_Holder"
            self.pyclass = Holder

    class IAppliance_interpret_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_interpret"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_interpret_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_interpret")
            kw["aname"] = "_IAppliance_interpret"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_interpret_Holder"
            self.pyclass = Holder

    class IAppliance_interpretResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_interpretResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_interpretResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_interpretResponse")
            kw["aname"] = "_IAppliance_interpretResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAppliance_interpretResponse_Holder"
            self.pyclass = Holder

    class IAppliance_importMachines_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_importMachines"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_importMachines_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ImportOptions",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_importMachines")
            kw["aname"] = "_IAppliance_importMachines"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._options = []
                    return
            Holder.__name__ = "IAppliance_importMachines_Holder"
            self.pyclass = Holder

    class IAppliance_importMachinesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_importMachinesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_importMachinesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_importMachinesResponse")
            kw["aname"] = "_IAppliance_importMachinesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_importMachinesResponse_Holder"
            self.pyclass = Holder

    class IAppliance_createVFSExplorer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_createVFSExplorer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_createVFSExplorer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aUri", aname="_aUri", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_createVFSExplorer")
            kw["aname"] = "_IAppliance_createVFSExplorer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aUri = None
                    return
            Holder.__name__ = "IAppliance_createVFSExplorer_Holder"
            self.pyclass = Holder

    class IAppliance_createVFSExplorerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_createVFSExplorerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_createVFSExplorerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_createVFSExplorerResponse")
            kw["aname"] = "_IAppliance_createVFSExplorerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_createVFSExplorerResponse_Holder"
            self.pyclass = Holder

    class IAppliance_write_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_write"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_write_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="format", aname="_format", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="manifest", aname="_manifest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_write")
            kw["aname"] = "_IAppliance_write"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._format = None
                    self._manifest = None
                    self._path = None
                    return
            Holder.__name__ = "IAppliance_write_Holder"
            self.pyclass = Holder

    class IAppliance_writeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_writeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_writeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_writeResponse")
            kw["aname"] = "_IAppliance_writeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAppliance_writeResponse_Holder"
            self.pyclass = Holder

    class IAppliance_getWarnings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getWarnings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getWarnings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getWarnings")
            kw["aname"] = "_IAppliance_getWarnings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAppliance_getWarnings_Holder"
            self.pyclass = Holder

    class IAppliance_getWarningsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAppliance_getWarningsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAppliance_getWarningsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAppliance_getWarningsResponse")
            kw["aname"] = "_IAppliance_getWarningsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IAppliance_getWarningsResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getCount")
            kw["aname"] = "_IVirtualSystemDescription_getCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getCount_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getCountResponse")
            kw["aname"] = "_IVirtualSystemDescription_getCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getCountResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescription")
            kw["aname"] = "_IVirtualSystemDescription_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescription_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescriptionResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="aTypes", aname="_aTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aRefs", aname="_aRefs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aOvfValues", aname="_aOvfValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aVBoxValues", aname="_aVBoxValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aExtraConfigValues", aname="_aExtraConfigValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescriptionResponse")
            kw["aname"] = "_IVirtualSystemDescription_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aTypes = []
                    self._aRefs = []
                    self._aOvfValues = []
                    self._aVBoxValues = []
                    self._aExtraConfigValues = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescriptionByType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescriptionByType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescriptionByType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="aType", aname="_aType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescriptionByType")
            kw["aname"] = "_IVirtualSystemDescription_getDescriptionByType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aType = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescriptionByType_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getDescriptionByTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getDescriptionByTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getDescriptionByTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="aTypes", aname="_aTypes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aRefs", aname="_aRefs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aOvfValues", aname="_aOvfValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aVBoxValues", aname="_aVBoxValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aExtraConfigValues", aname="_aExtraConfigValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getDescriptionByTypeResponse")
            kw["aname"] = "_IVirtualSystemDescription_getDescriptionByTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._aTypes = []
                    self._aRefs = []
                    self._aOvfValues = []
                    self._aVBoxValues = []
                    self._aExtraConfigValues = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_getDescriptionByTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getValuesByType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getValuesByType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getValuesByType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="aType", aname="_aType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionValueType",lazy=False)(pname="aWhich", aname="_aWhich", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getValuesByType")
            kw["aname"] = "_IVirtualSystemDescription_getValuesByType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aType = None
                    self._aWhich = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_getValuesByType_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_getValuesByTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_getValuesByTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_getValuesByTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_getValuesByTypeResponse")
            kw["aname"] = "_IVirtualSystemDescription_getValuesByTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_getValuesByTypeResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_setFinalValues_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_setFinalValues"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_setFinalValues_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="aEnabled", aname="_aEnabled", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aVBoxValues", aname="_aVBoxValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aExtraConfigValues", aname="_aExtraConfigValues", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_setFinalValues")
            kw["aname"] = "_IVirtualSystemDescription_setFinalValues"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aEnabled = []
                    self._aVBoxValues = []
                    self._aExtraConfigValues = []
                    return
            Holder.__name__ = "IVirtualSystemDescription_setFinalValues_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_setFinalValuesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_setFinalValuesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_setFinalValuesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_setFinalValuesResponse")
            kw["aname"] = "_IVirtualSystemDescription_setFinalValuesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualSystemDescription_setFinalValuesResponse_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_addDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_addDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_addDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VirtualSystemDescriptionType",lazy=False)(pname="aType", aname="_aType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aVBoxValue", aname="_aVBoxValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aExtraConfigValue", aname="_aExtraConfigValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_addDescription")
            kw["aname"] = "_IVirtualSystemDescription_addDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aType = None
                    self._aVBoxValue = None
                    self._aExtraConfigValue = None
                    return
            Holder.__name__ = "IVirtualSystemDescription_addDescription_Holder"
            self.pyclass = Holder

    class IVirtualSystemDescription_addDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVirtualSystemDescription_addDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVirtualSystemDescription_addDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVirtualSystemDescription_addDescriptionResponse")
            kw["aname"] = "_IVirtualSystemDescription_addDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVirtualSystemDescription_addDescriptionResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeIn")
            kw["aname"] = "_IBIOSSettings_getLogoFadeIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeIn_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeInResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeInResponse")
            kw["aname"] = "_IBIOSSettings_getLogoFadeInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeInResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeIn_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeIn"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeIn_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="logoFadeIn", aname="_logoFadeIn", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeIn")
            kw["aname"] = "_IBIOSSettings_setLogoFadeIn"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoFadeIn = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeIn_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeInResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeInResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeInResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeInResponse")
            kw["aname"] = "_IBIOSSettings_setLogoFadeInResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeInResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeOut_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeOut"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeOut_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeOut")
            kw["aname"] = "_IBIOSSettings_getLogoFadeOut"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeOut_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoFadeOutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoFadeOutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoFadeOutResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoFadeOutResponse")
            kw["aname"] = "_IBIOSSettings_getLogoFadeOutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoFadeOutResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeOut_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeOut"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeOut_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="logoFadeOut", aname="_logoFadeOut", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeOut")
            kw["aname"] = "_IBIOSSettings_setLogoFadeOut"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoFadeOut = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeOut_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoFadeOutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoFadeOutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoFadeOutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoFadeOutResponse")
            kw["aname"] = "_IBIOSSettings_setLogoFadeOutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoFadeOutResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoDisplayTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoDisplayTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoDisplayTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoDisplayTime")
            kw["aname"] = "_IBIOSSettings_getLogoDisplayTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoDisplayTime_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoDisplayTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoDisplayTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoDisplayTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoDisplayTimeResponse")
            kw["aname"] = "_IBIOSSettings_getLogoDisplayTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoDisplayTimeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoDisplayTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoDisplayTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoDisplayTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="logoDisplayTime", aname="_logoDisplayTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoDisplayTime")
            kw["aname"] = "_IBIOSSettings_setLogoDisplayTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoDisplayTime = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoDisplayTime_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoDisplayTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoDisplayTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoDisplayTimeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoDisplayTimeResponse")
            kw["aname"] = "_IBIOSSettings_setLogoDisplayTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoDisplayTimeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoImagePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoImagePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoImagePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoImagePath")
            kw["aname"] = "_IBIOSSettings_getLogoImagePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoImagePath_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getLogoImagePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getLogoImagePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getLogoImagePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getLogoImagePathResponse")
            kw["aname"] = "_IBIOSSettings_getLogoImagePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getLogoImagePathResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoImagePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoImagePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoImagePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="logoImagePath", aname="_logoImagePath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoImagePath")
            kw["aname"] = "_IBIOSSettings_setLogoImagePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logoImagePath = None
                    return
            Holder.__name__ = "IBIOSSettings_setLogoImagePath_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setLogoImagePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setLogoImagePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setLogoImagePathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setLogoImagePathResponse")
            kw["aname"] = "_IBIOSSettings_setLogoImagePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setLogoImagePathResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getBootMenuMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getBootMenuMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getBootMenuMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getBootMenuMode")
            kw["aname"] = "_IBIOSSettings_getBootMenuMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getBootMenuMode_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getBootMenuModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getBootMenuModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getBootMenuModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","BIOSBootMenuMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getBootMenuModeResponse")
            kw["aname"] = "_IBIOSSettings_getBootMenuModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getBootMenuModeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setBootMenuMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setBootMenuMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setBootMenuMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BIOSBootMenuMode",lazy=False)(pname="bootMenuMode", aname="_bootMenuMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setBootMenuMode")
            kw["aname"] = "_IBIOSSettings_setBootMenuMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bootMenuMode = None
                    return
            Holder.__name__ = "IBIOSSettings_setBootMenuMode_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setBootMenuModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setBootMenuModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setBootMenuModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setBootMenuModeResponse")
            kw["aname"] = "_IBIOSSettings_setBootMenuModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setBootMenuModeResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getACPIEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getACPIEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getACPIEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getACPIEnabled")
            kw["aname"] = "_IBIOSSettings_getACPIEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getACPIEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getACPIEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getACPIEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getACPIEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getACPIEnabledResponse")
            kw["aname"] = "_IBIOSSettings_getACPIEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getACPIEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setACPIEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setACPIEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setACPIEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ACPIEnabled", aname="_ACPIEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setACPIEnabled")
            kw["aname"] = "_IBIOSSettings_setACPIEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._ACPIEnabled = None
                    return
            Holder.__name__ = "IBIOSSettings_setACPIEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setACPIEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setACPIEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setACPIEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setACPIEnabledResponse")
            kw["aname"] = "_IBIOSSettings_setACPIEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setACPIEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getIOAPICEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getIOAPICEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getIOAPICEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getIOAPICEnabled")
            kw["aname"] = "_IBIOSSettings_getIOAPICEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getIOAPICEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getIOAPICEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getIOAPICEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getIOAPICEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getIOAPICEnabledResponse")
            kw["aname"] = "_IBIOSSettings_getIOAPICEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getIOAPICEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setIOAPICEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setIOAPICEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setIOAPICEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="IOAPICEnabled", aname="_IOAPICEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setIOAPICEnabled")
            kw["aname"] = "_IBIOSSettings_setIOAPICEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOAPICEnabled = None
                    return
            Holder.__name__ = "IBIOSSettings_setIOAPICEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setIOAPICEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setIOAPICEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setIOAPICEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setIOAPICEnabledResponse")
            kw["aname"] = "_IBIOSSettings_setIOAPICEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setIOAPICEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getTimeOffset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getTimeOffset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getTimeOffset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getTimeOffset")
            kw["aname"] = "_IBIOSSettings_getTimeOffset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getTimeOffset_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getTimeOffsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getTimeOffsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getTimeOffsetResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getTimeOffsetResponse")
            kw["aname"] = "_IBIOSSettings_getTimeOffsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getTimeOffsetResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setTimeOffset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setTimeOffset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setTimeOffset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="timeOffset", aname="_timeOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setTimeOffset")
            kw["aname"] = "_IBIOSSettings_setTimeOffset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeOffset = None
                    return
            Holder.__name__ = "IBIOSSettings_setTimeOffset_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setTimeOffsetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setTimeOffsetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setTimeOffsetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setTimeOffsetResponse")
            kw["aname"] = "_IBIOSSettings_setTimeOffsetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setTimeOffsetResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getPXEDebugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getPXEDebugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getPXEDebugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getPXEDebugEnabled")
            kw["aname"] = "_IBIOSSettings_getPXEDebugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBIOSSettings_getPXEDebugEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_getPXEDebugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_getPXEDebugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_getPXEDebugEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_getPXEDebugEnabledResponse")
            kw["aname"] = "_IBIOSSettings_getPXEDebugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBIOSSettings_getPXEDebugEnabledResponse_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setPXEDebugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setPXEDebugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setPXEDebugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="PXEDebugEnabled", aname="_PXEDebugEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setPXEDebugEnabled")
            kw["aname"] = "_IBIOSSettings_setPXEDebugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._PXEDebugEnabled = None
                    return
            Holder.__name__ = "IBIOSSettings_setPXEDebugEnabled_Holder"
            self.pyclass = Holder

    class IBIOSSettings_setPXEDebugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBIOSSettings_setPXEDebugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBIOSSettings_setPXEDebugEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBIOSSettings_setPXEDebugEnabledResponse")
            kw["aname"] = "_IBIOSSettings_setPXEDebugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBIOSSettings_setPXEDebugEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getParent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParent")
            kw["aname"] = "_IMachine_getParent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getParent_Holder"
            self.pyclass = Holder

    class IMachine_getParentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParentResponse")
            kw["aname"] = "_IMachine_getParentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getParentResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccessible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessible")
            kw["aname"] = "_IMachine_getAccessible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccessible_Holder"
            self.pyclass = Holder

    class IMachine_getAccessibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessibleResponse")
            kw["aname"] = "_IMachine_getAccessibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccessibleResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccessError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessError")
            kw["aname"] = "_IMachine_getAccessError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccessError_Holder"
            self.pyclass = Holder

    class IMachine_getAccessErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccessErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccessErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccessErrorResponse")
            kw["aname"] = "_IMachine_getAccessErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccessErrorResponse_Holder"
            self.pyclass = Holder

    class IMachine_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getName")
            kw["aname"] = "_IMachine_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getName_Holder"
            self.pyclass = Holder

    class IMachine_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getNameResponse")
            kw["aname"] = "_IMachine_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setName")
            kw["aname"] = "_IMachine_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_setName_Holder"
            self.pyclass = Holder

    class IMachine_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setNameResponse")
            kw["aname"] = "_IMachine_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDescription")
            kw["aname"] = "_IMachine_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getDescription_Holder"
            self.pyclass = Holder

    class IMachine_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getDescriptionResponse")
            kw["aname"] = "_IMachine_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMachine_setDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDescription")
            kw["aname"] = "_IMachine_setDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    return
            Holder.__name__ = "IMachine_setDescription_Holder"
            self.pyclass = Holder

    class IMachine_setDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setDescriptionResponse")
            kw["aname"] = "_IMachine_setDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMachine_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getId")
            kw["aname"] = "_IMachine_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getId_Holder"
            self.pyclass = Holder

    class IMachine_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIdResponse")
            kw["aname"] = "_IMachine_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIdResponse_Holder"
            self.pyclass = Holder

    class IMachine_getOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getOSTypeId")
            kw["aname"] = "_IMachine_getOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getOSTypeId_Holder"
            self.pyclass = Holder

    class IMachine_getOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getOSTypeIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getOSTypeIdResponse")
            kw["aname"] = "_IMachine_getOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IMachine_setOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="OSTypeId", aname="_OSTypeId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setOSTypeId")
            kw["aname"] = "_IMachine_setOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._OSTypeId = None
                    return
            Holder.__name__ = "IMachine_setOSTypeId_Holder"
            self.pyclass = Holder

    class IMachine_setOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setOSTypeIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setOSTypeIdResponse")
            kw["aname"] = "_IMachine_setOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareVersion")
            kw["aname"] = "_IMachine_getHardwareVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getHardwareVersion_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareVersionResponse")
            kw["aname"] = "_IMachine_getHardwareVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHardwareVersionResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hardwareVersion", aname="_hardwareVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareVersion")
            kw["aname"] = "_IMachine_setHardwareVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hardwareVersion = None
                    return
            Holder.__name__ = "IMachine_setHardwareVersion_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareVersionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareVersionResponse")
            kw["aname"] = "_IMachine_setHardwareVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHardwareVersionResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareUUID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareUUID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareUUID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareUUID")
            kw["aname"] = "_IMachine_getHardwareUUID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getHardwareUUID_Holder"
            self.pyclass = Holder

    class IMachine_getHardwareUUIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHardwareUUIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHardwareUUIDResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHardwareUUIDResponse")
            kw["aname"] = "_IMachine_getHardwareUUIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHardwareUUIDResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareUUID_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareUUID"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareUUID_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hardwareUUID", aname="_hardwareUUID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareUUID")
            kw["aname"] = "_IMachine_setHardwareUUID"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hardwareUUID = None
                    return
            Holder.__name__ = "IMachine_setHardwareUUID_Holder"
            self.pyclass = Holder

    class IMachine_setHardwareUUIDResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHardwareUUIDResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHardwareUUIDResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHardwareUUIDResponse")
            kw["aname"] = "_IMachine_setHardwareUUIDResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHardwareUUIDResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUCount")
            kw["aname"] = "_IMachine_getCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUCount_Holder"
            self.pyclass = Holder

    class IMachine_getCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUCountResponse")
            kw["aname"] = "_IMachine_getCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="CPUCount", aname="_CPUCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUCount")
            kw["aname"] = "_IMachine_setCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUCount = None
                    return
            Holder.__name__ = "IMachine_setCPUCount_Holder"
            self.pyclass = Holder

    class IMachine_setCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUCountResponse")
            kw["aname"] = "_IMachine_setCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUHotPlugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUHotPlugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUHotPlugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUHotPlugEnabled")
            kw["aname"] = "_IMachine_getCPUHotPlugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUHotPlugEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getCPUHotPlugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUHotPlugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUHotPlugEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUHotPlugEnabledResponse")
            kw["aname"] = "_IMachine_getCPUHotPlugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUHotPlugEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUHotPlugEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUHotPlugEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUHotPlugEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="CPUHotPlugEnabled", aname="_CPUHotPlugEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUHotPlugEnabled")
            kw["aname"] = "_IMachine_setCPUHotPlugEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUHotPlugEnabled = None
                    return
            Holder.__name__ = "IMachine_setCPUHotPlugEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setCPUHotPlugEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUHotPlugEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUHotPlugEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUHotPlugEnabledResponse")
            kw["aname"] = "_IMachine_setCPUHotPlugEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUHotPlugEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUExecutionCap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUExecutionCap"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUExecutionCap_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUExecutionCap")
            kw["aname"] = "_IMachine_getCPUExecutionCap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCPUExecutionCap_Holder"
            self.pyclass = Holder

    class IMachine_getCPUExecutionCapResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUExecutionCapResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUExecutionCapResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUExecutionCapResponse")
            kw["aname"] = "_IMachine_getCPUExecutionCapResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUExecutionCapResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUExecutionCap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUExecutionCap"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUExecutionCap_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="CPUExecutionCap", aname="_CPUExecutionCap", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUExecutionCap")
            kw["aname"] = "_IMachine_setCPUExecutionCap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._CPUExecutionCap = None
                    return
            Holder.__name__ = "IMachine_setCPUExecutionCap_Holder"
            self.pyclass = Holder

    class IMachine_setCPUExecutionCapResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUExecutionCapResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUExecutionCapResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUExecutionCapResponse")
            kw["aname"] = "_IMachine_setCPUExecutionCapResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUExecutionCapResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMemorySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemorySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemorySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemorySize")
            kw["aname"] = "_IMachine_getMemorySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMemorySize_Holder"
            self.pyclass = Holder

    class IMachine_getMemorySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemorySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemorySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemorySizeResponse")
            kw["aname"] = "_IMachine_getMemorySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMemorySizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setMemorySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemorySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemorySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memorySize", aname="_memorySize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemorySize")
            kw["aname"] = "_IMachine_setMemorySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._memorySize = None
                    return
            Holder.__name__ = "IMachine_setMemorySize_Holder"
            self.pyclass = Holder

    class IMachine_setMemorySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemorySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemorySizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemorySizeResponse")
            kw["aname"] = "_IMachine_setMemorySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setMemorySizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemoryBalloonSize")
            kw["aname"] = "_IMachine_getMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IMachine_getMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMemoryBalloonSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMemoryBalloonSizeResponse")
            kw["aname"] = "_IMachine_getMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memoryBalloonSize", aname="_memoryBalloonSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemoryBalloonSize")
            kw["aname"] = "_IMachine_setMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._memoryBalloonSize = None
                    return
            Holder.__name__ = "IMachine_setMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IMachine_setMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMemoryBalloonSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMemoryBalloonSizeResponse")
            kw["aname"] = "_IMachine_setMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getPageFusionEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPageFusionEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPageFusionEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPageFusionEnabled")
            kw["aname"] = "_IMachine_getPageFusionEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getPageFusionEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getPageFusionEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPageFusionEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPageFusionEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPageFusionEnabledResponse")
            kw["aname"] = "_IMachine_getPageFusionEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getPageFusionEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setPageFusionEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPageFusionEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPageFusionEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="pageFusionEnabled", aname="_pageFusionEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPageFusionEnabled")
            kw["aname"] = "_IMachine_setPageFusionEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pageFusionEnabled = None
                    return
            Holder.__name__ = "IMachine_setPageFusionEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setPageFusionEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPageFusionEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPageFusionEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPageFusionEnabledResponse")
            kw["aname"] = "_IMachine_setPageFusionEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setPageFusionEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getVRAMSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRAMSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRAMSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRAMSize")
            kw["aname"] = "_IMachine_getVRAMSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getVRAMSize_Holder"
            self.pyclass = Holder

    class IMachine_getVRAMSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRAMSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRAMSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRAMSizeResponse")
            kw["aname"] = "_IMachine_getVRAMSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getVRAMSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setVRAMSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setVRAMSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setVRAMSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="VRAMSize", aname="_VRAMSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setVRAMSize")
            kw["aname"] = "_IMachine_setVRAMSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VRAMSize = None
                    return
            Holder.__name__ = "IMachine_setVRAMSize_Holder"
            self.pyclass = Holder

    class IMachine_setVRAMSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setVRAMSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setVRAMSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setVRAMSizeResponse")
            kw["aname"] = "_IMachine_setVRAMSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setVRAMSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate3DEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate3DEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate3DEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate3DEnabled")
            kw["aname"] = "_IMachine_getAccelerate3DEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccelerate3DEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate3DEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate3DEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate3DEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate3DEnabledResponse")
            kw["aname"] = "_IMachine_getAccelerate3DEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccelerate3DEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate3DEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate3DEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate3DEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="accelerate3DEnabled", aname="_accelerate3DEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate3DEnabled")
            kw["aname"] = "_IMachine_setAccelerate3DEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._accelerate3DEnabled = None
                    return
            Holder.__name__ = "IMachine_setAccelerate3DEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate3DEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate3DEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate3DEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate3DEnabledResponse")
            kw["aname"] = "_IMachine_setAccelerate3DEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAccelerate3DEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate2DVideoEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate2DVideoEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate2DVideoEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate2DVideoEnabled")
            kw["aname"] = "_IMachine_getAccelerate2DVideoEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAccelerate2DVideoEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getAccelerate2DVideoEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAccelerate2DVideoEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAccelerate2DVideoEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAccelerate2DVideoEnabledResponse")
            kw["aname"] = "_IMachine_getAccelerate2DVideoEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAccelerate2DVideoEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate2DVideoEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate2DVideoEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate2DVideoEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="accelerate2DVideoEnabled", aname="_accelerate2DVideoEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate2DVideoEnabled")
            kw["aname"] = "_IMachine_setAccelerate2DVideoEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._accelerate2DVideoEnabled = None
                    return
            Holder.__name__ = "IMachine_setAccelerate2DVideoEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setAccelerate2DVideoEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setAccelerate2DVideoEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setAccelerate2DVideoEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setAccelerate2DVideoEnabledResponse")
            kw["aname"] = "_IMachine_setAccelerate2DVideoEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setAccelerate2DVideoEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMonitorCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMonitorCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMonitorCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMonitorCount")
            kw["aname"] = "_IMachine_getMonitorCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMonitorCount_Holder"
            self.pyclass = Holder

    class IMachine_getMonitorCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMonitorCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMonitorCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMonitorCountResponse")
            kw["aname"] = "_IMachine_getMonitorCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMonitorCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_setMonitorCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMonitorCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMonitorCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="monitorCount", aname="_monitorCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMonitorCount")
            kw["aname"] = "_IMachine_setMonitorCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._monitorCount = None
                    return
            Holder.__name__ = "IMachine_setMonitorCount_Holder"
            self.pyclass = Holder

    class IMachine_setMonitorCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setMonitorCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setMonitorCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setMonitorCountResponse")
            kw["aname"] = "_IMachine_setMonitorCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setMonitorCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_getBIOSSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBIOSSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBIOSSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBIOSSettings")
            kw["aname"] = "_IMachine_getBIOSSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getBIOSSettings_Holder"
            self.pyclass = Holder

    class IMachine_getBIOSSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBIOSSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBIOSSettingsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBIOSSettingsResponse")
            kw["aname"] = "_IMachine_getBIOSSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getBIOSSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFirmwareType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFirmwareType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFirmwareType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFirmwareType")
            kw["aname"] = "_IMachine_getFirmwareType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFirmwareType_Holder"
            self.pyclass = Holder

    class IMachine_getFirmwareTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFirmwareTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFirmwareTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFirmwareTypeResponse")
            kw["aname"] = "_IMachine_getFirmwareTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFirmwareTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFirmwareType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFirmwareType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFirmwareType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FirmwareType",lazy=False)(pname="firmwareType", aname="_firmwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFirmwareType")
            kw["aname"] = "_IMachine_setFirmwareType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._firmwareType = None
                    return
            Holder.__name__ = "IMachine_setFirmwareType_Holder"
            self.pyclass = Holder

    class IMachine_setFirmwareTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFirmwareTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFirmwareTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFirmwareTypeResponse")
            kw["aname"] = "_IMachine_setFirmwareTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFirmwareTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getPointingHidType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPointingHidType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPointingHidType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPointingHidType")
            kw["aname"] = "_IMachine_getPointingHidType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getPointingHidType_Holder"
            self.pyclass = Holder

    class IMachine_getPointingHidTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPointingHidTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPointingHidTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","PointingHidType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPointingHidTypeResponse")
            kw["aname"] = "_IMachine_getPointingHidTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getPointingHidTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setPointingHidType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPointingHidType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPointingHidType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","PointingHidType",lazy=False)(pname="pointingHidType", aname="_pointingHidType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPointingHidType")
            kw["aname"] = "_IMachine_setPointingHidType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pointingHidType = None
                    return
            Holder.__name__ = "IMachine_setPointingHidType_Holder"
            self.pyclass = Holder

    class IMachine_setPointingHidTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setPointingHidTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setPointingHidTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setPointingHidTypeResponse")
            kw["aname"] = "_IMachine_setPointingHidTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setPointingHidTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getKeyboardHidType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getKeyboardHidType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getKeyboardHidType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getKeyboardHidType")
            kw["aname"] = "_IMachine_getKeyboardHidType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getKeyboardHidType_Holder"
            self.pyclass = Holder

    class IMachine_getKeyboardHidTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getKeyboardHidTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getKeyboardHidTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","KeyboardHidType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getKeyboardHidTypeResponse")
            kw["aname"] = "_IMachine_getKeyboardHidTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getKeyboardHidTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setKeyboardHidType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setKeyboardHidType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setKeyboardHidType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","KeyboardHidType",lazy=False)(pname="keyboardHidType", aname="_keyboardHidType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setKeyboardHidType")
            kw["aname"] = "_IMachine_setKeyboardHidType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._keyboardHidType = None
                    return
            Holder.__name__ = "IMachine_setKeyboardHidType_Holder"
            self.pyclass = Holder

    class IMachine_setKeyboardHidTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setKeyboardHidTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setKeyboardHidTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setKeyboardHidTypeResponse")
            kw["aname"] = "_IMachine_setKeyboardHidTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setKeyboardHidTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHpetEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHpetEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHpetEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHpetEnabled")
            kw["aname"] = "_IMachine_getHpetEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getHpetEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getHpetEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHpetEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHpetEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHpetEnabledResponse")
            kw["aname"] = "_IMachine_getHpetEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHpetEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHpetEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHpetEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHpetEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="hpetEnabled", aname="_hpetEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHpetEnabled")
            kw["aname"] = "_IMachine_setHpetEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hpetEnabled = None
                    return
            Holder.__name__ = "IMachine_setHpetEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setHpetEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHpetEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHpetEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHpetEnabledResponse")
            kw["aname"] = "_IMachine_setHpetEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHpetEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getChipsetType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getChipsetType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getChipsetType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getChipsetType")
            kw["aname"] = "_IMachine_getChipsetType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getChipsetType_Holder"
            self.pyclass = Holder

    class IMachine_getChipsetTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getChipsetTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getChipsetTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getChipsetTypeResponse")
            kw["aname"] = "_IMachine_getChipsetTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getChipsetTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setChipsetType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setChipsetType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setChipsetType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipsetType", aname="_chipsetType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setChipsetType")
            kw["aname"] = "_IMachine_setChipsetType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipsetType = None
                    return
            Holder.__name__ = "IMachine_setChipsetType_Holder"
            self.pyclass = Holder

    class IMachine_setChipsetTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setChipsetTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setChipsetTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setChipsetTypeResponse")
            kw["aname"] = "_IMachine_setChipsetTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setChipsetTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotFolder")
            kw["aname"] = "_IMachine_getSnapshotFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSnapshotFolder_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotFolderResponse")
            kw["aname"] = "_IMachine_getSnapshotFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSnapshotFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_setSnapshotFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setSnapshotFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setSnapshotFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snapshotFolder", aname="_snapshotFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setSnapshotFolder")
            kw["aname"] = "_IMachine_setSnapshotFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._snapshotFolder = None
                    return
            Holder.__name__ = "IMachine_setSnapshotFolder_Holder"
            self.pyclass = Holder

    class IMachine_setSnapshotFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setSnapshotFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setSnapshotFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setSnapshotFolderResponse")
            kw["aname"] = "_IMachine_setSnapshotFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setSnapshotFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getVRDEServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRDEServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRDEServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRDEServer")
            kw["aname"] = "_IMachine_getVRDEServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getVRDEServer_Holder"
            self.pyclass = Holder

    class IMachine_getVRDEServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getVRDEServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getVRDEServerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getVRDEServerResponse")
            kw["aname"] = "_IMachine_getVRDEServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getVRDEServerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getEmulatedUSBWebcameraEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEmulatedUSBWebcameraEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEmulatedUSBWebcameraEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEmulatedUSBWebcameraEnabled")
            kw["aname"] = "_IMachine_getEmulatedUSBWebcameraEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getEmulatedUSBWebcameraEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getEmulatedUSBWebcameraEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEmulatedUSBWebcameraEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEmulatedUSBWebcameraEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEmulatedUSBWebcameraEnabledResponse")
            kw["aname"] = "_IMachine_getEmulatedUSBWebcameraEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getEmulatedUSBWebcameraEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setEmulatedUSBWebcameraEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setEmulatedUSBWebcameraEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setEmulatedUSBWebcameraEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="emulatedUSBWebcameraEnabled", aname="_emulatedUSBWebcameraEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setEmulatedUSBWebcameraEnabled")
            kw["aname"] = "_IMachine_setEmulatedUSBWebcameraEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._emulatedUSBWebcameraEnabled = None
                    return
            Holder.__name__ = "IMachine_setEmulatedUSBWebcameraEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setEmulatedUSBWebcameraEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setEmulatedUSBWebcameraEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setEmulatedUSBWebcameraEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setEmulatedUSBWebcameraEnabledResponse")
            kw["aname"] = "_IMachine_setEmulatedUSBWebcameraEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setEmulatedUSBWebcameraEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getEmulatedUSBCardReaderEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEmulatedUSBCardReaderEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEmulatedUSBCardReaderEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEmulatedUSBCardReaderEnabled")
            kw["aname"] = "_IMachine_getEmulatedUSBCardReaderEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getEmulatedUSBCardReaderEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getEmulatedUSBCardReaderEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getEmulatedUSBCardReaderEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getEmulatedUSBCardReaderEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getEmulatedUSBCardReaderEnabledResponse")
            kw["aname"] = "_IMachine_getEmulatedUSBCardReaderEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getEmulatedUSBCardReaderEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setEmulatedUSBCardReaderEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setEmulatedUSBCardReaderEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setEmulatedUSBCardReaderEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="emulatedUSBCardReaderEnabled", aname="_emulatedUSBCardReaderEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setEmulatedUSBCardReaderEnabled")
            kw["aname"] = "_IMachine_setEmulatedUSBCardReaderEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._emulatedUSBCardReaderEnabled = None
                    return
            Holder.__name__ = "IMachine_setEmulatedUSBCardReaderEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setEmulatedUSBCardReaderEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setEmulatedUSBCardReaderEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setEmulatedUSBCardReaderEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setEmulatedUSBCardReaderEnabledResponse")
            kw["aname"] = "_IMachine_setEmulatedUSBCardReaderEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setEmulatedUSBCardReaderEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachments")
            kw["aname"] = "_IMachine_getMediumAttachments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachments_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentsResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentsResponse")
            kw["aname"] = "_IMachine_getMediumAttachmentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getUSBController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBController")
            kw["aname"] = "_IMachine_getUSBController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getUSBController_Holder"
            self.pyclass = Holder

    class IMachine_getUSBControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getUSBControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getUSBControllerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getUSBControllerResponse")
            kw["aname"] = "_IMachine_getUSBControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getUSBControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getAudioAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAudioAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAudioAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAudioAdapter")
            kw["aname"] = "_IMachine_getAudioAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getAudioAdapter_Holder"
            self.pyclass = Holder

    class IMachine_getAudioAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getAudioAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getAudioAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getAudioAdapterResponse")
            kw["aname"] = "_IMachine_getAudioAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getAudioAdapterResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllers_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllers"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllers_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllers")
            kw["aname"] = "_IMachine_getStorageControllers"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getStorageControllers_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllersResponse")
            kw["aname"] = "_IMachine_getStorageControllersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getStorageControllersResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsFilePath")
            kw["aname"] = "_IMachine_getSettingsFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSettingsFilePath_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsFilePathResponse")
            kw["aname"] = "_IMachine_getSettingsFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSettingsFilePathResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsModified_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsModified"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsModified_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsModified")
            kw["aname"] = "_IMachine_getSettingsModified"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSettingsModified_Holder"
            self.pyclass = Holder

    class IMachine_getSettingsModifiedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSettingsModifiedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSettingsModifiedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSettingsModifiedResponse")
            kw["aname"] = "_IMachine_getSettingsModifiedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSettingsModifiedResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSessionState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionState")
            kw["aname"] = "_IMachine_getSessionState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSessionState_Holder"
            self.pyclass = Holder

    class IMachine_getSessionStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionStateResponse")
            kw["aname"] = "_IMachine_getSessionStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSessionStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSessionType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionType")
            kw["aname"] = "_IMachine_getSessionType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSessionType_Holder"
            self.pyclass = Holder

    class IMachine_getSessionTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionTypeResponse")
            kw["aname"] = "_IMachine_getSessionTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSessionTypeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSessionPid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionPid"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionPid_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionPid")
            kw["aname"] = "_IMachine_getSessionPid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSessionPid_Holder"
            self.pyclass = Holder

    class IMachine_getSessionPidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSessionPidResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSessionPidResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSessionPidResponse")
            kw["aname"] = "_IMachine_getSessionPidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSessionPidResponse_Holder"
            self.pyclass = Holder

    class IMachine_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getState")
            kw["aname"] = "_IMachine_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getState_Holder"
            self.pyclass = Holder

    class IMachine_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStateResponse")
            kw["aname"] = "_IMachine_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_getLastStateChange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLastStateChange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLastStateChange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLastStateChange")
            kw["aname"] = "_IMachine_getLastStateChange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getLastStateChange_Holder"
            self.pyclass = Holder

    class IMachine_getLastStateChangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLastStateChangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLastStateChangeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLastStateChangeResponse")
            kw["aname"] = "_IMachine_getLastStateChangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getLastStateChangeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStateFilePath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStateFilePath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStateFilePath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStateFilePath")
            kw["aname"] = "_IMachine_getStateFilePath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getStateFilePath_Holder"
            self.pyclass = Holder

    class IMachine_getStateFilePathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStateFilePathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStateFilePathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStateFilePathResponse")
            kw["aname"] = "_IMachine_getStateFilePathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStateFilePathResponse_Holder"
            self.pyclass = Holder

    class IMachine_getLogFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLogFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLogFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLogFolder")
            kw["aname"] = "_IMachine_getLogFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getLogFolder_Holder"
            self.pyclass = Holder

    class IMachine_getLogFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getLogFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getLogFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getLogFolderResponse")
            kw["aname"] = "_IMachine_getLogFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getLogFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentSnapshot")
            kw["aname"] = "_IMachine_getCurrentSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCurrentSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentSnapshotResponse")
            kw["aname"] = "_IMachine_getCurrentSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCurrentSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotCount")
            kw["aname"] = "_IMachine_getSnapshotCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSnapshotCount_Holder"
            self.pyclass = Holder

    class IMachine_getSnapshotCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSnapshotCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSnapshotCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSnapshotCountResponse")
            kw["aname"] = "_IMachine_getSnapshotCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSnapshotCountResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentStateModified_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentStateModified"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentStateModified_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentStateModified")
            kw["aname"] = "_IMachine_getCurrentStateModified"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getCurrentStateModified_Holder"
            self.pyclass = Holder

    class IMachine_getCurrentStateModifiedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCurrentStateModifiedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCurrentStateModifiedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCurrentStateModifiedResponse")
            kw["aname"] = "_IMachine_getCurrentStateModifiedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCurrentStateModifiedResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSharedFolders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSharedFolders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSharedFolders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSharedFolders")
            kw["aname"] = "_IMachine_getSharedFolders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getSharedFolders_Holder"
            self.pyclass = Holder

    class IMachine_getSharedFoldersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSharedFoldersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSharedFoldersResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ISharedFolder",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSharedFoldersResponse")
            kw["aname"] = "_IMachine_getSharedFoldersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getSharedFoldersResponse_Holder"
            self.pyclass = Holder

    class IMachine_getClipboardMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getClipboardMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getClipboardMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getClipboardMode")
            kw["aname"] = "_IMachine_getClipboardMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getClipboardMode_Holder"
            self.pyclass = Holder

    class IMachine_getClipboardModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getClipboardModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getClipboardModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ClipboardMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getClipboardModeResponse")
            kw["aname"] = "_IMachine_getClipboardModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getClipboardModeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setClipboardMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setClipboardMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setClipboardMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ClipboardMode",lazy=False)(pname="clipboardMode", aname="_clipboardMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setClipboardMode")
            kw["aname"] = "_IMachine_setClipboardMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._clipboardMode = None
                    return
            Holder.__name__ = "IMachine_setClipboardMode_Holder"
            self.pyclass = Holder

    class IMachine_setClipboardModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setClipboardModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setClipboardModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setClipboardModeResponse")
            kw["aname"] = "_IMachine_setClipboardModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setClipboardModeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyNotificationPatterns_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyNotificationPatterns"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyNotificationPatterns_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyNotificationPatterns")
            kw["aname"] = "_IMachine_getGuestPropertyNotificationPatterns"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyNotificationPatterns_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyNotificationPatternsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyNotificationPatternsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyNotificationPatternsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyNotificationPatternsResponse")
            kw["aname"] = "_IMachine_getGuestPropertyNotificationPatternsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyNotificationPatternsResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyNotificationPatterns_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyNotificationPatterns"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyNotificationPatterns_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="guestPropertyNotificationPatterns", aname="_guestPropertyNotificationPatterns", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyNotificationPatterns")
            kw["aname"] = "_IMachine_setGuestPropertyNotificationPatterns"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._guestPropertyNotificationPatterns = None
                    return
            Holder.__name__ = "IMachine_setGuestPropertyNotificationPatterns_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyNotificationPatternsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyNotificationPatternsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyNotificationPatternsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyNotificationPatternsResponse")
            kw["aname"] = "_IMachine_setGuestPropertyNotificationPatternsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGuestPropertyNotificationPatternsResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterEnabled")
            kw["aname"] = "_IMachine_getTeleporterEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterEnabledResponse")
            kw["aname"] = "_IMachine_getTeleporterEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="teleporterEnabled", aname="_teleporterEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterEnabled")
            kw["aname"] = "_IMachine_setTeleporterEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterEnabled = None
                    return
            Holder.__name__ = "IMachine_setTeleporterEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterEnabledResponse")
            kw["aname"] = "_IMachine_setTeleporterEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPort")
            kw["aname"] = "_IMachine_getTeleporterPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPort_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPortResponse")
            kw["aname"] = "_IMachine_getTeleporterPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="teleporterPort", aname="_teleporterPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPort")
            kw["aname"] = "_IMachine_setTeleporterPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterPort = None
                    return
            Holder.__name__ = "IMachine_setTeleporterPort_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPortResponse")
            kw["aname"] = "_IMachine_setTeleporterPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterAddress")
            kw["aname"] = "_IMachine_getTeleporterAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterAddress_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterAddressResponse")
            kw["aname"] = "_IMachine_getTeleporterAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teleporterAddress", aname="_teleporterAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterAddress")
            kw["aname"] = "_IMachine_setTeleporterAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterAddress = None
                    return
            Holder.__name__ = "IMachine_setTeleporterAddress_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterAddressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterAddressResponse")
            kw["aname"] = "_IMachine_setTeleporterAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPassword")
            kw["aname"] = "_IMachine_getTeleporterPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPassword_Holder"
            self.pyclass = Holder

    class IMachine_getTeleporterPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getTeleporterPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getTeleporterPasswordResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getTeleporterPasswordResponse")
            kw["aname"] = "_IMachine_getTeleporterPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getTeleporterPasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="teleporterPassword", aname="_teleporterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPassword")
            kw["aname"] = "_IMachine_setTeleporterPassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._teleporterPassword = None
                    return
            Holder.__name__ = "IMachine_setTeleporterPassword_Holder"
            self.pyclass = Holder

    class IMachine_setTeleporterPasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setTeleporterPasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setTeleporterPasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setTeleporterPasswordResponse")
            kw["aname"] = "_IMachine_setTeleporterPasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setTeleporterPasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceState")
            kw["aname"] = "_IMachine_getFaultToleranceState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceState_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","FaultToleranceState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceStateResponse")
            kw["aname"] = "_IMachine_getFaultToleranceStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","FaultToleranceState",lazy=False)(pname="faultToleranceState", aname="_faultToleranceState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceState")
            kw["aname"] = "_IMachine_setFaultToleranceState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultToleranceState = None
                    return
            Holder.__name__ = "IMachine_setFaultToleranceState_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceStateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceStateResponse")
            kw["aname"] = "_IMachine_setFaultToleranceStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultToleranceStateResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePort")
            kw["aname"] = "_IMachine_getFaultTolerancePort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePort_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePortResponse")
            kw["aname"] = "_IMachine_getFaultTolerancePortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePortResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="faultTolerancePort", aname="_faultTolerancePort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePort")
            kw["aname"] = "_IMachine_setFaultTolerancePort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultTolerancePort = None
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePort_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePortResponse")
            kw["aname"] = "_IMachine_setFaultTolerancePortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceAddress")
            kw["aname"] = "_IMachine_getFaultToleranceAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceAddress_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceAddressResponse")
            kw["aname"] = "_IMachine_getFaultToleranceAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="faultToleranceAddress", aname="_faultToleranceAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceAddress")
            kw["aname"] = "_IMachine_setFaultToleranceAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultToleranceAddress = None
                    return
            Holder.__name__ = "IMachine_setFaultToleranceAddress_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceAddressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceAddressResponse")
            kw["aname"] = "_IMachine_setFaultToleranceAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultToleranceAddressResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePassword")
            kw["aname"] = "_IMachine_getFaultTolerancePassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePassword_Holder"
            self.pyclass = Holder

    class IMachine_getFaultTolerancePasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultTolerancePasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultTolerancePasswordResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultTolerancePasswordResponse")
            kw["aname"] = "_IMachine_getFaultTolerancePasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultTolerancePasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePassword_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePassword"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePassword_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="faultTolerancePassword", aname="_faultTolerancePassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePassword")
            kw["aname"] = "_IMachine_setFaultTolerancePassword"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultTolerancePassword = None
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePassword_Holder"
            self.pyclass = Holder

    class IMachine_setFaultTolerancePasswordResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultTolerancePasswordResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultTolerancePasswordResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultTolerancePasswordResponse")
            kw["aname"] = "_IMachine_setFaultTolerancePasswordResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultTolerancePasswordResponse_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceSyncInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceSyncInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceSyncInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceSyncInterval")
            kw["aname"] = "_IMachine_getFaultToleranceSyncInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceSyncInterval_Holder"
            self.pyclass = Holder

    class IMachine_getFaultToleranceSyncIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getFaultToleranceSyncIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getFaultToleranceSyncIntervalResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getFaultToleranceSyncIntervalResponse")
            kw["aname"] = "_IMachine_getFaultToleranceSyncIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getFaultToleranceSyncIntervalResponse_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceSyncInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceSyncInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceSyncInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="faultToleranceSyncInterval", aname="_faultToleranceSyncInterval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceSyncInterval")
            kw["aname"] = "_IMachine_setFaultToleranceSyncInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._faultToleranceSyncInterval = None
                    return
            Holder.__name__ = "IMachine_setFaultToleranceSyncInterval_Holder"
            self.pyclass = Holder

    class IMachine_setFaultToleranceSyncIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setFaultToleranceSyncIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setFaultToleranceSyncIntervalResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setFaultToleranceSyncIntervalResponse")
            kw["aname"] = "_IMachine_setFaultToleranceSyncIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setFaultToleranceSyncIntervalResponse_Holder"
            self.pyclass = Holder

    class IMachine_getRTCUseUTC_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getRTCUseUTC"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getRTCUseUTC_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getRTCUseUTC")
            kw["aname"] = "_IMachine_getRTCUseUTC"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getRTCUseUTC_Holder"
            self.pyclass = Holder

    class IMachine_getRTCUseUTCResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getRTCUseUTCResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getRTCUseUTCResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getRTCUseUTCResponse")
            kw["aname"] = "_IMachine_getRTCUseUTCResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getRTCUseUTCResponse_Holder"
            self.pyclass = Holder

    class IMachine_setRTCUseUTC_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setRTCUseUTC"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setRTCUseUTC_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="RTCUseUTC", aname="_RTCUseUTC", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setRTCUseUTC")
            kw["aname"] = "_IMachine_setRTCUseUTC"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._RTCUseUTC = None
                    return
            Holder.__name__ = "IMachine_setRTCUseUTC_Holder"
            self.pyclass = Holder

    class IMachine_setRTCUseUTCResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setRTCUseUTCResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setRTCUseUTCResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setRTCUseUTCResponse")
            kw["aname"] = "_IMachine_setRTCUseUTCResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setRTCUseUTCResponse_Holder"
            self.pyclass = Holder

    class IMachine_getIoCacheEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIoCacheEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIoCacheEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIoCacheEnabled")
            kw["aname"] = "_IMachine_getIoCacheEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getIoCacheEnabled_Holder"
            self.pyclass = Holder

    class IMachine_getIoCacheEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIoCacheEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIoCacheEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIoCacheEnabledResponse")
            kw["aname"] = "_IMachine_getIoCacheEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIoCacheEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_setIoCacheEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIoCacheEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIoCacheEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="ioCacheEnabled", aname="_ioCacheEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIoCacheEnabled")
            kw["aname"] = "_IMachine_setIoCacheEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._ioCacheEnabled = None
                    return
            Holder.__name__ = "IMachine_setIoCacheEnabled_Holder"
            self.pyclass = Holder

    class IMachine_setIoCacheEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIoCacheEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIoCacheEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIoCacheEnabledResponse")
            kw["aname"] = "_IMachine_setIoCacheEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setIoCacheEnabledResponse_Holder"
            self.pyclass = Holder

    class IMachine_getIoCacheSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIoCacheSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIoCacheSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIoCacheSize")
            kw["aname"] = "_IMachine_getIoCacheSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getIoCacheSize_Holder"
            self.pyclass = Holder

    class IMachine_getIoCacheSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getIoCacheSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getIoCacheSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getIoCacheSizeResponse")
            kw["aname"] = "_IMachine_getIoCacheSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getIoCacheSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_setIoCacheSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIoCacheSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIoCacheSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="ioCacheSize", aname="_ioCacheSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIoCacheSize")
            kw["aname"] = "_IMachine_setIoCacheSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._ioCacheSize = None
                    return
            Holder.__name__ = "IMachine_setIoCacheSize_Holder"
            self.pyclass = Holder

    class IMachine_setIoCacheSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setIoCacheSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setIoCacheSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setIoCacheSizeResponse")
            kw["aname"] = "_IMachine_setIoCacheSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setIoCacheSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_getBandwidthControl_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBandwidthControl"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBandwidthControl_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBandwidthControl")
            kw["aname"] = "_IMachine_getBandwidthControl"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getBandwidthControl_Holder"
            self.pyclass = Holder

    class IMachine_getBandwidthControlResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBandwidthControlResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBandwidthControlResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBandwidthControlResponse")
            kw["aname"] = "_IMachine_getBandwidthControlResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getBandwidthControlResponse_Holder"
            self.pyclass = Holder

    class IMachine_getPciDeviceAssignments_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPciDeviceAssignments"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPciDeviceAssignments_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPciDeviceAssignments")
            kw["aname"] = "_IMachine_getPciDeviceAssignments"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getPciDeviceAssignments_Holder"
            self.pyclass = Holder

    class IMachine_getPciDeviceAssignmentsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getPciDeviceAssignmentsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getPciDeviceAssignmentsResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IPciDeviceAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getPciDeviceAssignmentsResponse")
            kw["aname"] = "_IMachine_getPciDeviceAssignmentsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getPciDeviceAssignmentsResponse_Holder"
            self.pyclass = Holder

    class IMachine_lockMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_lockMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_lockMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="session", aname="_session", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","LockType",lazy=False)(pname="lockType", aname="_lockType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_lockMachine")
            kw["aname"] = "_IMachine_lockMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._session = None
                    self._lockType = None
                    return
            Holder.__name__ = "IMachine_lockMachine_Holder"
            self.pyclass = Holder

    class IMachine_lockMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_lockMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_lockMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_lockMachineResponse")
            kw["aname"] = "_IMachine_lockMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_lockMachineResponse_Holder"
            self.pyclass = Holder

    class IMachine_launchVMProcess_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_launchVMProcess"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_launchVMProcess_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="session", aname="_session", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="environment", aname="_environment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_launchVMProcess")
            kw["aname"] = "_IMachine_launchVMProcess"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._session = None
                    self._type = None
                    self._environment = None
                    return
            Holder.__name__ = "IMachine_launchVMProcess_Holder"
            self.pyclass = Holder

    class IMachine_launchVMProcessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_launchVMProcessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_launchVMProcessResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_launchVMProcessResponse")
            kw["aname"] = "_IMachine_launchVMProcessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_launchVMProcessResponse_Holder"
            self.pyclass = Holder

    class IMachine_setBootOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBootOrder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBootOrder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBootOrder")
            kw["aname"] = "_IMachine_setBootOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_setBootOrder_Holder"
            self.pyclass = Holder

    class IMachine_setBootOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBootOrderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBootOrderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBootOrderResponse")
            kw["aname"] = "_IMachine_setBootOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setBootOrderResponse_Holder"
            self.pyclass = Holder

    class IMachine_getBootOrder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBootOrder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBootOrder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBootOrder")
            kw["aname"] = "_IMachine_getBootOrder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    return
            Holder.__name__ = "IMachine_getBootOrder_Holder"
            self.pyclass = Holder

    class IMachine_getBootOrderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getBootOrderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getBootOrderResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getBootOrderResponse")
            kw["aname"] = "_IMachine_getBootOrderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getBootOrderResponse_Holder"
            self.pyclass = Holder

    class IMachine_attachDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="medium", aname="_medium", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachDevice")
            kw["aname"] = "_IMachine_attachDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._type = None
                    self._medium = None
                    return
            Holder.__name__ = "IMachine_attachDevice_Holder"
            self.pyclass = Holder

    class IMachine_attachDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachDeviceResponse")
            kw["aname"] = "_IMachine_attachDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_attachDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_detachDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachDevice")
            kw["aname"] = "_IMachine_detachDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_detachDevice_Holder"
            self.pyclass = Holder

    class IMachine_detachDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachDeviceResponse")
            kw["aname"] = "_IMachine_detachDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_detachDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_passthroughDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_passthroughDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_passthroughDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="passthrough", aname="_passthrough", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_passthroughDevice")
            kw["aname"] = "_IMachine_passthroughDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._passthrough = None
                    return
            Holder.__name__ = "IMachine_passthroughDevice_Holder"
            self.pyclass = Holder

    class IMachine_passthroughDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_passthroughDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_passthroughDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_passthroughDeviceResponse")
            kw["aname"] = "_IMachine_passthroughDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_passthroughDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_temporaryEjectDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_temporaryEjectDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_temporaryEjectDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="temporaryEject", aname="_temporaryEject", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_temporaryEjectDevice")
            kw["aname"] = "_IMachine_temporaryEjectDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._temporaryEject = None
                    return
            Holder.__name__ = "IMachine_temporaryEjectDevice_Holder"
            self.pyclass = Holder

    class IMachine_temporaryEjectDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_temporaryEjectDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_temporaryEjectDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_temporaryEjectDeviceResponse")
            kw["aname"] = "_IMachine_temporaryEjectDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_temporaryEjectDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_nonRotationalDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_nonRotationalDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_nonRotationalDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="nonRotational", aname="_nonRotational", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_nonRotationalDevice")
            kw["aname"] = "_IMachine_nonRotationalDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._nonRotational = None
                    return
            Holder.__name__ = "IMachine_nonRotationalDevice_Holder"
            self.pyclass = Holder

    class IMachine_nonRotationalDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_nonRotationalDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_nonRotationalDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_nonRotationalDeviceResponse")
            kw["aname"] = "_IMachine_nonRotationalDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_nonRotationalDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_setBandwidthGroupForDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBandwidthGroupForDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBandwidthGroupForDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bandwidthGroup", aname="_bandwidthGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBandwidthGroupForDevice")
            kw["aname"] = "_IMachine_setBandwidthGroupForDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._bandwidthGroup = None
                    return
            Holder.__name__ = "IMachine_setBandwidthGroupForDevice_Holder"
            self.pyclass = Holder

    class IMachine_setBandwidthGroupForDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setBandwidthGroupForDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setBandwidthGroupForDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setBandwidthGroupForDeviceResponse")
            kw["aname"] = "_IMachine_setBandwidthGroupForDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setBandwidthGroupForDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_mountMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_mountMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_mountMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="medium", aname="_medium", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="force", aname="_force", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_mountMedium")
            kw["aname"] = "_IMachine_mountMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    self._medium = None
                    self._force = None
                    return
            Holder.__name__ = "IMachine_mountMedium_Holder"
            self.pyclass = Holder

    class IMachine_mountMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_mountMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_mountMediumResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_mountMediumResponse")
            kw["aname"] = "_IMachine_mountMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_mountMediumResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMedium_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMedium"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMedium_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMedium")
            kw["aname"] = "_IMachine_getMedium"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_getMedium_Holder"
            self.pyclass = Holder

    class IMachine_getMediumResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumResponse")
            kw["aname"] = "_IMachine_getMediumResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMediumResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentsOfController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentsOfController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentsOfController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentsOfController")
            kw["aname"] = "_IMachine_getMediumAttachmentsOfController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentsOfController_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentsOfControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentsOfControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentsOfControllerResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentsOfControllerResponse")
            kw["aname"] = "_IMachine_getMediumAttachmentsOfControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentsOfControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="controllerPort", aname="_controllerPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="device", aname="_device", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachment")
            kw["aname"] = "_IMachine_getMediumAttachment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._controllerPort = None
                    self._device = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachment_Holder"
            self.pyclass = Holder

    class IMachine_getMediumAttachmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getMediumAttachmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getMediumAttachmentResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getMediumAttachmentResponse")
            kw["aname"] = "_IMachine_getMediumAttachmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getMediumAttachmentResponse_Holder"
            self.pyclass = Holder

    class IMachine_attachHostPciDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachHostPciDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachHostPciDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostAddress", aname="_hostAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="desiredGuestAddress", aname="_desiredGuestAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="tryToUnbind", aname="_tryToUnbind", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachHostPciDevice")
            kw["aname"] = "_IMachine_attachHostPciDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostAddress = None
                    self._desiredGuestAddress = None
                    self._tryToUnbind = None
                    return
            Holder.__name__ = "IMachine_attachHostPciDevice_Holder"
            self.pyclass = Holder

    class IMachine_attachHostPciDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_attachHostPciDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_attachHostPciDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_attachHostPciDeviceResponse")
            kw["aname"] = "_IMachine_attachHostPciDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_attachHostPciDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_detachHostPciDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachHostPciDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachHostPciDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="hostAddress", aname="_hostAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachHostPciDevice")
            kw["aname"] = "_IMachine_detachHostPciDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostAddress = None
                    return
            Holder.__name__ = "IMachine_detachHostPciDevice_Holder"
            self.pyclass = Holder

    class IMachine_detachHostPciDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_detachHostPciDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_detachHostPciDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_detachHostPciDeviceResponse")
            kw["aname"] = "_IMachine_detachHostPciDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_detachHostPciDeviceResponse_Holder"
            self.pyclass = Holder

    class IMachine_getNetworkAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getNetworkAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getNetworkAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getNetworkAdapter")
            kw["aname"] = "_IMachine_getNetworkAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._slot = None
                    return
            Holder.__name__ = "IMachine_getNetworkAdapter_Holder"
            self.pyclass = Holder

    class IMachine_getNetworkAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getNetworkAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getNetworkAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getNetworkAdapterResponse")
            kw["aname"] = "_IMachine_getNetworkAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getNetworkAdapterResponse_Holder"
            self.pyclass = Holder

    class IMachine_addStorageController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_addStorageController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_addStorageController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="connectionType", aname="_connectionType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_addStorageController")
            kw["aname"] = "_IMachine_addStorageController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._connectionType = None
                    return
            Holder.__name__ = "IMachine_addStorageController_Holder"
            self.pyclass = Holder

    class IMachine_addStorageControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_addStorageControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_addStorageControllerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_addStorageControllerResponse")
            kw["aname"] = "_IMachine_addStorageControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_addStorageControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByName")
            kw["aname"] = "_IMachine_getStorageControllerByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByName_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByNameResponse")
            kw["aname"] = "_IMachine_getStorageControllerByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByNameResponse_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByInstance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByInstance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByInstance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="instance", aname="_instance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByInstance")
            kw["aname"] = "_IMachine_getStorageControllerByInstance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._instance = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByInstance_Holder"
            self.pyclass = Holder

    class IMachine_getStorageControllerByInstanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getStorageControllerByInstanceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getStorageControllerByInstanceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getStorageControllerByInstanceResponse")
            kw["aname"] = "_IMachine_getStorageControllerByInstanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getStorageControllerByInstanceResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeStorageController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeStorageController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeStorageController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeStorageController")
            kw["aname"] = "_IMachine_removeStorageController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_removeStorageController_Holder"
            self.pyclass = Holder

    class IMachine_removeStorageControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeStorageControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeStorageControllerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeStorageControllerResponse")
            kw["aname"] = "_IMachine_removeStorageControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeStorageControllerResponse_Holder"
            self.pyclass = Holder

    class IMachine_setStorageControllerBootable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setStorageControllerBootable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setStorageControllerBootable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="bootable", aname="_bootable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setStorageControllerBootable")
            kw["aname"] = "_IMachine_setStorageControllerBootable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._bootable = None
                    return
            Holder.__name__ = "IMachine_setStorageControllerBootable_Holder"
            self.pyclass = Holder

    class IMachine_setStorageControllerBootableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setStorageControllerBootableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setStorageControllerBootableResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setStorageControllerBootableResponse")
            kw["aname"] = "_IMachine_setStorageControllerBootableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setStorageControllerBootableResponse_Holder"
            self.pyclass = Holder

    class IMachine_getSerialPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSerialPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSerialPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSerialPort")
            kw["aname"] = "_IMachine_getSerialPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._slot = None
                    return
            Holder.__name__ = "IMachine_getSerialPort_Holder"
            self.pyclass = Holder

    class IMachine_getSerialPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getSerialPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getSerialPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getSerialPortResponse")
            kw["aname"] = "_IMachine_getSerialPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getSerialPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getParallelPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParallelPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParallelPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="slot", aname="_slot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParallelPort")
            kw["aname"] = "_IMachine_getParallelPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._slot = None
                    return
            Holder.__name__ = "IMachine_getParallelPort_Holder"
            self.pyclass = Holder

    class IMachine_getParallelPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getParallelPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getParallelPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getParallelPortResponse")
            kw["aname"] = "_IMachine_getParallelPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getParallelPortResponse_Holder"
            self.pyclass = Holder

    class IMachine_getExtraDataKeys_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraDataKeys"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraDataKeys_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraDataKeys")
            kw["aname"] = "_IMachine_getExtraDataKeys"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_getExtraDataKeys_Holder"
            self.pyclass = Holder

    class IMachine_getExtraDataKeysResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraDataKeysResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraDataKeysResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraDataKeysResponse")
            kw["aname"] = "_IMachine_getExtraDataKeysResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_getExtraDataKeysResponse_Holder"
            self.pyclass = Holder

    class IMachine_getExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraData")
            kw["aname"] = "_IMachine_getExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IMachine_getExtraData_Holder"
            self.pyclass = Holder

    class IMachine_getExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getExtraDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getExtraDataResponse")
            kw["aname"] = "_IMachine_getExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getExtraDataResponse_Holder"
            self.pyclass = Holder

    class IMachine_setExtraData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setExtraData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setExtraData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setExtraData")
            kw["aname"] = "_IMachine_setExtraData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setExtraData_Holder"
            self.pyclass = Holder

    class IMachine_setExtraDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setExtraDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setExtraDataResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setExtraDataResponse")
            kw["aname"] = "_IMachine_setExtraDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setExtraDataResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CPUPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUProperty")
            kw["aname"] = "_IMachine_getCPUProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getCPUProperty_Holder"
            self.pyclass = Holder

    class IMachine_getCPUPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUPropertyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUPropertyResponse")
            kw["aname"] = "_IMachine_getCPUPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CPUPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUProperty")
            kw["aname"] = "_IMachine_setCPUProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setCPUProperty_Holder"
            self.pyclass = Holder

    class IMachine_setCPUPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUPropertyResponse")
            kw["aname"] = "_IMachine_setCPUPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDLeaf")
            kw["aname"] = "_IMachine_getCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IMachine_getCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IMachine_getCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUIDLeafResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUIDLeafResponse")
            kw["aname"] = "_IMachine_getCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IMachine_getCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IMachine_setCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUIDLeaf")
            kw["aname"] = "_IMachine_setCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IMachine_setCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IMachine_setCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setCPUIDLeafResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setCPUIDLeafResponse")
            kw["aname"] = "_IMachine_setCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeCPUIDLeaf")
            kw["aname"] = "_IMachine_removeCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IMachine_removeCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IMachine_removeCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeCPUIDLeafResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeCPUIDLeafResponse")
            kw["aname"] = "_IMachine_removeCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeAllCPUIDLeaves_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeAllCPUIDLeaves"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeAllCPUIDLeaves_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeAllCPUIDLeaves")
            kw["aname"] = "_IMachine_removeAllCPUIDLeaves"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_removeAllCPUIDLeaves_Holder"
            self.pyclass = Holder

    class IMachine_removeAllCPUIDLeavesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeAllCPUIDLeavesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeAllCPUIDLeavesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeAllCPUIDLeavesResponse")
            kw["aname"] = "_IMachine_removeAllCPUIDLeavesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeAllCPUIDLeavesResponse_Holder"
            self.pyclass = Holder

    class IMachine_getHWVirtExProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHWVirtExProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHWVirtExProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","HWVirtExPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHWVirtExProperty")
            kw["aname"] = "_IMachine_getHWVirtExProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getHWVirtExProperty_Holder"
            self.pyclass = Holder

    class IMachine_getHWVirtExPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getHWVirtExPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getHWVirtExPropertyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getHWVirtExPropertyResponse")
            kw["aname"] = "_IMachine_getHWVirtExPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getHWVirtExPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setHWVirtExProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHWVirtExProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHWVirtExProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","HWVirtExPropertyType",lazy=False)(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHWVirtExProperty")
            kw["aname"] = "_IMachine_setHWVirtExProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setHWVirtExProperty_Holder"
            self.pyclass = Holder

    class IMachine_setHWVirtExPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setHWVirtExPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setHWVirtExPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setHWVirtExPropertyResponse")
            kw["aname"] = "_IMachine_setHWVirtExPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setHWVirtExPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_saveSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_saveSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_saveSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_saveSettings")
            kw["aname"] = "_IMachine_saveSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_saveSettings_Holder"
            self.pyclass = Holder

    class IMachine_saveSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_saveSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_saveSettingsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_saveSettingsResponse")
            kw["aname"] = "_IMachine_saveSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_saveSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_discardSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_discardSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_discardSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_discardSettings")
            kw["aname"] = "_IMachine_discardSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_discardSettings_Holder"
            self.pyclass = Holder

    class IMachine_discardSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_discardSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_discardSettingsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_discardSettingsResponse")
            kw["aname"] = "_IMachine_discardSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_discardSettingsResponse_Holder"
            self.pyclass = Holder

    class IMachine_unregister_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_unregister"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_unregister_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CleanupMode",lazy=False)(pname="cleanupMode", aname="_cleanupMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_unregister")
            kw["aname"] = "_IMachine_unregister"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cleanupMode = None
                    return
            Holder.__name__ = "IMachine_unregister_Holder"
            self.pyclass = Holder

    class IMachine_unregisterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_unregisterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_unregisterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_unregisterResponse")
            kw["aname"] = "_IMachine_unregisterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMachine_unregisterResponse_Holder"
            self.pyclass = Holder

    class IMachine_delete_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_delete"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_delete_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aMedia", aname="_aMedia", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_delete")
            kw["aname"] = "_IMachine_delete"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aMedia = []
                    return
            Holder.__name__ = "IMachine_delete_Holder"
            self.pyclass = Holder

    class IMachine_deleteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_deleteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_deleteResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_deleteResponse")
            kw["aname"] = "_IMachine_deleteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_deleteResponse_Holder"
            self.pyclass = Holder

    class IMachine_export_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_export"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_export_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="aAppliance", aname="_aAppliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_export")
            kw["aname"] = "_IMachine_export"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aAppliance = None
                    self._location = None
                    return
            Holder.__name__ = "IMachine_export_Holder"
            self.pyclass = Holder

    class IMachine_exportResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_exportResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_exportResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_exportResponse")
            kw["aname"] = "_IMachine_exportResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_exportResponse_Holder"
            self.pyclass = Holder

    class IMachine_findSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_findSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_findSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nameOrId", aname="_nameOrId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_findSnapshot")
            kw["aname"] = "_IMachine_findSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._nameOrId = None
                    return
            Holder.__name__ = "IMachine_findSnapshot_Holder"
            self.pyclass = Holder

    class IMachine_findSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_findSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_findSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_findSnapshotResponse")
            kw["aname"] = "_IMachine_findSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_findSnapshotResponse_Holder"
            self.pyclass = Holder

    class IMachine_createSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_createSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_createSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="automount", aname="_automount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_createSharedFolder")
            kw["aname"] = "_IMachine_createSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._hostPath = None
                    self._writable = None
                    self._automount = None
                    return
            Holder.__name__ = "IMachine_createSharedFolder_Holder"
            self.pyclass = Holder

    class IMachine_createSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_createSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_createSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_createSharedFolderResponse")
            kw["aname"] = "_IMachine_createSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_createSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_removeSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeSharedFolder")
            kw["aname"] = "_IMachine_removeSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_removeSharedFolder_Holder"
            self.pyclass = Holder

    class IMachine_removeSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_removeSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_removeSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_removeSharedFolderResponse")
            kw["aname"] = "_IMachine_removeSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_removeSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IMachine_canShowConsoleWindow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_canShowConsoleWindow"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_canShowConsoleWindow_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_canShowConsoleWindow")
            kw["aname"] = "_IMachine_canShowConsoleWindow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_canShowConsoleWindow_Holder"
            self.pyclass = Holder

    class IMachine_canShowConsoleWindowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_canShowConsoleWindowResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_canShowConsoleWindowResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_canShowConsoleWindowResponse")
            kw["aname"] = "_IMachine_canShowConsoleWindowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_canShowConsoleWindowResponse_Holder"
            self.pyclass = Holder

    class IMachine_showConsoleWindow_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_showConsoleWindow"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_showConsoleWindow_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_showConsoleWindow")
            kw["aname"] = "_IMachine_showConsoleWindow"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachine_showConsoleWindow_Holder"
            self.pyclass = Holder

    class IMachine_showConsoleWindowResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_showConsoleWindowResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_showConsoleWindowResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_showConsoleWindowResponse")
            kw["aname"] = "_IMachine_showConsoleWindowResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_showConsoleWindowResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestProperty")
            kw["aname"] = "_IMachine_getGuestProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMachine_getGuestProperty_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyResponse")
            kw["aname"] = "_IMachine_getGuestPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._timestamp = None
                    self._flags = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyValue")
            kw["aname"] = "_IMachine_getGuestPropertyValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyValue_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyValueResponse")
            kw["aname"] = "_IMachine_getGuestPropertyValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyValueResponse_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyTimestamp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyTimestamp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyTimestamp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyTimestamp")
            kw["aname"] = "_IMachine_getGuestPropertyTimestamp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyTimestamp_Holder"
            self.pyclass = Holder

    class IMachine_getGuestPropertyTimestampResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getGuestPropertyTimestampResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getGuestPropertyTimestampResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getGuestPropertyTimestampResponse")
            kw["aname"] = "_IMachine_getGuestPropertyTimestampResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getGuestPropertyTimestampResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGuestProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestProperty")
            kw["aname"] = "_IMachine_setGuestProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    self._flags = None
                    return
            Holder.__name__ = "IMachine_setGuestProperty_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyResponse")
            kw["aname"] = "_IMachine_setGuestPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGuestPropertyResponse_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="property", aname="_property", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyValue")
            kw["aname"] = "_IMachine_setGuestPropertyValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._property = None
                    self._value = None
                    return
            Holder.__name__ = "IMachine_setGuestPropertyValue_Holder"
            self.pyclass = Holder

    class IMachine_setGuestPropertyValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_setGuestPropertyValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_setGuestPropertyValueResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_setGuestPropertyValueResponse")
            kw["aname"] = "_IMachine_setGuestPropertyValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_setGuestPropertyValueResponse_Holder"
            self.pyclass = Holder

    class IMachine_enumerateGuestProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_enumerateGuestProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_enumerateGuestProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="patterns", aname="_patterns", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_enumerateGuestProperties")
            kw["aname"] = "_IMachine_enumerateGuestProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._patterns = None
                    return
            Holder.__name__ = "IMachine_enumerateGuestProperties_Holder"
            self.pyclass = Holder

    class IMachine_enumerateGuestPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_enumerateGuestPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_enumerateGuestPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="name", aname="_name", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="timestamp", aname="_timestamp", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_enumerateGuestPropertiesResponse")
            kw["aname"] = "_IMachine_enumerateGuestPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = []
                    self._value = []
                    self._timestamp = []
                    self._flags = []
                    return
            Holder.__name__ = "IMachine_enumerateGuestPropertiesResponse_Holder"
            self.pyclass = Holder

    class IMachine_querySavedGuestSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedGuestSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedGuestSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedGuestSize")
            kw["aname"] = "_IMachine_querySavedGuestSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_querySavedGuestSize_Holder"
            self.pyclass = Holder

    class IMachine_querySavedGuestSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedGuestSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedGuestSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedGuestSizeResponse")
            kw["aname"] = "_IMachine_querySavedGuestSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IMachine_querySavedGuestSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_querySavedThumbnailSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedThumbnailSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedThumbnailSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedThumbnailSize")
            kw["aname"] = "_IMachine_querySavedThumbnailSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_querySavedThumbnailSize_Holder"
            self.pyclass = Holder

    class IMachine_querySavedThumbnailSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedThumbnailSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedThumbnailSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedThumbnailSizeResponse")
            kw["aname"] = "_IMachine_querySavedThumbnailSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._size = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IMachine_querySavedThumbnailSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_readSavedThumbnailToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedThumbnailToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedThumbnailToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="BGR", aname="_BGR", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedThumbnailToArray")
            kw["aname"] = "_IMachine_readSavedThumbnailToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._BGR = None
                    return
            Holder.__name__ = "IMachine_readSavedThumbnailToArray_Holder"
            self.pyclass = Holder

    class IMachine_readSavedThumbnailToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedThumbnailToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedThumbnailToArrayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedThumbnailToArrayResponse")
            kw["aname"] = "_IMachine_readSavedThumbnailToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readSavedThumbnailToArrayResponse_Holder"
            self.pyclass = Holder

    class IMachine_readSavedThumbnailPNGToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedThumbnailPNGToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedThumbnailPNGToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedThumbnailPNGToArray")
            kw["aname"] = "_IMachine_readSavedThumbnailPNGToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_readSavedThumbnailPNGToArray_Holder"
            self.pyclass = Holder

    class IMachine_readSavedThumbnailPNGToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedThumbnailPNGToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedThumbnailPNGToArrayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedThumbnailPNGToArrayResponse")
            kw["aname"] = "_IMachine_readSavedThumbnailPNGToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readSavedThumbnailPNGToArrayResponse_Holder"
            self.pyclass = Holder

    class IMachine_querySavedScreenshotPNGSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedScreenshotPNGSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedScreenshotPNGSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedScreenshotPNGSize")
            kw["aname"] = "_IMachine_querySavedScreenshotPNGSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_querySavedScreenshotPNGSize_Holder"
            self.pyclass = Holder

    class IMachine_querySavedScreenshotPNGSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_querySavedScreenshotPNGSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_querySavedScreenshotPNGSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_querySavedScreenshotPNGSizeResponse")
            kw["aname"] = "_IMachine_querySavedScreenshotPNGSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._size = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IMachine_querySavedScreenshotPNGSizeResponse_Holder"
            self.pyclass = Holder

    class IMachine_readSavedScreenshotPNGToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedScreenshotPNGToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedScreenshotPNGToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedScreenshotPNGToArray")
            kw["aname"] = "_IMachine_readSavedScreenshotPNGToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IMachine_readSavedScreenshotPNGToArray_Holder"
            self.pyclass = Holder

    class IMachine_readSavedScreenshotPNGToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readSavedScreenshotPNGToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readSavedScreenshotPNGToArrayResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readSavedScreenshotPNGToArrayResponse")
            kw["aname"] = "_IMachine_readSavedScreenshotPNGToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readSavedScreenshotPNGToArrayResponse_Holder"
            self.pyclass = Holder

    class IMachine_hotPlugCPU_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotPlugCPU"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotPlugCPU_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpu", aname="_cpu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotPlugCPU")
            kw["aname"] = "_IMachine_hotPlugCPU"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpu = None
                    return
            Holder.__name__ = "IMachine_hotPlugCPU_Holder"
            self.pyclass = Holder

    class IMachine_hotPlugCPUResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotPlugCPUResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotPlugCPUResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotPlugCPUResponse")
            kw["aname"] = "_IMachine_hotPlugCPUResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_hotPlugCPUResponse_Holder"
            self.pyclass = Holder

    class IMachine_hotUnplugCPU_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotUnplugCPU"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotUnplugCPU_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpu", aname="_cpu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotUnplugCPU")
            kw["aname"] = "_IMachine_hotUnplugCPU"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpu = None
                    return
            Holder.__name__ = "IMachine_hotUnplugCPU_Holder"
            self.pyclass = Holder

    class IMachine_hotUnplugCPUResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_hotUnplugCPUResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_hotUnplugCPUResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_hotUnplugCPUResponse")
            kw["aname"] = "_IMachine_hotUnplugCPUResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMachine_hotUnplugCPUResponse_Holder"
            self.pyclass = Holder

    class IMachine_getCPUStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpu", aname="_cpu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUStatus")
            kw["aname"] = "_IMachine_getCPUStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpu = None
                    return
            Holder.__name__ = "IMachine_getCPUStatus_Holder"
            self.pyclass = Holder

    class IMachine_getCPUStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_getCPUStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_getCPUStatusResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_getCPUStatusResponse")
            kw["aname"] = "_IMachine_getCPUStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_getCPUStatusResponse_Holder"
            self.pyclass = Holder

    class IMachine_queryLogFilename_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_queryLogFilename"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_queryLogFilename_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_queryLogFilename")
            kw["aname"] = "_IMachine_queryLogFilename"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    return
            Holder.__name__ = "IMachine_queryLogFilename_Holder"
            self.pyclass = Holder

    class IMachine_queryLogFilenameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_queryLogFilenameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_queryLogFilenameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_queryLogFilenameResponse")
            kw["aname"] = "_IMachine_queryLogFilenameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_queryLogFilenameResponse_Holder"
            self.pyclass = Holder

    class IMachine_readLog_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readLog"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readLog_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="idx", aname="_idx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="offset", aname="_offset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readLog")
            kw["aname"] = "_IMachine_readLog"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._idx = None
                    self._offset = None
                    self._size = None
                    return
            Holder.__name__ = "IMachine_readLog_Holder"
            self.pyclass = Holder

    class IMachine_readLogResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_readLogResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_readLogResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_readLogResponse")
            kw["aname"] = "_IMachine_readLogResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_readLogResponse_Holder"
            self.pyclass = Holder

    class IMachine_cloneTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_cloneTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_cloneTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CloneMode",lazy=False)(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","CloneOptions",lazy=False)(pname="options", aname="_options", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_cloneTo")
            kw["aname"] = "_IMachine_cloneTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._mode = None
                    self._options = []
                    return
            Holder.__name__ = "IMachine_cloneTo_Holder"
            self.pyclass = Holder

    class IMachine_cloneToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachine_cloneToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachine_cloneToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachine_cloneToResponse")
            kw["aname"] = "_IMachine_cloneToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachine_cloneToResponse_Holder"
            self.pyclass = Holder

    class IConsole_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMachine")
            kw["aname"] = "_IConsole_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getMachine_Holder"
            self.pyclass = Holder

    class IConsole_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMachineResponse")
            kw["aname"] = "_IConsole_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getMachineResponse_Holder"
            self.pyclass = Holder

    class IConsole_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getState")
            kw["aname"] = "_IConsole_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getState_Holder"
            self.pyclass = Holder

    class IConsole_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getStateResponse")
            kw["aname"] = "_IConsole_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getStateResponse_Holder"
            self.pyclass = Holder

    class IConsole_getGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuest")
            kw["aname"] = "_IConsole_getGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getGuest_Holder"
            self.pyclass = Holder

    class IConsole_getGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuestResponse")
            kw["aname"] = "_IConsole_getGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getGuestResponse_Holder"
            self.pyclass = Holder

    class IConsole_getKeyboard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getKeyboard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getKeyboard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getKeyboard")
            kw["aname"] = "_IConsole_getKeyboard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getKeyboard_Holder"
            self.pyclass = Holder

    class IConsole_getKeyboardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getKeyboardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getKeyboardResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getKeyboardResponse")
            kw["aname"] = "_IConsole_getKeyboardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getKeyboardResponse_Holder"
            self.pyclass = Holder

    class IConsole_getMouse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMouse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMouse_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMouse")
            kw["aname"] = "_IConsole_getMouse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getMouse_Holder"
            self.pyclass = Holder

    class IConsole_getMouseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getMouseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getMouseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getMouseResponse")
            kw["aname"] = "_IConsole_getMouseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getMouseResponse_Holder"
            self.pyclass = Holder

    class IConsole_getDisplay_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDisplay"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDisplay_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDisplay")
            kw["aname"] = "_IConsole_getDisplay"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getDisplay_Holder"
            self.pyclass = Holder

    class IConsole_getDisplayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDisplayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDisplayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDisplayResponse")
            kw["aname"] = "_IConsole_getDisplayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getDisplayResponse_Holder"
            self.pyclass = Holder

    class IConsole_getUSBDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUSBDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUSBDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUSBDevices")
            kw["aname"] = "_IConsole_getUSBDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getUSBDevices_Holder"
            self.pyclass = Holder

    class IConsole_getUSBDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUSBDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUSBDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUSBDevicesResponse")
            kw["aname"] = "_IConsole_getUSBDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getUSBDevicesResponse_Holder"
            self.pyclass = Holder

    class IConsole_getRemoteUSBDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getRemoteUSBDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getRemoteUSBDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getRemoteUSBDevices")
            kw["aname"] = "_IConsole_getRemoteUSBDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getRemoteUSBDevices_Holder"
            self.pyclass = Holder

    class IConsole_getRemoteUSBDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getRemoteUSBDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getRemoteUSBDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getRemoteUSBDevicesResponse")
            kw["aname"] = "_IConsole_getRemoteUSBDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getRemoteUSBDevicesResponse_Holder"
            self.pyclass = Holder

    class IConsole_getSharedFolders_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getSharedFolders"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getSharedFolders_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getSharedFolders")
            kw["aname"] = "_IConsole_getSharedFolders"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getSharedFolders_Holder"
            self.pyclass = Holder

    class IConsole_getSharedFoldersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getSharedFoldersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getSharedFoldersResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","ISharedFolder",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getSharedFoldersResponse")
            kw["aname"] = "_IConsole_getSharedFoldersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getSharedFoldersResponse_Holder"
            self.pyclass = Holder

    class IConsole_getVRDEServerInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getVRDEServerInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getVRDEServerInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getVRDEServerInfo")
            kw["aname"] = "_IConsole_getVRDEServerInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getVRDEServerInfo_Holder"
            self.pyclass = Holder

    class IConsole_getVRDEServerInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getVRDEServerInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getVRDEServerInfoResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IVRDEServerInfo",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getVRDEServerInfoResponse")
            kw["aname"] = "_IConsole_getVRDEServerInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getVRDEServerInfoResponse_Holder"
            self.pyclass = Holder

    class IConsole_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getEventSource")
            kw["aname"] = "_IConsole_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getEventSource_Holder"
            self.pyclass = Holder

    class IConsole_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getEventSourceResponse")
            kw["aname"] = "_IConsole_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IConsole_getAttachedPciDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getAttachedPciDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getAttachedPciDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getAttachedPciDevices")
            kw["aname"] = "_IConsole_getAttachedPciDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getAttachedPciDevices_Holder"
            self.pyclass = Holder

    class IConsole_getAttachedPciDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getAttachedPciDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getAttachedPciDevicesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IPciDeviceAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getAttachedPciDevicesResponse")
            kw["aname"] = "_IConsole_getAttachedPciDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IConsole_getAttachedPciDevicesResponse_Holder"
            self.pyclass = Holder

    class IConsole_getUseHostClipboard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUseHostClipboard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUseHostClipboard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUseHostClipboard")
            kw["aname"] = "_IConsole_getUseHostClipboard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getUseHostClipboard_Holder"
            self.pyclass = Holder

    class IConsole_getUseHostClipboardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getUseHostClipboardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getUseHostClipboardResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getUseHostClipboardResponse")
            kw["aname"] = "_IConsole_getUseHostClipboardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getUseHostClipboardResponse_Holder"
            self.pyclass = Holder

    class IConsole_setUseHostClipboard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_setUseHostClipboard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_setUseHostClipboard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="useHostClipboard", aname="_useHostClipboard", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_setUseHostClipboard")
            kw["aname"] = "_IConsole_setUseHostClipboard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._useHostClipboard = None
                    return
            Holder.__name__ = "IConsole_setUseHostClipboard_Holder"
            self.pyclass = Holder

    class IConsole_setUseHostClipboardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_setUseHostClipboardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_setUseHostClipboardResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_setUseHostClipboardResponse")
            kw["aname"] = "_IConsole_setUseHostClipboardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_setUseHostClipboardResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerUp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUp")
            kw["aname"] = "_IConsole_powerUp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerUp_Holder"
            self.pyclass = Holder

    class IConsole_powerUpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUpResponse")
            kw["aname"] = "_IConsole_powerUpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_powerUpResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerUpPaused_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUpPaused"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUpPaused_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUpPaused")
            kw["aname"] = "_IConsole_powerUpPaused"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerUpPaused_Holder"
            self.pyclass = Holder

    class IConsole_powerUpPausedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerUpPausedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerUpPausedResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerUpPausedResponse")
            kw["aname"] = "_IConsole_powerUpPausedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_powerUpPausedResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerDown_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerDown"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerDown_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerDown")
            kw["aname"] = "_IConsole_powerDown"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerDown_Holder"
            self.pyclass = Holder

    class IConsole_powerDownResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerDownResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerDownResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerDownResponse")
            kw["aname"] = "_IConsole_powerDownResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_powerDownResponse_Holder"
            self.pyclass = Holder

    class IConsole_reset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_reset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_reset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_reset")
            kw["aname"] = "_IConsole_reset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_reset_Holder"
            self.pyclass = Holder

    class IConsole_resetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_resetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_resetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_resetResponse")
            kw["aname"] = "_IConsole_resetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_resetResponse_Holder"
            self.pyclass = Holder

    class IConsole_pause_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_pause"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_pause_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_pause")
            kw["aname"] = "_IConsole_pause"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_pause_Holder"
            self.pyclass = Holder

    class IConsole_pauseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_pauseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_pauseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_pauseResponse")
            kw["aname"] = "_IConsole_pauseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_pauseResponse_Holder"
            self.pyclass = Holder

    class IConsole_resume_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_resume"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_resume_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_resume")
            kw["aname"] = "_IConsole_resume"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_resume_Holder"
            self.pyclass = Holder

    class IConsole_resumeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_resumeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_resumeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_resumeResponse")
            kw["aname"] = "_IConsole_resumeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_resumeResponse_Holder"
            self.pyclass = Holder

    class IConsole_powerButton_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerButton"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerButton_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerButton")
            kw["aname"] = "_IConsole_powerButton"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_powerButton_Holder"
            self.pyclass = Holder

    class IConsole_powerButtonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_powerButtonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_powerButtonResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_powerButtonResponse")
            kw["aname"] = "_IConsole_powerButtonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_powerButtonResponse_Holder"
            self.pyclass = Holder

    class IConsole_sleepButton_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_sleepButton"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_sleepButton_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_sleepButton")
            kw["aname"] = "_IConsole_sleepButton"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_sleepButton_Holder"
            self.pyclass = Holder

    class IConsole_sleepButtonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_sleepButtonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_sleepButtonResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_sleepButtonResponse")
            kw["aname"] = "_IConsole_sleepButtonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_sleepButtonResponse_Holder"
            self.pyclass = Holder

    class IConsole_getPowerButtonHandled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getPowerButtonHandled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getPowerButtonHandled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getPowerButtonHandled")
            kw["aname"] = "_IConsole_getPowerButtonHandled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getPowerButtonHandled_Holder"
            self.pyclass = Holder

    class IConsole_getPowerButtonHandledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getPowerButtonHandledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getPowerButtonHandledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getPowerButtonHandledResponse")
            kw["aname"] = "_IConsole_getPowerButtonHandledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getPowerButtonHandledResponse_Holder"
            self.pyclass = Holder

    class IConsole_getGuestEnteredACPIMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuestEnteredACPIMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuestEnteredACPIMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuestEnteredACPIMode")
            kw["aname"] = "_IConsole_getGuestEnteredACPIMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_getGuestEnteredACPIMode_Holder"
            self.pyclass = Holder

    class IConsole_getGuestEnteredACPIModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getGuestEnteredACPIModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getGuestEnteredACPIModeResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getGuestEnteredACPIModeResponse")
            kw["aname"] = "_IConsole_getGuestEnteredACPIModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getGuestEnteredACPIModeResponse_Holder"
            self.pyclass = Holder

    class IConsole_saveState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_saveState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_saveState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_saveState")
            kw["aname"] = "_IConsole_saveState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IConsole_saveState_Holder"
            self.pyclass = Holder

    class IConsole_saveStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_saveStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_saveStateResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_saveStateResponse")
            kw["aname"] = "_IConsole_saveStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_saveStateResponse_Holder"
            self.pyclass = Holder

    class IConsole_adoptSavedState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_adoptSavedState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_adoptSavedState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="savedStateFile", aname="_savedStateFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_adoptSavedState")
            kw["aname"] = "_IConsole_adoptSavedState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._savedStateFile = None
                    return
            Holder.__name__ = "IConsole_adoptSavedState_Holder"
            self.pyclass = Holder

    class IConsole_adoptSavedStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_adoptSavedStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_adoptSavedStateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_adoptSavedStateResponse")
            kw["aname"] = "_IConsole_adoptSavedStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_adoptSavedStateResponse_Holder"
            self.pyclass = Holder

    class IConsole_discardSavedState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_discardSavedState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_discardSavedState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="fRemoveFile", aname="_fRemoveFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_discardSavedState")
            kw["aname"] = "_IConsole_discardSavedState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._fRemoveFile = None
                    return
            Holder.__name__ = "IConsole_discardSavedState_Holder"
            self.pyclass = Holder

    class IConsole_discardSavedStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_discardSavedStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_discardSavedStateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_discardSavedStateResponse")
            kw["aname"] = "_IConsole_discardSavedStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_discardSavedStateResponse_Holder"
            self.pyclass = Holder

    class IConsole_getDeviceActivity_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDeviceActivity"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDeviceActivity_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDeviceActivity")
            kw["aname"] = "_IConsole_getDeviceActivity"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IConsole_getDeviceActivity_Holder"
            self.pyclass = Holder

    class IConsole_getDeviceActivityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_getDeviceActivityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_getDeviceActivityResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceActivity",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_getDeviceActivityResponse")
            kw["aname"] = "_IConsole_getDeviceActivityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_getDeviceActivityResponse_Holder"
            self.pyclass = Holder

    class IConsole_attachUSBDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_attachUSBDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_attachUSBDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_attachUSBDevice")
            kw["aname"] = "_IConsole_attachUSBDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_attachUSBDevice_Holder"
            self.pyclass = Holder

    class IConsole_attachUSBDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_attachUSBDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_attachUSBDeviceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_attachUSBDeviceResponse")
            kw["aname"] = "_IConsole_attachUSBDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_attachUSBDeviceResponse_Holder"
            self.pyclass = Holder

    class IConsole_detachUSBDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_detachUSBDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_detachUSBDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_detachUSBDevice")
            kw["aname"] = "_IConsole_detachUSBDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_detachUSBDevice_Holder"
            self.pyclass = Holder

    class IConsole_detachUSBDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_detachUSBDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_detachUSBDeviceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_detachUSBDeviceResponse")
            kw["aname"] = "_IConsole_detachUSBDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_detachUSBDeviceResponse_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceByAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceByAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceByAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceByAddress")
            kw["aname"] = "_IConsole_findUSBDeviceByAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceByAddress_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceByAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceByAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceByAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceByAddressResponse")
            kw["aname"] = "_IConsole_findUSBDeviceByAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceByAddressResponse_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceById")
            kw["aname"] = "_IConsole_findUSBDeviceById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceById_Holder"
            self.pyclass = Holder

    class IConsole_findUSBDeviceByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_findUSBDeviceByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_findUSBDeviceByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_findUSBDeviceByIdResponse")
            kw["aname"] = "_IConsole_findUSBDeviceByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_findUSBDeviceByIdResponse_Holder"
            self.pyclass = Holder

    class IConsole_createSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_createSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_createSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostPath", aname="_hostPath", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="writable", aname="_writable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="automount", aname="_automount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_createSharedFolder")
            kw["aname"] = "_IConsole_createSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._hostPath = None
                    self._writable = None
                    self._automount = None
                    return
            Holder.__name__ = "IConsole_createSharedFolder_Holder"
            self.pyclass = Holder

    class IConsole_createSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_createSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_createSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_createSharedFolderResponse")
            kw["aname"] = "_IConsole_createSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_createSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IConsole_removeSharedFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_removeSharedFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_removeSharedFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_removeSharedFolder")
            kw["aname"] = "_IConsole_removeSharedFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IConsole_removeSharedFolder_Holder"
            self.pyclass = Holder

    class IConsole_removeSharedFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_removeSharedFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_removeSharedFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_removeSharedFolderResponse")
            kw["aname"] = "_IConsole_removeSharedFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IConsole_removeSharedFolderResponse_Holder"
            self.pyclass = Holder

    class IConsole_takeSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_takeSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_takeSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_takeSnapshot")
            kw["aname"] = "_IConsole_takeSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._description = None
                    return
            Holder.__name__ = "IConsole_takeSnapshot_Holder"
            self.pyclass = Holder

    class IConsole_takeSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_takeSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_takeSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_takeSnapshotResponse")
            kw["aname"] = "_IConsole_takeSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_takeSnapshotResponse_Holder"
            self.pyclass = Holder

    class IConsole_deleteSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_deleteSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_deleteSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_deleteSnapshot")
            kw["aname"] = "_IConsole_deleteSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_deleteSnapshot_Holder"
            self.pyclass = Holder

    class IConsole_deleteSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_deleteSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_deleteSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_deleteSnapshotResponse")
            kw["aname"] = "_IConsole_deleteSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_deleteSnapshotResponse_Holder"
            self.pyclass = Holder

    class IConsole_deleteSnapshotAndAllChildren_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_deleteSnapshotAndAllChildren"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_deleteSnapshotAndAllChildren_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_deleteSnapshotAndAllChildren")
            kw["aname"] = "_IConsole_deleteSnapshotAndAllChildren"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IConsole_deleteSnapshotAndAllChildren_Holder"
            self.pyclass = Holder

    class IConsole_deleteSnapshotAndAllChildrenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_deleteSnapshotAndAllChildrenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_deleteSnapshotAndAllChildrenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_deleteSnapshotAndAllChildrenResponse")
            kw["aname"] = "_IConsole_deleteSnapshotAndAllChildrenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_deleteSnapshotAndAllChildrenResponse_Holder"
            self.pyclass = Holder

    class IConsole_deleteSnapshotRange_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_deleteSnapshotRange"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_deleteSnapshotRange_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="startId", aname="_startId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="endId", aname="_endId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_deleteSnapshotRange")
            kw["aname"] = "_IConsole_deleteSnapshotRange"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._startId = None
                    self._endId = None
                    return
            Holder.__name__ = "IConsole_deleteSnapshotRange_Holder"
            self.pyclass = Holder

    class IConsole_deleteSnapshotRangeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_deleteSnapshotRangeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_deleteSnapshotRangeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_deleteSnapshotRangeResponse")
            kw["aname"] = "_IConsole_deleteSnapshotRangeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_deleteSnapshotRangeResponse_Holder"
            self.pyclass = Holder

    class IConsole_restoreSnapshot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_restoreSnapshot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_restoreSnapshot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="snapshot", aname="_snapshot", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_restoreSnapshot")
            kw["aname"] = "_IConsole_restoreSnapshot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._snapshot = None
                    return
            Holder.__name__ = "IConsole_restoreSnapshot_Holder"
            self.pyclass = Holder

    class IConsole_restoreSnapshotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_restoreSnapshotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_restoreSnapshotResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_restoreSnapshotResponse")
            kw["aname"] = "_IConsole_restoreSnapshotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_restoreSnapshotResponse_Holder"
            self.pyclass = Holder

    class IConsole_teleport_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_teleport"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_teleport_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostname", aname="_hostname", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="tcpport", aname="_tcpport", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxDowntime", aname="_maxDowntime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_teleport")
            kw["aname"] = "_IConsole_teleport"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostname = None
                    self._tcpport = None
                    self._password = None
                    self._maxDowntime = None
                    return
            Holder.__name__ = "IConsole_teleport_Holder"
            self.pyclass = Holder

    class IConsole_teleportResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IConsole_teleportResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IConsole_teleportResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IConsole_teleportResponse")
            kw["aname"] = "_IConsole_teleportResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IConsole_teleportResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getName")
            kw["aname"] = "_IHostNetworkInterface_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getName_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNameResponse")
            kw["aname"] = "_IHostNetworkInterface_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNameResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getId")
            kw["aname"] = "_IHostNetworkInterface_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getId_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIdResponse")
            kw["aname"] = "_IHostNetworkInterface_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIdResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkName")
            kw["aname"] = "_IHostNetworkInterface_getNetworkName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkName_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkNameResponse")
            kw["aname"] = "_IHostNetworkInterface_getNetworkNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkNameResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getDhcpEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getDhcpEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getDhcpEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getDhcpEnabled")
            kw["aname"] = "_IHostNetworkInterface_getDhcpEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getDhcpEnabled_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getDhcpEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getDhcpEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getDhcpEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getDhcpEnabledResponse")
            kw["aname"] = "_IHostNetworkInterface_getDhcpEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getDhcpEnabledResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPAddress")
            kw["aname"] = "_IHostNetworkInterface_getIPAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPAddress_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPAddressResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPAddressResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkMask_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkMask"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkMask_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkMask")
            kw["aname"] = "_IHostNetworkInterface_getNetworkMask"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkMask_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getNetworkMaskResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getNetworkMaskResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getNetworkMaskResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getNetworkMaskResponse")
            kw["aname"] = "_IHostNetworkInterface_getNetworkMaskResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getNetworkMaskResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6Supported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6Supported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6Supported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6Supported")
            kw["aname"] = "_IHostNetworkInterface_getIPV6Supported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6Supported_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6SupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6SupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6SupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6SupportedResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPV6SupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6SupportedResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6Address_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6Address"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6Address_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6Address")
            kw["aname"] = "_IHostNetworkInterface_getIPV6Address"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6Address_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6AddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6AddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6AddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6AddressResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPV6AddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6AddressResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLength"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6NetworkMaskPrefixLength")
            kw["aname"] = "_IHostNetworkInterface_getIPV6NetworkMaskPrefixLength"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse")
            kw["aname"] = "_IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getHardwareAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getHardwareAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getHardwareAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getHardwareAddress")
            kw["aname"] = "_IHostNetworkInterface_getHardwareAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getHardwareAddress_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getHardwareAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getHardwareAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getHardwareAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getHardwareAddressResponse")
            kw["aname"] = "_IHostNetworkInterface_getHardwareAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getHardwareAddressResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getMediumType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getMediumType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getMediumType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getMediumType")
            kw["aname"] = "_IHostNetworkInterface_getMediumType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getMediumType_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getMediumTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getMediumTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getMediumTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","HostNetworkInterfaceMediumType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getMediumTypeResponse")
            kw["aname"] = "_IHostNetworkInterface_getMediumTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getMediumTypeResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getStatus")
            kw["aname"] = "_IHostNetworkInterface_getStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getStatus_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getStatusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","HostNetworkInterfaceStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getStatusResponse")
            kw["aname"] = "_IHostNetworkInterface_getStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getStatusResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getInterfaceType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getInterfaceType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getInterfaceType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getInterfaceType")
            kw["aname"] = "_IHostNetworkInterface_getInterfaceType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getInterfaceType_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_getInterfaceTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_getInterfaceTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_getInterfaceTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","HostNetworkInterfaceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_getInterfaceTypeResponse")
            kw["aname"] = "_IHostNetworkInterface_getInterfaceTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostNetworkInterface_getInterfaceTypeResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIpConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIpConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIpConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPAddress", aname="_IPAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="networkMask", aname="_networkMask", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIpConfig")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIpConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPAddress = None
                    self._networkMask = None
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIpConfig_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIpConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIpConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIpConfigResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIpConfigResponse")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIpConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIpConfigResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIpConfigV6_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIpConfigV6"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIpConfigV6_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="IPV6Address", aname="_IPV6Address", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IPV6NetworkMaskPrefixLength", aname="_IPV6NetworkMaskPrefixLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIpConfigV6")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIpConfigV6"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IPV6Address = None
                    self._IPV6NetworkMaskPrefixLength = None
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIpConfigV6_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableStaticIpConfigV6Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableStaticIpConfigV6Response"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableStaticIpConfigV6Response_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableStaticIpConfigV6Response")
            kw["aname"] = "_IHostNetworkInterface_enableStaticIpConfigV6Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_enableStaticIpConfigV6Response_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableDynamicIpConfig_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableDynamicIpConfig"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableDynamicIpConfig_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableDynamicIpConfig")
            kw["aname"] = "_IHostNetworkInterface_enableDynamicIpConfig"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_enableDynamicIpConfig_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_enableDynamicIpConfigResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_enableDynamicIpConfigResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_enableDynamicIpConfigResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_enableDynamicIpConfigResponse")
            kw["aname"] = "_IHostNetworkInterface_enableDynamicIpConfigResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_enableDynamicIpConfigResponse_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_dhcpRediscover_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_dhcpRediscover"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_dhcpRediscover_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_dhcpRediscover")
            kw["aname"] = "_IHostNetworkInterface_dhcpRediscover"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostNetworkInterface_dhcpRediscover_Holder"
            self.pyclass = Holder

    class IHostNetworkInterface_dhcpRediscoverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostNetworkInterface_dhcpRediscoverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostNetworkInterface_dhcpRediscoverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostNetworkInterface_dhcpRediscoverResponse")
            kw["aname"] = "_IHostNetworkInterface_dhcpRediscoverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostNetworkInterface_dhcpRediscoverResponse_Holder"
            self.pyclass = Holder

    class IHost_getDVDDrives_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getDVDDrives"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getDVDDrives_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getDVDDrives")
            kw["aname"] = "_IHost_getDVDDrives"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getDVDDrives_Holder"
            self.pyclass = Holder

    class IHost_getDVDDrivesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getDVDDrivesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getDVDDrivesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getDVDDrivesResponse")
            kw["aname"] = "_IHost_getDVDDrivesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getDVDDrivesResponse_Holder"
            self.pyclass = Holder

    class IHost_getFloppyDrives_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getFloppyDrives"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getFloppyDrives_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getFloppyDrives")
            kw["aname"] = "_IHost_getFloppyDrives"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getFloppyDrives_Holder"
            self.pyclass = Holder

    class IHost_getFloppyDrivesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getFloppyDrivesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getFloppyDrivesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getFloppyDrivesResponse")
            kw["aname"] = "_IHost_getFloppyDrivesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getFloppyDrivesResponse_Holder"
            self.pyclass = Holder

    class IHost_getUSBDevices_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDevices"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDevices_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDevices")
            kw["aname"] = "_IHost_getUSBDevices"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getUSBDevices_Holder"
            self.pyclass = Holder

    class IHost_getUSBDevicesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDevicesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDevicesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDevicesResponse")
            kw["aname"] = "_IHost_getUSBDevicesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getUSBDevicesResponse_Holder"
            self.pyclass = Holder

    class IHost_getUSBDeviceFilters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDeviceFilters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDeviceFilters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDeviceFilters")
            kw["aname"] = "_IHost_getUSBDeviceFilters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getUSBDeviceFilters_Holder"
            self.pyclass = Holder

    class IHost_getUSBDeviceFiltersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUSBDeviceFiltersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUSBDeviceFiltersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUSBDeviceFiltersResponse")
            kw["aname"] = "_IHost_getUSBDeviceFiltersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getUSBDeviceFiltersResponse_Holder"
            self.pyclass = Holder

    class IHost_getNetworkInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getNetworkInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getNetworkInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getNetworkInterfaces")
            kw["aname"] = "_IHost_getNetworkInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getNetworkInterfaces_Holder"
            self.pyclass = Holder

    class IHost_getNetworkInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getNetworkInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getNetworkInterfacesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getNetworkInterfacesResponse")
            kw["aname"] = "_IHost_getNetworkInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_getNetworkInterfacesResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCount")
            kw["aname"] = "_IHost_getProcessorCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCountResponse")
            kw["aname"] = "_IHost_getProcessorCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorOnlineCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorOnlineCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorOnlineCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorOnlineCount")
            kw["aname"] = "_IHost_getProcessorOnlineCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorOnlineCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorOnlineCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorOnlineCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorOnlineCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorOnlineCountResponse")
            kw["aname"] = "_IHost_getProcessorOnlineCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorOnlineCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCoreCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCoreCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCoreCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCoreCount")
            kw["aname"] = "_IHost_getProcessorCoreCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getProcessorCoreCount_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCoreCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCoreCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCoreCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCoreCountResponse")
            kw["aname"] = "_IHost_getProcessorCoreCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorCoreCountResponse_Holder"
            self.pyclass = Holder

    class IHost_getMemorySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemorySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemorySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemorySize")
            kw["aname"] = "_IHost_getMemorySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getMemorySize_Holder"
            self.pyclass = Holder

    class IHost_getMemorySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemorySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemorySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemorySizeResponse")
            kw["aname"] = "_IHost_getMemorySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getMemorySizeResponse_Holder"
            self.pyclass = Holder

    class IHost_getMemoryAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemoryAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemoryAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemoryAvailable")
            kw["aname"] = "_IHost_getMemoryAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getMemoryAvailable_Holder"
            self.pyclass = Holder

    class IHost_getMemoryAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getMemoryAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getMemoryAvailableResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getMemoryAvailableResponse")
            kw["aname"] = "_IHost_getMemoryAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getMemoryAvailableResponse_Holder"
            self.pyclass = Holder

    class IHost_getOperatingSystem_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOperatingSystem"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOperatingSystem_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOperatingSystem")
            kw["aname"] = "_IHost_getOperatingSystem"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getOperatingSystem_Holder"
            self.pyclass = Holder

    class IHost_getOperatingSystemResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOperatingSystemResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOperatingSystemResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOperatingSystemResponse")
            kw["aname"] = "_IHost_getOperatingSystemResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getOperatingSystemResponse_Holder"
            self.pyclass = Holder

    class IHost_getOSVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOSVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOSVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOSVersion")
            kw["aname"] = "_IHost_getOSVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getOSVersion_Holder"
            self.pyclass = Holder

    class IHost_getOSVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getOSVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getOSVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getOSVersionResponse")
            kw["aname"] = "_IHost_getOSVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getOSVersionResponse_Holder"
            self.pyclass = Holder

    class IHost_getUTCTime_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUTCTime"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUTCTime_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUTCTime")
            kw["aname"] = "_IHost_getUTCTime"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getUTCTime_Holder"
            self.pyclass = Holder

    class IHost_getUTCTimeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getUTCTimeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getUTCTimeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getUTCTimeResponse")
            kw["aname"] = "_IHost_getUTCTimeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getUTCTimeResponse_Holder"
            self.pyclass = Holder

    class IHost_getAcceleration3DAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getAcceleration3DAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getAcceleration3DAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getAcceleration3DAvailable")
            kw["aname"] = "_IHost_getAcceleration3DAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_getAcceleration3DAvailable_Holder"
            self.pyclass = Holder

    class IHost_getAcceleration3DAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getAcceleration3DAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getAcceleration3DAvailableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getAcceleration3DAvailableResponse")
            kw["aname"] = "_IHost_getAcceleration3DAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getAcceleration3DAvailableResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorSpeed")
            kw["aname"] = "_IHost_getProcessorSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    return
            Holder.__name__ = "IHost_getProcessorSpeed_Holder"
            self.pyclass = Holder

    class IHost_getProcessorSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorSpeedResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorSpeedResponse")
            kw["aname"] = "_IHost_getProcessorSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorSpeedResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorFeature_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorFeature"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorFeature_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ProcessorFeature",lazy=False)(pname="feature", aname="_feature", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorFeature")
            kw["aname"] = "_IHost_getProcessorFeature"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._feature = None
                    return
            Holder.__name__ = "IHost_getProcessorFeature_Holder"
            self.pyclass = Holder

    class IHost_getProcessorFeatureResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorFeatureResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorFeatureResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorFeatureResponse")
            kw["aname"] = "_IHost_getProcessorFeatureResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorFeatureResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorDescription")
            kw["aname"] = "_IHost_getProcessorDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    return
            Holder.__name__ = "IHost_getProcessorDescription_Holder"
            self.pyclass = Holder

    class IHost_getProcessorDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorDescriptionResponse")
            kw["aname"] = "_IHost_getProcessorDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_getProcessorDescriptionResponse_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCPUIDLeaf_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCPUIDLeaf"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCPUIDLeaf_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuId", aname="_cpuId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="leaf", aname="_leaf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="subLeaf", aname="_subLeaf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCPUIDLeaf")
            kw["aname"] = "_IHost_getProcessorCPUIDLeaf"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cpuId = None
                    self._leaf = None
                    self._subLeaf = None
                    return
            Holder.__name__ = "IHost_getProcessorCPUIDLeaf_Holder"
            self.pyclass = Holder

    class IHost_getProcessorCPUIDLeafResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_getProcessorCPUIDLeafResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_getProcessorCPUIDLeafResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="valEax", aname="_valEax", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEbx", aname="_valEbx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEcx", aname="_valEcx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="valEdx", aname="_valEdx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_getProcessorCPUIDLeafResponse")
            kw["aname"] = "_IHost_getProcessorCPUIDLeafResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._valEax = None
                    self._valEbx = None
                    self._valEcx = None
                    self._valEdx = None
                    return
            Holder.__name__ = "IHost_getProcessorCPUIDLeafResponse_Holder"
            self.pyclass = Holder

    class IHost_createHostOnlyNetworkInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createHostOnlyNetworkInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createHostOnlyNetworkInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createHostOnlyNetworkInterface")
            kw["aname"] = "_IHost_createHostOnlyNetworkInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_createHostOnlyNetworkInterface_Holder"
            self.pyclass = Holder

    class IHost_createHostOnlyNetworkInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createHostOnlyNetworkInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createHostOnlyNetworkInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="hostInterface", aname="_hostInterface", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createHostOnlyNetworkInterfaceResponse")
            kw["aname"] = "_IHost_createHostOnlyNetworkInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostInterface = None
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_createHostOnlyNetworkInterfaceResponse_Holder"
            self.pyclass = Holder

    class IHost_removeHostOnlyNetworkInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeHostOnlyNetworkInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeHostOnlyNetworkInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeHostOnlyNetworkInterface")
            kw["aname"] = "_IHost_removeHostOnlyNetworkInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_removeHostOnlyNetworkInterface_Holder"
            self.pyclass = Holder

    class IHost_removeHostOnlyNetworkInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeHostOnlyNetworkInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeHostOnlyNetworkInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeHostOnlyNetworkInterfaceResponse")
            kw["aname"] = "_IHost_removeHostOnlyNetworkInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_removeHostOnlyNetworkInterfaceResponse_Holder"
            self.pyclass = Holder

    class IHost_createUSBDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createUSBDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createUSBDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createUSBDeviceFilter")
            kw["aname"] = "_IHost_createUSBDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_createUSBDeviceFilter_Holder"
            self.pyclass = Holder

    class IHost_createUSBDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_createUSBDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_createUSBDeviceFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_createUSBDeviceFilterResponse")
            kw["aname"] = "_IHost_createUSBDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_createUSBDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IHost_insertUSBDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_insertUSBDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_insertUSBDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_insertUSBDeviceFilter")
            kw["aname"] = "_IHost_insertUSBDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    self._filter = None
                    return
            Holder.__name__ = "IHost_insertUSBDeviceFilter_Holder"
            self.pyclass = Holder

    class IHost_insertUSBDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_insertUSBDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_insertUSBDeviceFilterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHost_insertUSBDeviceFilterResponse")
            kw["aname"] = "_IHost_insertUSBDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHost_insertUSBDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IHost_removeUSBDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeUSBDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeUSBDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeUSBDeviceFilter")
            kw["aname"] = "_IHost_removeUSBDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    return
            Holder.__name__ = "IHost_removeUSBDeviceFilter_Holder"
            self.pyclass = Holder

    class IHost_removeUSBDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_removeUSBDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_removeUSBDeviceFilterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHost_removeUSBDeviceFilterResponse")
            kw["aname"] = "_IHost_removeUSBDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHost_removeUSBDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostDVDDrive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostDVDDrive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostDVDDrive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostDVDDrive")
            kw["aname"] = "_IHost_findHostDVDDrive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findHostDVDDrive_Holder"
            self.pyclass = Holder

    class IHost_findHostDVDDriveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostDVDDriveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostDVDDriveResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostDVDDriveResponse")
            kw["aname"] = "_IHost_findHostDVDDriveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostDVDDriveResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostFloppyDrive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostFloppyDrive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostFloppyDrive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostFloppyDrive")
            kw["aname"] = "_IHost_findHostFloppyDrive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findHostFloppyDrive_Holder"
            self.pyclass = Holder

    class IHost_findHostFloppyDriveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostFloppyDriveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostFloppyDriveResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostFloppyDriveResponse")
            kw["aname"] = "_IHost_findHostFloppyDriveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostFloppyDriveResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceByName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceByName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceByName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceByName")
            kw["aname"] = "_IHost_findHostNetworkInterfaceByName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceByName_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceByNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceByNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceByNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceByNameResponse")
            kw["aname"] = "_IHost_findHostNetworkInterfaceByNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceByNameResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceById")
            kw["aname"] = "_IHost_findHostNetworkInterfaceById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceById_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfaceByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfaceByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfaceByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfaceByIdResponse")
            kw["aname"] = "_IHost_findHostNetworkInterfaceByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfaceByIdResponse_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfacesOfType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfacesOfType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfacesOfType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","HostNetworkInterfaceType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfacesOfType")
            kw["aname"] = "_IHost_findHostNetworkInterfacesOfType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfacesOfType_Holder"
            self.pyclass = Holder

    class IHost_findHostNetworkInterfacesOfTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findHostNetworkInterfacesOfTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findHostNetworkInterfacesOfTypeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findHostNetworkInterfacesOfTypeResponse")
            kw["aname"] = "_IHost_findHostNetworkInterfacesOfTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IHost_findHostNetworkInterfacesOfTypeResponse_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceById_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceById"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceById_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="id", aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceById")
            kw["aname"] = "_IHost_findUSBDeviceById"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._id = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceById_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceByIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceByIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceByIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceByIdResponse")
            kw["aname"] = "_IHost_findUSBDeviceByIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceByIdResponse_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceByAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceByAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceByAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceByAddress")
            kw["aname"] = "_IHost_findUSBDeviceByAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceByAddress_Holder"
            self.pyclass = Holder

    class IHost_findUSBDeviceByAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_findUSBDeviceByAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_findUSBDeviceByAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_findUSBDeviceByAddressResponse")
            kw["aname"] = "_IHost_findUSBDeviceByAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_findUSBDeviceByAddressResponse_Holder"
            self.pyclass = Holder

    class IHost_generateMACAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_generateMACAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_generateMACAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_generateMACAddress")
            kw["aname"] = "_IHost_generateMACAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHost_generateMACAddress_Holder"
            self.pyclass = Holder

    class IHost_generateMACAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHost_generateMACAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHost_generateMACAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHost_generateMACAddressResponse")
            kw["aname"] = "_IHost_generateMACAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHost_generateMACAddressResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestRAM")
            kw["aname"] = "_ISystemProperties_getMinGuestRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestRAMResponse")
            kw["aname"] = "_ISystemProperties_getMinGuestRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestRAM")
            kw["aname"] = "_ISystemProperties_getMaxGuestRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestRAMResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestVRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestVRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestVRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestVRAM")
            kw["aname"] = "_ISystemProperties_getMinGuestVRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestVRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestVRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestVRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestVRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestVRAMResponse")
            kw["aname"] = "_ISystemProperties_getMinGuestVRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestVRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestVRAM_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestVRAM"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestVRAM_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestVRAM")
            kw["aname"] = "_ISystemProperties_getMaxGuestVRAM"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestVRAM_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestVRAMResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestVRAMResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestVRAMResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestVRAMResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestVRAMResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestVRAMResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestCPUCount")
            kw["aname"] = "_ISystemProperties_getMinGuestCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestCPUCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinGuestCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinGuestCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinGuestCPUCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinGuestCPUCountResponse")
            kw["aname"] = "_ISystemProperties_getMinGuestCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinGuestCPUCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestCPUCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestCPUCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestCPUCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestCPUCount")
            kw["aname"] = "_ISystemProperties_getMaxGuestCPUCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestCPUCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestCPUCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestCPUCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestCPUCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestCPUCountResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestCPUCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestCPUCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestMonitors_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestMonitors"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestMonitors_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestMonitors")
            kw["aname"] = "_ISystemProperties_getMaxGuestMonitors"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestMonitors_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxGuestMonitorsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxGuestMonitorsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxGuestMonitorsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxGuestMonitorsResponse")
            kw["aname"] = "_ISystemProperties_getMaxGuestMonitorsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxGuestMonitorsResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getInfoVDSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getInfoVDSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getInfoVDSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getInfoVDSize")
            kw["aname"] = "_ISystemProperties_getInfoVDSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getInfoVDSize_Holder"
            self.pyclass = Holder

    class ISystemProperties_getInfoVDSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getInfoVDSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getInfoVDSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getInfoVDSizeResponse")
            kw["aname"] = "_ISystemProperties_getInfoVDSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getInfoVDSizeResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getSerialPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getSerialPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getSerialPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getSerialPortCount")
            kw["aname"] = "_ISystemProperties_getSerialPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getSerialPortCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getSerialPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getSerialPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getSerialPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getSerialPortCountResponse")
            kw["aname"] = "_ISystemProperties_getSerialPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getSerialPortCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getParallelPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getParallelPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getParallelPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getParallelPortCount")
            kw["aname"] = "_ISystemProperties_getParallelPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getParallelPortCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getParallelPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getParallelPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getParallelPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getParallelPortCountResponse")
            kw["aname"] = "_ISystemProperties_getParallelPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getParallelPortCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxBootPosition_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxBootPosition"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxBootPosition_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxBootPosition")
            kw["aname"] = "_ISystemProperties_getMaxBootPosition"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxBootPosition_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxBootPositionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxBootPositionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxBootPositionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxBootPositionResponse")
            kw["aname"] = "_ISystemProperties_getMaxBootPositionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxBootPositionResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultMachineFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultMachineFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultMachineFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultMachineFolder")
            kw["aname"] = "_ISystemProperties_getDefaultMachineFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultMachineFolder_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultMachineFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultMachineFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultMachineFolderResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultMachineFolderResponse")
            kw["aname"] = "_ISystemProperties_getDefaultMachineFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultMachineFolderResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultMachineFolder_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultMachineFolder"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultMachineFolder_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultMachineFolder", aname="_defaultMachineFolder", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultMachineFolder")
            kw["aname"] = "_ISystemProperties_setDefaultMachineFolder"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultMachineFolder = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultMachineFolder_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultMachineFolderResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultMachineFolderResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultMachineFolderResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultMachineFolderResponse")
            kw["aname"] = "_ISystemProperties_setDefaultMachineFolderResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultMachineFolderResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMediumFormats_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMediumFormats"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMediumFormats_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMediumFormats")
            kw["aname"] = "_ISystemProperties_getMediumFormats"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getMediumFormats_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMediumFormatsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMediumFormatsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMediumFormatsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMediumFormatsResponse")
            kw["aname"] = "_ISystemProperties_getMediumFormatsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISystemProperties_getMediumFormatsResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultHardDiskFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultHardDiskFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultHardDiskFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultHardDiskFormat")
            kw["aname"] = "_ISystemProperties_getDefaultHardDiskFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultHardDiskFormat_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultHardDiskFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultHardDiskFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultHardDiskFormatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultHardDiskFormatResponse")
            kw["aname"] = "_ISystemProperties_getDefaultHardDiskFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultHardDiskFormatResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultHardDiskFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultHardDiskFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultHardDiskFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultHardDiskFormat", aname="_defaultHardDiskFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultHardDiskFormat")
            kw["aname"] = "_ISystemProperties_setDefaultHardDiskFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultHardDiskFormat = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultHardDiskFormat_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultHardDiskFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultHardDiskFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultHardDiskFormatResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultHardDiskFormatResponse")
            kw["aname"] = "_ISystemProperties_setDefaultHardDiskFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultHardDiskFormatResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceWarning")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceWarningResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceWarningResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="freeDiskSpaceWarning", aname="_freeDiskSpaceWarning", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceWarning")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpaceWarning = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceWarningResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceWarningResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentWarning")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentWarningResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentWarningResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentWarning_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentWarning"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentWarning_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="freeDiskSpacePercentWarning", aname="_freeDiskSpacePercentWarning", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentWarning")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentWarning"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpacePercentWarning = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentWarning_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentWarningResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentWarningResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentWarningResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentWarningResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentWarningResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentWarningResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceError")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceError_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpaceErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpaceErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpaceErrorResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpaceErrorResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpaceErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpaceErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="freeDiskSpaceError", aname="_freeDiskSpaceError", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceError")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpaceError = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceError_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpaceErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpaceErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpaceErrorResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpaceErrorResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpaceErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpaceErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentError")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentError_Holder"
            self.pyclass = Holder

    class ISystemProperties_getFreeDiskSpacePercentErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getFreeDiskSpacePercentErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getFreeDiskSpacePercentErrorResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getFreeDiskSpacePercentErrorResponse")
            kw["aname"] = "_ISystemProperties_getFreeDiskSpacePercentErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getFreeDiskSpacePercentErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="freeDiskSpacePercentError", aname="_freeDiskSpacePercentError", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentError")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._freeDiskSpacePercentError = None
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentError_Holder"
            self.pyclass = Holder

    class ISystemProperties_setFreeDiskSpacePercentErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setFreeDiskSpacePercentErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setFreeDiskSpacePercentErrorResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setFreeDiskSpacePercentErrorResponse")
            kw["aname"] = "_ISystemProperties_setFreeDiskSpacePercentErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setFreeDiskSpacePercentErrorResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getVRDEAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getVRDEAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getVRDEAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getVRDEAuthLibrary")
            kw["aname"] = "_ISystemProperties_getVRDEAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getVRDEAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_getVRDEAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getVRDEAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getVRDEAuthLibraryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getVRDEAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_getVRDEAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getVRDEAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setVRDEAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setVRDEAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setVRDEAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VRDEAuthLibrary", aname="_VRDEAuthLibrary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setVRDEAuthLibrary")
            kw["aname"] = "_ISystemProperties_setVRDEAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VRDEAuthLibrary = None
                    return
            Holder.__name__ = "ISystemProperties_setVRDEAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_setVRDEAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setVRDEAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setVRDEAuthLibraryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setVRDEAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_setVRDEAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setVRDEAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getWebServiceAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getWebServiceAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getWebServiceAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getWebServiceAuthLibrary")
            kw["aname"] = "_ISystemProperties_getWebServiceAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getWebServiceAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_getWebServiceAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getWebServiceAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getWebServiceAuthLibraryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getWebServiceAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_getWebServiceAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getWebServiceAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setWebServiceAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setWebServiceAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setWebServiceAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="webServiceAuthLibrary", aname="_webServiceAuthLibrary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setWebServiceAuthLibrary")
            kw["aname"] = "_ISystemProperties_setWebServiceAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._webServiceAuthLibrary = None
                    return
            Holder.__name__ = "ISystemProperties_setWebServiceAuthLibrary_Holder"
            self.pyclass = Holder

    class ISystemProperties_setWebServiceAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setWebServiceAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setWebServiceAuthLibraryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setWebServiceAuthLibraryResponse")
            kw["aname"] = "_ISystemProperties_setWebServiceAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setWebServiceAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultVRDEExtPack")
            kw["aname"] = "_ISystemProperties_getDefaultVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultVRDEExtPack_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultVRDEExtPackResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultVRDEExtPackResponse")
            kw["aname"] = "_ISystemProperties_getDefaultVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaultVRDEExtPack", aname="_defaultVRDEExtPack", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultVRDEExtPack")
            kw["aname"] = "_ISystemProperties_setDefaultVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._defaultVRDEExtPack = None
                    return
            Holder.__name__ = "ISystemProperties_setDefaultVRDEExtPack_Holder"
            self.pyclass = Holder

    class ISystemProperties_setDefaultVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setDefaultVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setDefaultVRDEExtPackResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setDefaultVRDEExtPackResponse")
            kw["aname"] = "_ISystemProperties_setDefaultVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setDefaultVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getLogHistoryCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getLogHistoryCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getLogHistoryCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getLogHistoryCount")
            kw["aname"] = "_ISystemProperties_getLogHistoryCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getLogHistoryCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_getLogHistoryCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getLogHistoryCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getLogHistoryCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getLogHistoryCountResponse")
            kw["aname"] = "_ISystemProperties_getLogHistoryCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getLogHistoryCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_setLogHistoryCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setLogHistoryCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setLogHistoryCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="logHistoryCount", aname="_logHistoryCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setLogHistoryCount")
            kw["aname"] = "_ISystemProperties_setLogHistoryCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logHistoryCount = None
                    return
            Holder.__name__ = "ISystemProperties_setLogHistoryCount_Holder"
            self.pyclass = Holder

    class ISystemProperties_setLogHistoryCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_setLogHistoryCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_setLogHistoryCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_setLogHistoryCountResponse")
            kw["aname"] = "_ISystemProperties_setLogHistoryCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISystemProperties_setLogHistoryCountResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultAudioDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultAudioDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultAudioDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultAudioDriver")
            kw["aname"] = "_ISystemProperties_getDefaultAudioDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultAudioDriver_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultAudioDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultAudioDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultAudioDriverResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioDriverType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultAudioDriverResponse")
            kw["aname"] = "_ISystemProperties_getDefaultAudioDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultAudioDriverResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdapters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdapters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdapters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdapters")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdapters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdapters_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdaptersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdaptersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdaptersResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdaptersResponse")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdaptersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdaptersResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdaptersOfType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdaptersOfType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdaptersOfType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAttachmentType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdaptersOfType")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdaptersOfType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    self._type = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdaptersOfType_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxNetworkAdaptersOfTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxNetworkAdaptersOfTypeResponse")
            kw["aname"] = "_ISystemProperties_getMaxNetworkAdaptersOfTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxDevicesPerPortForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxDevicesPerPortForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxDevicesPerPortForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxDevicesPerPortForStorageBus")
            kw["aname"] = "_ISystemProperties_getMaxDevicesPerPortForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxDevicesPerPortForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxDevicesPerPortForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxDevicesPerPortForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMaxDevicesPerPortForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinPortCountForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinPortCountForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinPortCountForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinPortCountForStorageBus")
            kw["aname"] = "_ISystemProperties_getMinPortCountForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMinPortCountForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMinPortCountForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMinPortCountForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMinPortCountForStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMinPortCountForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMinPortCountForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMinPortCountForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxPortCountForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxPortCountForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxPortCountForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxPortCountForStorageBus")
            kw["aname"] = "_ISystemProperties_getMaxPortCountForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxPortCountForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxPortCountForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxPortCountForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxPortCountForStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxPortCountForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMaxPortCountForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxPortCountForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxInstancesOfStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxInstancesOfStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxInstancesOfStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ChipsetType",lazy=False)(pname="chipset", aname="_chipset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxInstancesOfStorageBus")
            kw["aname"] = "_ISystemProperties_getMaxInstancesOfStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._chipset = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxInstancesOfStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getMaxInstancesOfStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getMaxInstancesOfStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getMaxInstancesOfStorageBusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getMaxInstancesOfStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getMaxInstancesOfStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getMaxInstancesOfStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDeviceTypesForStorageBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDeviceTypesForStorageBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDeviceTypesForStorageBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="bus", aname="_bus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDeviceTypesForStorageBus")
            kw["aname"] = "_ISystemProperties_getDeviceTypesForStorageBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bus = None
                    return
            Holder.__name__ = "ISystemProperties_getDeviceTypesForStorageBus_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDeviceTypesForStorageBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDeviceTypesForStorageBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDeviceTypesForStorageBusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDeviceTypesForStorageBusResponse")
            kw["aname"] = "_ISystemProperties_getDeviceTypesForStorageBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISystemProperties_getDeviceTypesForStorageBusResponse_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultIoCacheSettingForStorageController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultIoCacheSettingForStorageController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultIoCacheSettingForStorageController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="controllerType", aname="_controllerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultIoCacheSettingForStorageController")
            kw["aname"] = "_ISystemProperties_getDefaultIoCacheSettingForStorageController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._controllerType = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultIoCacheSettingForStorageController_Holder"
            self.pyclass = Holder

    class ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse")
            kw["aname"] = "_ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Holder"
            self.pyclass = Holder

    class IGuest_getOSTypeId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getOSTypeId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getOSTypeId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getOSTypeId")
            kw["aname"] = "_IGuest_getOSTypeId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getOSTypeId_Holder"
            self.pyclass = Holder

    class IGuest_getOSTypeIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getOSTypeIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getOSTypeIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getOSTypeIdResponse")
            kw["aname"] = "_IGuest_getOSTypeIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getOSTypeIdResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsRunLevel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsRunLevel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsRunLevel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsRunLevel")
            kw["aname"] = "_IGuest_getAdditionsRunLevel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getAdditionsRunLevel_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsRunLevelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsRunLevelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsRunLevelResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AdditionsRunLevelType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsRunLevelResponse")
            kw["aname"] = "_IGuest_getAdditionsRunLevelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsRunLevelResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsVersion")
            kw["aname"] = "_IGuest_getAdditionsVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getAdditionsVersion_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsVersionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsVersionResponse")
            kw["aname"] = "_IGuest_getAdditionsVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsVersionResponse_Holder"
            self.pyclass = Holder

    class IGuest_getFacilities_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilities"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilities_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilities")
            kw["aname"] = "_IGuest_getFacilities"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getFacilities_Holder"
            self.pyclass = Holder

    class IGuest_getFacilitiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilitiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilitiesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IAdditionsFacility",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilitiesResponse")
            kw["aname"] = "_IGuest_getFacilitiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuest_getFacilitiesResponse_Holder"
            self.pyclass = Holder

    class IGuest_getMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getMemoryBalloonSize")
            kw["aname"] = "_IGuest_getMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IGuest_getMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getMemoryBalloonSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getMemoryBalloonSizeResponse")
            kw["aname"] = "_IGuest_getMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IGuest_setMemoryBalloonSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setMemoryBalloonSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setMemoryBalloonSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memoryBalloonSize", aname="_memoryBalloonSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setMemoryBalloonSize")
            kw["aname"] = "_IGuest_setMemoryBalloonSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._memoryBalloonSize = None
                    return
            Holder.__name__ = "IGuest_setMemoryBalloonSize_Holder"
            self.pyclass = Holder

    class IGuest_setMemoryBalloonSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setMemoryBalloonSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setMemoryBalloonSizeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setMemoryBalloonSizeResponse")
            kw["aname"] = "_IGuest_setMemoryBalloonSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_setMemoryBalloonSizeResponse_Holder"
            self.pyclass = Holder

    class IGuest_getStatisticsUpdateInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getStatisticsUpdateInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getStatisticsUpdateInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getStatisticsUpdateInterval")
            kw["aname"] = "_IGuest_getStatisticsUpdateInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_getStatisticsUpdateInterval_Holder"
            self.pyclass = Holder

    class IGuest_getStatisticsUpdateIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getStatisticsUpdateIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getStatisticsUpdateIntervalResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getStatisticsUpdateIntervalResponse")
            kw["aname"] = "_IGuest_getStatisticsUpdateIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getStatisticsUpdateIntervalResponse_Holder"
            self.pyclass = Holder

    class IGuest_setStatisticsUpdateInterval_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setStatisticsUpdateInterval"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setStatisticsUpdateInterval_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="statisticsUpdateInterval", aname="_statisticsUpdateInterval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setStatisticsUpdateInterval")
            kw["aname"] = "_IGuest_setStatisticsUpdateInterval"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._statisticsUpdateInterval = None
                    return
            Holder.__name__ = "IGuest_setStatisticsUpdateInterval_Holder"
            self.pyclass = Holder

    class IGuest_setStatisticsUpdateIntervalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setStatisticsUpdateIntervalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setStatisticsUpdateIntervalResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setStatisticsUpdateIntervalResponse")
            kw["aname"] = "_IGuest_setStatisticsUpdateIntervalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_setStatisticsUpdateIntervalResponse_Holder"
            self.pyclass = Holder

    class IGuest_internalGetStatistics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_internalGetStatistics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_internalGetStatistics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_internalGetStatistics")
            kw["aname"] = "_IGuest_internalGetStatistics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuest_internalGetStatistics_Holder"
            self.pyclass = Holder

    class IGuest_internalGetStatisticsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_internalGetStatisticsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_internalGetStatisticsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="cpuUser", aname="_cpuUser", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuKernel", aname="_cpuKernel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="cpuIdle", aname="_cpuIdle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memTotal", aname="_memTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memFree", aname="_memFree", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memBalloon", aname="_memBalloon", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memShared", aname="_memShared", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memCache", aname="_memCache", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pagedTotal", aname="_pagedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memAllocTotal", aname="_memAllocTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memFreeTotal", aname="_memFreeTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memBalloonTotal", aname="_memBalloonTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="memSharedTotal", aname="_memSharedTotal", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_internalGetStatisticsResponse")
            kw["aname"] = "_IGuest_internalGetStatisticsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cpuUser = None
                    self._cpuKernel = None
                    self._cpuIdle = None
                    self._memTotal = None
                    self._memFree = None
                    self._memBalloon = None
                    self._memShared = None
                    self._memCache = None
                    self._pagedTotal = None
                    self._memAllocTotal = None
                    self._memFreeTotal = None
                    self._memBalloonTotal = None
                    self._memSharedTotal = None
                    return
            Holder.__name__ = "IGuest_internalGetStatisticsResponse_Holder"
            self.pyclass = Holder

    class IGuest_getFacilityStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilityStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilityStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityType",lazy=False)(pname="facility", aname="_facility", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilityStatus")
            kw["aname"] = "_IGuest_getFacilityStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._facility = None
                    return
            Holder.__name__ = "IGuest_getFacilityStatus_Holder"
            self.pyclass = Holder

    class IGuest_getFacilityStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getFacilityStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getFacilityStatusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="timestamp", aname="_timestamp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsFacilityStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getFacilityStatusResponse")
            kw["aname"] = "_IGuest_getFacilityStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._timestamp = None
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getFacilityStatusResponse_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AdditionsRunLevelType",lazy=False)(pname="level", aname="_level", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsStatus")
            kw["aname"] = "_IGuest_getAdditionsStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._level = None
                    return
            Holder.__name__ = "IGuest_getAdditionsStatus_Holder"
            self.pyclass = Holder

    class IGuest_getAdditionsStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getAdditionsStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getAdditionsStatusResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getAdditionsStatusResponse")
            kw["aname"] = "_IGuest_getAdditionsStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getAdditionsStatusResponse_Holder"
            self.pyclass = Holder

    class IGuest_setCredentials_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setCredentials"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setCredentials_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="domain", aname="_domain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="allowInteractiveLogon", aname="_allowInteractiveLogon", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setCredentials")
            kw["aname"] = "_IGuest_setCredentials"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._userName = None
                    self._password = None
                    self._domain = None
                    self._allowInteractiveLogon = None
                    return
            Holder.__name__ = "IGuest_setCredentials_Holder"
            self.pyclass = Holder

    class IGuest_setCredentialsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setCredentialsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setCredentialsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setCredentialsResponse")
            kw["aname"] = "_IGuest_setCredentialsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_setCredentialsResponse_Holder"
            self.pyclass = Holder

    class IGuest_executeProcess_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_executeProcess"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_executeProcess_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="execName", aname="_execName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="arguments", aname="_arguments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="environment", aname="_environment", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_executeProcess")
            kw["aname"] = "_IGuest_executeProcess"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._execName = None
                    self._flags = None
                    self._arguments = []
                    self._environment = []
                    self._userName = None
                    self._password = None
                    self._timeoutMS = None
                    return
            Holder.__name__ = "IGuest_executeProcess_Holder"
            self.pyclass = Holder

    class IGuest_executeProcessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_executeProcessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_executeProcessResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_executeProcessResponse")
            kw["aname"] = "_IGuest_executeProcessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._pid = None
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_executeProcessResponse_Holder"
            self.pyclass = Holder

    class IGuest_getProcessOutput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getProcessOutput"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getProcessOutput_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="size", aname="_size", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getProcessOutput")
            kw["aname"] = "_IGuest_getProcessOutput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pid = None
                    self._flags = None
                    self._timeoutMS = None
                    self._size = None
                    return
            Holder.__name__ = "IGuest_getProcessOutput_Holder"
            self.pyclass = Holder

    class IGuest_getProcessOutputResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getProcessOutputResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getProcessOutputResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getProcessOutputResponse")
            kw["aname"] = "_IGuest_getProcessOutputResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getProcessOutputResponse_Holder"
            self.pyclass = Holder

    class IGuest_getProcessStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getProcessStatus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getProcessStatus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getProcessStatus")
            kw["aname"] = "_IGuest_getProcessStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pid = None
                    return
            Holder.__name__ = "IGuest_getProcessStatus_Holder"
            self.pyclass = Holder

    class IGuest_getProcessStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_getProcessStatusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_getProcessStatusResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="exitcode", aname="_exitcode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","ExecuteProcessStatus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_getProcessStatusResponse")
            kw["aname"] = "_IGuest_getProcessStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._exitcode = None
                    self._flags = None
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_getProcessStatusResponse_Holder"
            self.pyclass = Holder

    class IGuest_copyFromGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_copyFromGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_copyFromGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dest", aname="_dest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_copyFromGuest")
            kw["aname"] = "_IGuest_copyFromGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._dest = None
                    self._userName = None
                    self._password = None
                    self._flags = None
                    return
            Holder.__name__ = "IGuest_copyFromGuest_Holder"
            self.pyclass = Holder

    class IGuest_copyFromGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_copyFromGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_copyFromGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_copyFromGuestResponse")
            kw["aname"] = "_IGuest_copyFromGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_copyFromGuestResponse_Holder"
            self.pyclass = Holder

    class IGuest_copyToGuest_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_copyToGuest"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_copyToGuest_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="dest", aname="_dest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_copyToGuest")
            kw["aname"] = "_IGuest_copyToGuest"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._dest = None
                    self._userName = None
                    self._password = None
                    self._flags = None
                    return
            Holder.__name__ = "IGuest_copyToGuest_Holder"
            self.pyclass = Holder

    class IGuest_copyToGuestResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_copyToGuestResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_copyToGuestResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_copyToGuestResponse")
            kw["aname"] = "_IGuest_copyToGuestResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_copyToGuestResponse_Holder"
            self.pyclass = Holder

    class IGuest_directoryClose_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryClose"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryClose_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="handle", aname="_handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryClose")
            kw["aname"] = "_IGuest_directoryClose"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._handle = None
                    return
            Holder.__name__ = "IGuest_directoryClose_Holder"
            self.pyclass = Holder

    class IGuest_directoryCloseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryCloseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryCloseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryCloseResponse")
            kw["aname"] = "_IGuest_directoryCloseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_directoryCloseResponse_Holder"
            self.pyclass = Holder

    class IGuest_directoryCreate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryCreate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryCreate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="directory", aname="_directory", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mode", aname="_mode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryCreate")
            kw["aname"] = "_IGuest_directoryCreate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._directory = None
                    self._userName = None
                    self._password = None
                    self._mode = None
                    self._flags = None
                    return
            Holder.__name__ = "IGuest_directoryCreate_Holder"
            self.pyclass = Holder

    class IGuest_directoryCreateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryCreateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryCreateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryCreateResponse")
            kw["aname"] = "_IGuest_directoryCreateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IGuest_directoryCreateResponse_Holder"
            self.pyclass = Holder

    class IGuest_directoryOpen_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryOpen"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryOpen_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="directory", aname="_directory", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryOpen")
            kw["aname"] = "_IGuest_directoryOpen"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._directory = None
                    self._filter = None
                    self._flags = None
                    self._userName = None
                    self._password = None
                    return
            Holder.__name__ = "IGuest_directoryOpen_Holder"
            self.pyclass = Holder

    class IGuest_directoryOpenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryOpenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryOpenResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryOpenResponse")
            kw["aname"] = "_IGuest_directoryOpenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_directoryOpenResponse_Holder"
            self.pyclass = Holder

    class IGuest_directoryRead_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryRead"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryRead_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="handle", aname="_handle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryRead")
            kw["aname"] = "_IGuest_directoryRead"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._handle = None
                    return
            Holder.__name__ = "IGuest_directoryRead_Holder"
            self.pyclass = Holder

    class IGuest_directoryReadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_directoryReadResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_directoryReadResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IGuestDirEntry",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_directoryReadResponse")
            kw["aname"] = "_IGuest_directoryReadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_directoryReadResponse_Holder"
            self.pyclass = Holder

    class IGuest_fileExists_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_fileExists"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_fileExists_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_fileExists")
            kw["aname"] = "_IGuest_fileExists"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._file = None
                    self._userName = None
                    self._password = None
                    return
            Holder.__name__ = "IGuest_fileExists_Holder"
            self.pyclass = Holder

    class IGuest_fileExistsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_fileExistsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_fileExistsResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_fileExistsResponse")
            kw["aname"] = "_IGuest_fileExistsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_fileExistsResponse_Holder"
            self.pyclass = Holder

    class IGuest_fileQuerySize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_fileQuerySize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_fileQuerySize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="file", aname="_file", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="userName", aname="_userName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_fileQuerySize")
            kw["aname"] = "_IGuest_fileQuerySize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._file = None
                    self._userName = None
                    self._password = None
                    return
            Holder.__name__ = "IGuest_fileQuerySize_Holder"
            self.pyclass = Holder

    class IGuest_fileQuerySizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_fileQuerySizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_fileQuerySizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_fileQuerySizeResponse")
            kw["aname"] = "_IGuest_fileQuerySizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_fileQuerySizeResponse_Holder"
            self.pyclass = Holder

    class IGuest_setProcessInput_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setProcessInput"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setProcessInput_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="pid", aname="_pid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeoutMS", aname="_timeoutMS", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="data", aname="_data", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setProcessInput")
            kw["aname"] = "_IGuest_setProcessInput"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pid = None
                    self._flags = None
                    self._timeoutMS = None
                    self._data = None
                    return
            Holder.__name__ = "IGuest_setProcessInput_Holder"
            self.pyclass = Holder

    class IGuest_setProcessInputResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_setProcessInputResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_setProcessInputResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_setProcessInputResponse")
            kw["aname"] = "_IGuest_setProcessInputResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_setProcessInputResponse_Holder"
            self.pyclass = Holder

    class IGuest_updateGuestAdditions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_updateGuestAdditions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_updateGuestAdditions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="source", aname="_source", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_updateGuestAdditions")
            kw["aname"] = "_IGuest_updateGuestAdditions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._source = None
                    self._flags = None
                    return
            Holder.__name__ = "IGuest_updateGuestAdditions_Holder"
            self.pyclass = Holder

    class IGuest_updateGuestAdditionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuest_updateGuestAdditionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuest_updateGuestAdditionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuest_updateGuestAdditionsResponse")
            kw["aname"] = "_IGuest_updateGuestAdditionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuest_updateGuestAdditionsResponse_Holder"
            self.pyclass = Holder

    class IProgress_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getId")
            kw["aname"] = "_IProgress_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getId_Holder"
            self.pyclass = Holder

    class IProgress_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getIdResponse")
            kw["aname"] = "_IProgress_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getIdResponse_Holder"
            self.pyclass = Holder

    class IProgress_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getDescription")
            kw["aname"] = "_IProgress_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getDescription_Holder"
            self.pyclass = Holder

    class IProgress_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getDescriptionResponse")
            kw["aname"] = "_IProgress_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IProgress_getInitiator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getInitiator"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getInitiator_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getInitiator")
            kw["aname"] = "_IProgress_getInitiator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getInitiator_Holder"
            self.pyclass = Holder

    class IProgress_getInitiatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getInitiatorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getInitiatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getInitiatorResponse")
            kw["aname"] = "_IProgress_getInitiatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getInitiatorResponse_Holder"
            self.pyclass = Holder

    class IProgress_getCancelable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCancelable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCancelable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCancelable")
            kw["aname"] = "_IProgress_getCancelable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getCancelable_Holder"
            self.pyclass = Holder

    class IProgress_getCancelableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCancelableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCancelableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCancelableResponse")
            kw["aname"] = "_IProgress_getCancelableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getCancelableResponse_Holder"
            self.pyclass = Holder

    class IProgress_getPercent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getPercent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getPercent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getPercent")
            kw["aname"] = "_IProgress_getPercent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getPercent_Holder"
            self.pyclass = Holder

    class IProgress_getPercentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getPercentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getPercentResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getPercentResponse")
            kw["aname"] = "_IProgress_getPercentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getPercentResponse_Holder"
            self.pyclass = Holder

    class IProgress_getTimeRemaining_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeRemaining"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeRemaining_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeRemaining")
            kw["aname"] = "_IProgress_getTimeRemaining"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getTimeRemaining_Holder"
            self.pyclass = Holder

    class IProgress_getTimeRemainingResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeRemainingResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeRemainingResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeRemainingResponse")
            kw["aname"] = "_IProgress_getTimeRemainingResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getTimeRemainingResponse_Holder"
            self.pyclass = Holder

    class IProgress_getCompleted_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCompleted"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCompleted_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCompleted")
            kw["aname"] = "_IProgress_getCompleted"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getCompleted_Holder"
            self.pyclass = Holder

    class IProgress_getCompletedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCompletedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCompletedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCompletedResponse")
            kw["aname"] = "_IProgress_getCompletedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getCompletedResponse_Holder"
            self.pyclass = Holder

    class IProgress_getCanceled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCanceled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCanceled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCanceled")
            kw["aname"] = "_IProgress_getCanceled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getCanceled_Holder"
            self.pyclass = Holder

    class IProgress_getCanceledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getCanceledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getCanceledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getCanceledResponse")
            kw["aname"] = "_IProgress_getCanceledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getCanceledResponse_Holder"
            self.pyclass = Holder

    class IProgress_getResultCode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getResultCode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getResultCode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getResultCode")
            kw["aname"] = "_IProgress_getResultCode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getResultCode_Holder"
            self.pyclass = Holder

    class IProgress_getResultCodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getResultCodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getResultCodeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getResultCodeResponse")
            kw["aname"] = "_IProgress_getResultCodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getResultCodeResponse_Holder"
            self.pyclass = Holder

    class IProgress_getErrorInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getErrorInfo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getErrorInfo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getErrorInfo")
            kw["aname"] = "_IProgress_getErrorInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getErrorInfo_Holder"
            self.pyclass = Holder

    class IProgress_getErrorInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getErrorInfoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getErrorInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getErrorInfoResponse")
            kw["aname"] = "_IProgress_getErrorInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getErrorInfoResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationCount")
            kw["aname"] = "_IProgress_getOperationCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationCount_Holder"
            self.pyclass = Holder

    class IProgress_getOperationCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationCountResponse")
            kw["aname"] = "_IProgress_getOperationCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationCountResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperation")
            kw["aname"] = "_IProgress_getOperation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperation_Holder"
            self.pyclass = Holder

    class IProgress_getOperationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationResponse")
            kw["aname"] = "_IProgress_getOperationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationDescription")
            kw["aname"] = "_IProgress_getOperationDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationDescription_Holder"
            self.pyclass = Holder

    class IProgress_getOperationDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationDescriptionResponse")
            kw["aname"] = "_IProgress_getOperationDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationDescriptionResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationPercent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationPercent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationPercent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationPercent")
            kw["aname"] = "_IProgress_getOperationPercent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationPercent_Holder"
            self.pyclass = Holder

    class IProgress_getOperationPercentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationPercentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationPercentResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationPercentResponse")
            kw["aname"] = "_IProgress_getOperationPercentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationPercentResponse_Holder"
            self.pyclass = Holder

    class IProgress_getOperationWeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationWeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationWeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationWeight")
            kw["aname"] = "_IProgress_getOperationWeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getOperationWeight_Holder"
            self.pyclass = Holder

    class IProgress_getOperationWeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getOperationWeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getOperationWeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getOperationWeightResponse")
            kw["aname"] = "_IProgress_getOperationWeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getOperationWeightResponse_Holder"
            self.pyclass = Holder

    class IProgress_getTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeout")
            kw["aname"] = "_IProgress_getTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_getTimeout_Holder"
            self.pyclass = Holder

    class IProgress_getTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_getTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_getTimeoutResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_getTimeoutResponse")
            kw["aname"] = "_IProgress_getTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IProgress_getTimeoutResponse_Holder"
            self.pyclass = Holder

    class IProgress_setTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setTimeout")
            kw["aname"] = "_IProgress_setTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IProgress_setTimeout_Holder"
            self.pyclass = Holder

    class IProgress_setTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setTimeoutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setTimeoutResponse")
            kw["aname"] = "_IProgress_setTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_setTimeoutResponse_Holder"
            self.pyclass = Holder

    class IProgress_setCurrentOperationProgress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setCurrentOperationProgress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setCurrentOperationProgress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="percent", aname="_percent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setCurrentOperationProgress")
            kw["aname"] = "_IProgress_setCurrentOperationProgress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._percent = None
                    return
            Holder.__name__ = "IProgress_setCurrentOperationProgress_Holder"
            self.pyclass = Holder

    class IProgress_setCurrentOperationProgressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setCurrentOperationProgressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setCurrentOperationProgressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setCurrentOperationProgressResponse")
            kw["aname"] = "_IProgress_setCurrentOperationProgressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_setCurrentOperationProgressResponse_Holder"
            self.pyclass = Holder

    class IProgress_setNextOperation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setNextOperation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setNextOperation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="nextOperationDescription", aname="_nextOperationDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="nextOperationsWeight", aname="_nextOperationsWeight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setNextOperation")
            kw["aname"] = "_IProgress_setNextOperation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._nextOperationDescription = None
                    self._nextOperationsWeight = None
                    return
            Holder.__name__ = "IProgress_setNextOperation_Holder"
            self.pyclass = Holder

    class IProgress_setNextOperationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_setNextOperationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_setNextOperationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_setNextOperationResponse")
            kw["aname"] = "_IProgress_setNextOperationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_setNextOperationResponse_Holder"
            self.pyclass = Holder

    class IProgress_waitForCompletion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForCompletion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForCompletion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForCompletion")
            kw["aname"] = "_IProgress_waitForCompletion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IProgress_waitForCompletion_Holder"
            self.pyclass = Holder

    class IProgress_waitForCompletionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForCompletionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForCompletionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForCompletionResponse")
            kw["aname"] = "_IProgress_waitForCompletionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_waitForCompletionResponse_Holder"
            self.pyclass = Holder

    class IProgress_waitForOperationCompletion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForOperationCompletion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForOperationCompletion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="operation", aname="_operation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForOperationCompletion")
            kw["aname"] = "_IProgress_waitForOperationCompletion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._operation = None
                    self._timeout = None
                    return
            Holder.__name__ = "IProgress_waitForOperationCompletion_Holder"
            self.pyclass = Holder

    class IProgress_waitForOperationCompletionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForOperationCompletionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForOperationCompletionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForOperationCompletionResponse")
            kw["aname"] = "_IProgress_waitForOperationCompletionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_waitForOperationCompletionResponse_Holder"
            self.pyclass = Holder

    class IProgress_waitForAsyncProgressCompletion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForAsyncProgressCompletion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForAsyncProgressCompletion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="pProgressAsync", aname="_pProgressAsync", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForAsyncProgressCompletion")
            kw["aname"] = "_IProgress_waitForAsyncProgressCompletion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._pProgressAsync = None
                    return
            Holder.__name__ = "IProgress_waitForAsyncProgressCompletion_Holder"
            self.pyclass = Holder

    class IProgress_waitForAsyncProgressCompletionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_waitForAsyncProgressCompletionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_waitForAsyncProgressCompletionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_waitForAsyncProgressCompletionResponse")
            kw["aname"] = "_IProgress_waitForAsyncProgressCompletionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_waitForAsyncProgressCompletionResponse_Holder"
            self.pyclass = Holder

    class IProgress_cancel_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_cancel"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_cancel_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_cancel")
            kw["aname"] = "_IProgress_cancel"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IProgress_cancel_Holder"
            self.pyclass = Holder

    class IProgress_cancelResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IProgress_cancelResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IProgress_cancelResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IProgress_cancelResponse")
            kw["aname"] = "_IProgress_cancelResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IProgress_cancelResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getId")
            kw["aname"] = "_ISnapshot_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getId_Holder"
            self.pyclass = Holder

    class ISnapshot_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getIdResponse")
            kw["aname"] = "_ISnapshot_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getIdResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getName")
            kw["aname"] = "_ISnapshot_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getName_Holder"
            self.pyclass = Holder

    class ISnapshot_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getNameResponse")
            kw["aname"] = "_ISnapshot_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getNameResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setName")
            kw["aname"] = "_ISnapshot_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "ISnapshot_setName_Holder"
            self.pyclass = Holder

    class ISnapshot_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setNameResponse")
            kw["aname"] = "_ISnapshot_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISnapshot_setNameResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getDescription")
            kw["aname"] = "_ISnapshot_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getDescription_Holder"
            self.pyclass = Holder

    class ISnapshot_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getDescriptionResponse")
            kw["aname"] = "_ISnapshot_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_setDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setDescription")
            kw["aname"] = "_ISnapshot_setDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    return
            Holder.__name__ = "ISnapshot_setDescription_Holder"
            self.pyclass = Holder

    class ISnapshot_setDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_setDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_setDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_setDescriptionResponse")
            kw["aname"] = "_ISnapshot_setDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISnapshot_setDescriptionResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getTimeStamp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getTimeStamp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getTimeStamp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getTimeStamp")
            kw["aname"] = "_ISnapshot_getTimeStamp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getTimeStamp_Holder"
            self.pyclass = Holder

    class ISnapshot_getTimeStampResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getTimeStampResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getTimeStampResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getTimeStampResponse")
            kw["aname"] = "_ISnapshot_getTimeStampResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getTimeStampResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getOnline_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getOnline"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getOnline_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getOnline")
            kw["aname"] = "_ISnapshot_getOnline"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getOnline_Holder"
            self.pyclass = Holder

    class ISnapshot_getOnlineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getOnlineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getOnlineResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getOnlineResponse")
            kw["aname"] = "_ISnapshot_getOnlineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getOnlineResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getMachine")
            kw["aname"] = "_ISnapshot_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getMachine_Holder"
            self.pyclass = Holder

    class ISnapshot_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getMachineResponse")
            kw["aname"] = "_ISnapshot_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getMachineResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getParent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getParent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getParent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getParent")
            kw["aname"] = "_ISnapshot_getParent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getParent_Holder"
            self.pyclass = Holder

    class ISnapshot_getParentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getParentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getParentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getParentResponse")
            kw["aname"] = "_ISnapshot_getParentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getParentResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildren_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildren"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildren_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildren")
            kw["aname"] = "_ISnapshot_getChildren"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getChildren_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildrenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildrenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildrenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildrenResponse")
            kw["aname"] = "_ISnapshot_getChildrenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "ISnapshot_getChildrenResponse_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildrenCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildrenCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildrenCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildrenCount")
            kw["aname"] = "_ISnapshot_getChildrenCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshot_getChildrenCount_Holder"
            self.pyclass = Holder

    class ISnapshot_getChildrenCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshot_getChildrenCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshot_getChildrenCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshot_getChildrenCountResponse")
            kw["aname"] = "_ISnapshot_getChildrenCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshot_getChildrenCountResponse_Holder"
            self.pyclass = Holder

    class IMedium_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getId")
            kw["aname"] = "_IMedium_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getId_Holder"
            self.pyclass = Holder

    class IMedium_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getIdResponse")
            kw["aname"] = "_IMedium_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getIdResponse_Holder"
            self.pyclass = Holder

    class IMedium_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDescription")
            kw["aname"] = "_IMedium_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getDescription_Holder"
            self.pyclass = Holder

    class IMedium_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDescriptionResponse")
            kw["aname"] = "_IMedium_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMedium_setDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setDescription")
            kw["aname"] = "_IMedium_setDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._description = None
                    return
            Holder.__name__ = "IMedium_setDescription_Holder"
            self.pyclass = Holder

    class IMedium_setDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setDescriptionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setDescriptionResponse")
            kw["aname"] = "_IMedium_setDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setDescriptionResponse_Holder"
            self.pyclass = Holder

    class IMedium_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getState")
            kw["aname"] = "_IMedium_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getState_Holder"
            self.pyclass = Holder

    class IMedium_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getStateResponse")
            kw["aname"] = "_IMedium_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getStateResponse_Holder"
            self.pyclass = Holder

    class IMedium_getVariant_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getVariant"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getVariant_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getVariant")
            kw["aname"] = "_IMedium_getVariant"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getVariant_Holder"
            self.pyclass = Holder

    class IMedium_getVariantResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getVariantResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getVariantResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getVariantResponse")
            kw["aname"] = "_IMedium_getVariantResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getVariantResponse_Holder"
            self.pyclass = Holder

    class IMedium_getLocation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLocation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLocation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLocation")
            kw["aname"] = "_IMedium_getLocation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getLocation_Holder"
            self.pyclass = Holder

    class IMedium_getLocationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLocationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLocationResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLocationResponse")
            kw["aname"] = "_IMedium_getLocationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getLocationResponse_Holder"
            self.pyclass = Holder

    class IMedium_setLocation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setLocation"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setLocation_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="location", aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setLocation")
            kw["aname"] = "_IMedium_setLocation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._location = None
                    return
            Holder.__name__ = "IMedium_setLocation_Holder"
            self.pyclass = Holder

    class IMedium_setLocationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setLocationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setLocationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setLocationResponse")
            kw["aname"] = "_IMedium_setLocationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setLocationResponse_Holder"
            self.pyclass = Holder

    class IMedium_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getName")
            kw["aname"] = "_IMedium_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getName_Holder"
            self.pyclass = Holder

    class IMedium_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getNameResponse")
            kw["aname"] = "_IMedium_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getNameResponse_Holder"
            self.pyclass = Holder

    class IMedium_getDeviceType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDeviceType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDeviceType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDeviceType")
            kw["aname"] = "_IMedium_getDeviceType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getDeviceType_Holder"
            self.pyclass = Holder

    class IMedium_getDeviceTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getDeviceTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getDeviceTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getDeviceTypeResponse")
            kw["aname"] = "_IMedium_getDeviceTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getDeviceTypeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getHostDrive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getHostDrive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getHostDrive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getHostDrive")
            kw["aname"] = "_IMedium_getHostDrive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getHostDrive_Holder"
            self.pyclass = Holder

    class IMedium_getHostDriveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getHostDriveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getHostDriveResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getHostDriveResponse")
            kw["aname"] = "_IMedium_getHostDriveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getHostDriveResponse_Holder"
            self.pyclass = Holder

    class IMedium_getSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSize")
            kw["aname"] = "_IMedium_getSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getSize_Holder"
            self.pyclass = Holder

    class IMedium_getSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSizeResponse")
            kw["aname"] = "_IMedium_getSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getSizeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getFormat")
            kw["aname"] = "_IMedium_getFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getFormat_Holder"
            self.pyclass = Holder

    class IMedium_getFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getFormatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getFormatResponse")
            kw["aname"] = "_IMedium_getFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getFormatResponse_Holder"
            self.pyclass = Holder

    class IMedium_getMediumFormat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMediumFormat"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMediumFormat_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMediumFormat")
            kw["aname"] = "_IMedium_getMediumFormat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getMediumFormat_Holder"
            self.pyclass = Holder

    class IMedium_getMediumFormatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMediumFormatResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMediumFormatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMediumFormatResponse")
            kw["aname"] = "_IMedium_getMediumFormatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getMediumFormatResponse_Holder"
            self.pyclass = Holder

    class IMedium_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getType")
            kw["aname"] = "_IMedium_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getType_Holder"
            self.pyclass = Holder

    class IMedium_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getTypeResponse")
            kw["aname"] = "_IMedium_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getTypeResponse_Holder"
            self.pyclass = Holder

    class IMedium_setType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","MediumType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setType")
            kw["aname"] = "_IMedium_setType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._type = None
                    return
            Holder.__name__ = "IMedium_setType_Holder"
            self.pyclass = Holder

    class IMedium_setTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setTypeResponse")
            kw["aname"] = "_IMedium_setTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setTypeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getAllowedTypes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAllowedTypes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAllowedTypes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAllowedTypes")
            kw["aname"] = "_IMedium_getAllowedTypes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getAllowedTypes_Holder"
            self.pyclass = Holder

    class IMedium_getAllowedTypesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAllowedTypesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAllowedTypesResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAllowedTypesResponse")
            kw["aname"] = "_IMedium_getAllowedTypesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getAllowedTypesResponse_Holder"
            self.pyclass = Holder

    class IMedium_getParent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getParent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getParent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getParent")
            kw["aname"] = "_IMedium_getParent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getParent_Holder"
            self.pyclass = Holder

    class IMedium_getParentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getParentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getParentResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getParentResponse")
            kw["aname"] = "_IMedium_getParentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getParentResponse_Holder"
            self.pyclass = Holder

    class IMedium_getChildren_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getChildren"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getChildren_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getChildren")
            kw["aname"] = "_IMedium_getChildren"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getChildren_Holder"
            self.pyclass = Holder

    class IMedium_getChildrenResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getChildrenResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getChildrenResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getChildrenResponse")
            kw["aname"] = "_IMedium_getChildrenResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getChildrenResponse_Holder"
            self.pyclass = Holder

    class IMedium_getBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getBase")
            kw["aname"] = "_IMedium_getBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getBase_Holder"
            self.pyclass = Holder

    class IMedium_getBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getBaseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getBaseResponse")
            kw["aname"] = "_IMedium_getBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getBaseResponse_Holder"
            self.pyclass = Holder

    class IMedium_getReadOnly_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getReadOnly"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getReadOnly_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getReadOnly")
            kw["aname"] = "_IMedium_getReadOnly"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getReadOnly_Holder"
            self.pyclass = Holder

    class IMedium_getReadOnlyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getReadOnlyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getReadOnlyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getReadOnlyResponse")
            kw["aname"] = "_IMedium_getReadOnlyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getReadOnlyResponse_Holder"
            self.pyclass = Holder

    class IMedium_getLogicalSize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLogicalSize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLogicalSize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLogicalSize")
            kw["aname"] = "_IMedium_getLogicalSize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getLogicalSize_Holder"
            self.pyclass = Holder

    class IMedium_getLogicalSizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLogicalSizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLogicalSizeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLogicalSizeResponse")
            kw["aname"] = "_IMedium_getLogicalSizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getLogicalSizeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getAutoReset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAutoReset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAutoReset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAutoReset")
            kw["aname"] = "_IMedium_getAutoReset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getAutoReset_Holder"
            self.pyclass = Holder

    class IMedium_getAutoResetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getAutoResetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getAutoResetResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getAutoResetResponse")
            kw["aname"] = "_IMedium_getAutoResetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getAutoResetResponse_Holder"
            self.pyclass = Holder

    class IMedium_setAutoReset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setAutoReset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setAutoReset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="autoReset", aname="_autoReset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setAutoReset")
            kw["aname"] = "_IMedium_setAutoReset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._autoReset = None
                    return
            Holder.__name__ = "IMedium_setAutoReset_Holder"
            self.pyclass = Holder

    class IMedium_setAutoResetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setAutoResetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setAutoResetResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setAutoResetResponse")
            kw["aname"] = "_IMedium_setAutoResetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setAutoResetResponse_Holder"
            self.pyclass = Holder

    class IMedium_getLastAccessError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLastAccessError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLastAccessError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLastAccessError")
            kw["aname"] = "_IMedium_getLastAccessError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getLastAccessError_Holder"
            self.pyclass = Holder

    class IMedium_getLastAccessErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getLastAccessErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getLastAccessErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getLastAccessErrorResponse")
            kw["aname"] = "_IMedium_getLastAccessErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getLastAccessErrorResponse_Holder"
            self.pyclass = Holder

    class IMedium_getMachineIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMachineIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMachineIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMachineIds")
            kw["aname"] = "_IMedium_getMachineIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_getMachineIds_Holder"
            self.pyclass = Holder

    class IMedium_getMachineIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getMachineIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getMachineIdsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getMachineIdsResponse")
            kw["aname"] = "_IMedium_getMachineIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getMachineIdsResponse_Holder"
            self.pyclass = Holder

    class IMedium_setIDs_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setIDs"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setIDs_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="setImageId", aname="_setImageId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="imageId", aname="_imageId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="setParentId", aname="_setParentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parentId", aname="_parentId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setIDs")
            kw["aname"] = "_IMedium_setIDs"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._setImageId = None
                    self._imageId = None
                    self._setParentId = None
                    self._parentId = None
                    return
            Holder.__name__ = "IMedium_setIDs_Holder"
            self.pyclass = Holder

    class IMedium_setIDsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setIDsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setIDsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setIDsResponse")
            kw["aname"] = "_IMedium_setIDsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setIDsResponse_Holder"
            self.pyclass = Holder

    class IMedium_refreshState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_refreshState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_refreshState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_refreshState")
            kw["aname"] = "_IMedium_refreshState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_refreshState_Holder"
            self.pyclass = Holder

    class IMedium_refreshStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_refreshStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_refreshStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_refreshStateResponse")
            kw["aname"] = "_IMedium_refreshStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_refreshStateResponse_Holder"
            self.pyclass = Holder

    class IMedium_getSnapshotIds_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSnapshotIds"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSnapshotIds_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="machineId", aname="_machineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSnapshotIds")
            kw["aname"] = "_IMedium_getSnapshotIds"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._machineId = None
                    return
            Holder.__name__ = "IMedium_getSnapshotIds_Holder"
            self.pyclass = Holder

    class IMedium_getSnapshotIdsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getSnapshotIdsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getSnapshotIdsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getSnapshotIdsResponse")
            kw["aname"] = "_IMedium_getSnapshotIdsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getSnapshotIdsResponse_Holder"
            self.pyclass = Holder

    class IMedium_lockRead_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockRead"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockRead_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockRead")
            kw["aname"] = "_IMedium_lockRead"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_lockRead_Holder"
            self.pyclass = Holder

    class IMedium_lockReadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockReadResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockReadResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockReadResponse")
            kw["aname"] = "_IMedium_lockReadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_lockReadResponse_Holder"
            self.pyclass = Holder

    class IMedium_unlockRead_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_unlockRead"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_unlockRead_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_unlockRead")
            kw["aname"] = "_IMedium_unlockRead"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_unlockRead_Holder"
            self.pyclass = Holder

    class IMedium_unlockReadResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_unlockReadResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_unlockReadResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_unlockReadResponse")
            kw["aname"] = "_IMedium_unlockReadResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_unlockReadResponse_Holder"
            self.pyclass = Holder

    class IMedium_lockWrite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockWrite"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockWrite_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockWrite")
            kw["aname"] = "_IMedium_lockWrite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_lockWrite_Holder"
            self.pyclass = Holder

    class IMedium_lockWriteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_lockWriteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_lockWriteResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_lockWriteResponse")
            kw["aname"] = "_IMedium_lockWriteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_lockWriteResponse_Holder"
            self.pyclass = Holder

    class IMedium_unlockWrite_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_unlockWrite"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_unlockWrite_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_unlockWrite")
            kw["aname"] = "_IMedium_unlockWrite"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_unlockWrite_Holder"
            self.pyclass = Holder

    class IMedium_unlockWriteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_unlockWriteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_unlockWriteResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MediumState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_unlockWriteResponse")
            kw["aname"] = "_IMedium_unlockWriteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_unlockWriteResponse_Holder"
            self.pyclass = Holder

    class IMedium_close_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_close"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_close_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_close")
            kw["aname"] = "_IMedium_close"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_close_Holder"
            self.pyclass = Holder

    class IMedium_closeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_closeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_closeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_closeResponse")
            kw["aname"] = "_IMedium_closeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_closeResponse_Holder"
            self.pyclass = Holder

    class IMedium_getProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getProperty")
            kw["aname"] = "_IMedium_getProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IMedium_getProperty_Holder"
            self.pyclass = Holder

    class IMedium_getPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getPropertyResponse")
            kw["aname"] = "_IMedium_getPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_getPropertyResponse_Holder"
            self.pyclass = Holder

    class IMedium_setProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setProperty")
            kw["aname"] = "_IMedium_setProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._value = None
                    return
            Holder.__name__ = "IMedium_setProperty_Holder"
            self.pyclass = Holder

    class IMedium_setPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setPropertyResponse")
            kw["aname"] = "_IMedium_setPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setPropertyResponse_Holder"
            self.pyclass = Holder

    class IMedium_getProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getProperties")
            kw["aname"] = "_IMedium_getProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = None
                    return
            Holder.__name__ = "IMedium_getProperties_Holder"
            self.pyclass = Holder

    class IMedium_getPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_getPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_getPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnNames", aname="_returnNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_getPropertiesResponse")
            kw["aname"] = "_IMedium_getPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnNames = []
                    self._returnval = []
                    return
            Holder.__name__ = "IMedium_getPropertiesResponse_Holder"
            self.pyclass = Holder

    class IMedium_setProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="values", aname="_values", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setProperties")
            kw["aname"] = "_IMedium_setProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = []
                    self._values = []
                    return
            Holder.__name__ = "IMedium_setProperties_Holder"
            self.pyclass = Holder

    class IMedium_setPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_setPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_setPropertiesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_setPropertiesResponse")
            kw["aname"] = "_IMedium_setPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMedium_setPropertiesResponse_Holder"
            self.pyclass = Holder

    class IMedium_createBaseStorage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createBaseStorage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createBaseStorage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="logicalSize", aname="_logicalSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="variant", aname="_variant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createBaseStorage")
            kw["aname"] = "_IMedium_createBaseStorage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logicalSize = None
                    self._variant = None
                    return
            Holder.__name__ = "IMedium_createBaseStorage_Holder"
            self.pyclass = Holder

    class IMedium_createBaseStorageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createBaseStorageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createBaseStorageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createBaseStorageResponse")
            kw["aname"] = "_IMedium_createBaseStorageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_createBaseStorageResponse_Holder"
            self.pyclass = Holder

    class IMedium_deleteStorage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_deleteStorage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_deleteStorage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_deleteStorage")
            kw["aname"] = "_IMedium_deleteStorage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_deleteStorage_Holder"
            self.pyclass = Holder

    class IMedium_deleteStorageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_deleteStorageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_deleteStorageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_deleteStorageResponse")
            kw["aname"] = "_IMedium_deleteStorageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_deleteStorageResponse_Holder"
            self.pyclass = Holder

    class IMedium_createDiffStorage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createDiffStorage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createDiffStorage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="variant", aname="_variant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createDiffStorage")
            kw["aname"] = "_IMedium_createDiffStorage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._variant = None
                    return
            Holder.__name__ = "IMedium_createDiffStorage_Holder"
            self.pyclass = Holder

    class IMedium_createDiffStorageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_createDiffStorageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_createDiffStorageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_createDiffStorageResponse")
            kw["aname"] = "_IMedium_createDiffStorageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_createDiffStorageResponse_Holder"
            self.pyclass = Holder

    class IMedium_mergeTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_mergeTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_mergeTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_mergeTo")
            kw["aname"] = "_IMedium_mergeTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    return
            Holder.__name__ = "IMedium_mergeTo_Holder"
            self.pyclass = Holder

    class IMedium_mergeToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_mergeToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_mergeToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_mergeToResponse")
            kw["aname"] = "_IMedium_mergeToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_mergeToResponse_Holder"
            self.pyclass = Holder

    class IMedium_cloneTo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_cloneTo"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_cloneTo_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="target", aname="_target", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="variant", aname="_variant", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="parent", aname="_parent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_cloneTo")
            kw["aname"] = "_IMedium_cloneTo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._target = None
                    self._variant = None
                    self._parent = None
                    return
            Holder.__name__ = "IMedium_cloneTo_Holder"
            self.pyclass = Holder

    class IMedium_cloneToResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_cloneToResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_cloneToResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_cloneToResponse")
            kw["aname"] = "_IMedium_cloneToResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_cloneToResponse_Holder"
            self.pyclass = Holder

    class IMedium_compact_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_compact"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_compact_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_compact")
            kw["aname"] = "_IMedium_compact"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_compact_Holder"
            self.pyclass = Holder

    class IMedium_compactResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_compactResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_compactResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_compactResponse")
            kw["aname"] = "_IMedium_compactResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_compactResponse_Holder"
            self.pyclass = Holder

    class IMedium_resize_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_resize"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_resize_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="logicalSize", aname="_logicalSize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_resize")
            kw["aname"] = "_IMedium_resize"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._logicalSize = None
                    return
            Holder.__name__ = "IMedium_resize_Holder"
            self.pyclass = Holder

    class IMedium_resizeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_resizeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_resizeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_resizeResponse")
            kw["aname"] = "_IMedium_resizeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_resizeResponse_Holder"
            self.pyclass = Holder

    class IMedium_reset_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_reset"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_reset_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_reset")
            kw["aname"] = "_IMedium_reset"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMedium_reset_Holder"
            self.pyclass = Holder

    class IMedium_resetResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMedium_resetResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMedium_resetResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMedium_resetResponse")
            kw["aname"] = "_IMedium_resetResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMedium_resetResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getId")
            kw["aname"] = "_IMediumFormat_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_getId_Holder"
            self.pyclass = Holder

    class IMediumFormat_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getIdResponse")
            kw["aname"] = "_IMediumFormat_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumFormat_getIdResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getName")
            kw["aname"] = "_IMediumFormat_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_getName_Holder"
            self.pyclass = Holder

    class IMediumFormat_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getNameResponse")
            kw["aname"] = "_IMediumFormat_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumFormat_getNameResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_getCapabilities_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getCapabilities"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getCapabilities_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getCapabilities")
            kw["aname"] = "_IMediumFormat_getCapabilities"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_getCapabilities_Holder"
            self.pyclass = Holder

    class IMediumFormat_getCapabilitiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_getCapabilitiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_getCapabilitiesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_getCapabilitiesResponse")
            kw["aname"] = "_IMediumFormat_getCapabilitiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumFormat_getCapabilitiesResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_describeFileExtensions_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describeFileExtensions"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describeFileExtensions_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describeFileExtensions")
            kw["aname"] = "_IMediumFormat_describeFileExtensions"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_describeFileExtensions_Holder"
            self.pyclass = Holder

    class IMediumFormat_describeFileExtensionsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describeFileExtensionsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describeFileExtensionsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="extensions", aname="_extensions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="type", aname="_type", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describeFileExtensionsResponse")
            kw["aname"] = "_IMediumFormat_describeFileExtensionsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._extensions = []
                    self._type = []
                    return
            Holder.__name__ = "IMediumFormat_describeFileExtensionsResponse_Holder"
            self.pyclass = Holder

    class IMediumFormat_describeProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describeProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describeProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describeProperties")
            kw["aname"] = "_IMediumFormat_describeProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumFormat_describeProperties_Holder"
            self.pyclass = Holder

    class IMediumFormat_describePropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumFormat_describePropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumFormat_describePropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="names", aname="_names", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="description", aname="_description", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","DataType",lazy=False)(pname="types", aname="_types", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="flags", aname="_flags", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="defaults", aname="_defaults", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumFormat_describePropertiesResponse")
            kw["aname"] = "_IMediumFormat_describePropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._names = []
                    self._description = []
                    self._types = []
                    self._flags = []
                    self._defaults = []
                    return
            Holder.__name__ = "IMediumFormat_describePropertiesResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_getEventSource")
            kw["aname"] = "_IKeyboard_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboard_getEventSource_Holder"
            self.pyclass = Holder

    class IKeyboard_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_getEventSourceResponse")
            kw["aname"] = "_IKeyboard_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboard_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="scancode", aname="_scancode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancode")
            kw["aname"] = "_IKeyboard_putScancode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._scancode = None
                    return
            Holder.__name__ = "IKeyboard_putScancode_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancodeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancodeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancodeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancodeResponse")
            kw["aname"] = "_IKeyboard_putScancodeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IKeyboard_putScancodeResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancodes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancodes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancodes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="scancodes", aname="_scancodes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancodes")
            kw["aname"] = "_IKeyboard_putScancodes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._scancodes = []
                    return
            Holder.__name__ = "IKeyboard_putScancodes_Holder"
            self.pyclass = Holder

    class IKeyboard_putScancodesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putScancodesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putScancodesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putScancodesResponse")
            kw["aname"] = "_IKeyboard_putScancodesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboard_putScancodesResponse_Holder"
            self.pyclass = Holder

    class IKeyboard_putCAD_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putCAD"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putCAD_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putCAD")
            kw["aname"] = "_IKeyboard_putCAD"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboard_putCAD_Holder"
            self.pyclass = Holder

    class IKeyboard_putCADResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboard_putCADResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboard_putCADResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboard_putCADResponse")
            kw["aname"] = "_IKeyboard_putCADResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IKeyboard_putCADResponse_Holder"
            self.pyclass = Holder

    class IMouse_getAbsoluteSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getAbsoluteSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getAbsoluteSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getAbsoluteSupported")
            kw["aname"] = "_IMouse_getAbsoluteSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getAbsoluteSupported_Holder"
            self.pyclass = Holder

    class IMouse_getAbsoluteSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getAbsoluteSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getAbsoluteSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getAbsoluteSupportedResponse")
            kw["aname"] = "_IMouse_getAbsoluteSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getAbsoluteSupportedResponse_Holder"
            self.pyclass = Holder

    class IMouse_getRelativeSupported_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getRelativeSupported"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getRelativeSupported_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getRelativeSupported")
            kw["aname"] = "_IMouse_getRelativeSupported"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getRelativeSupported_Holder"
            self.pyclass = Holder

    class IMouse_getRelativeSupportedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getRelativeSupportedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getRelativeSupportedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getRelativeSupportedResponse")
            kw["aname"] = "_IMouse_getRelativeSupportedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getRelativeSupportedResponse_Holder"
            self.pyclass = Holder

    class IMouse_getNeedsHostCursor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getNeedsHostCursor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getNeedsHostCursor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getNeedsHostCursor")
            kw["aname"] = "_IMouse_getNeedsHostCursor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getNeedsHostCursor_Holder"
            self.pyclass = Holder

    class IMouse_getNeedsHostCursorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getNeedsHostCursorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getNeedsHostCursorResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getNeedsHostCursorResponse")
            kw["aname"] = "_IMouse_getNeedsHostCursorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getNeedsHostCursorResponse_Holder"
            self.pyclass = Holder

    class IMouse_getEventSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getEventSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getEventSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getEventSource")
            kw["aname"] = "_IMouse_getEventSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouse_getEventSource_Holder"
            self.pyclass = Holder

    class IMouse_getEventSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_getEventSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_getEventSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_getEventSourceResponse")
            kw["aname"] = "_IMouse_getEventSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouse_getEventSourceResponse_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dx", aname="_dx", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dy", aname="_dy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dz", aname="_dz", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dw", aname="_dw", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="buttonState", aname="_buttonState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEvent")
            kw["aname"] = "_IMouse_putMouseEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dx = None
                    self._dy = None
                    self._dz = None
                    self._dw = None
                    self._buttonState = None
                    return
            Holder.__name__ = "IMouse_putMouseEvent_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEventResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEventResponse")
            kw["aname"] = "_IMouse_putMouseEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMouse_putMouseEventResponse_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEventAbsolute_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEventAbsolute"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEventAbsolute_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="x", aname="_x", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="y", aname="_y", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dz", aname="_dz", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="dw", aname="_dw", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="buttonState", aname="_buttonState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEventAbsolute")
            kw["aname"] = "_IMouse_putMouseEventAbsolute"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._x = None
                    self._y = None
                    self._dz = None
                    self._dw = None
                    self._buttonState = None
                    return
            Holder.__name__ = "IMouse_putMouseEventAbsolute_Holder"
            self.pyclass = Holder

    class IMouse_putMouseEventAbsoluteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouse_putMouseEventAbsoluteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouse_putMouseEventAbsoluteResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IMouse_putMouseEventAbsoluteResponse")
            kw["aname"] = "_IMouse_putMouseEventAbsoluteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IMouse_putMouseEventAbsoluteResponse_Holder"
            self.pyclass = Holder

    class IDisplay_getScreenResolution_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_getScreenResolution"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_getScreenResolution_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_getScreenResolution")
            kw["aname"] = "_IDisplay_getScreenResolution"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDisplay_getScreenResolution_Holder"
            self.pyclass = Holder

    class IDisplay_getScreenResolutionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_getScreenResolutionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_getScreenResolutionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bitsPerPixel", aname="_bitsPerPixel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_getScreenResolutionResponse")
            kw["aname"] = "_IDisplay_getScreenResolutionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._width = None
                    self._height = None
                    self._bitsPerPixel = None
                    return
            Holder.__name__ = "IDisplay_getScreenResolutionResponse_Holder"
            self.pyclass = Holder

    class IDisplay_setVideoModeHint_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setVideoModeHint"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setVideoModeHint_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bitsPerPixel", aname="_bitsPerPixel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="display", aname="_display", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setVideoModeHint")
            kw["aname"] = "_IDisplay_setVideoModeHint"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._width = None
                    self._height = None
                    self._bitsPerPixel = None
                    self._display = None
                    return
            Holder.__name__ = "IDisplay_setVideoModeHint_Holder"
            self.pyclass = Holder

    class IDisplay_setVideoModeHintResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setVideoModeHintResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setVideoModeHintResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setVideoModeHintResponse")
            kw["aname"] = "_IDisplay_setVideoModeHintResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_setVideoModeHintResponse_Holder"
            self.pyclass = Holder

    class IDisplay_setSeamlessMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setSeamlessMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setSeamlessMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setSeamlessMode")
            kw["aname"] = "_IDisplay_setSeamlessMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IDisplay_setSeamlessMode_Holder"
            self.pyclass = Holder

    class IDisplay_setSeamlessModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_setSeamlessModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_setSeamlessModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_setSeamlessModeResponse")
            kw["aname"] = "_IDisplay_setSeamlessModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_setSeamlessModeResponse_Holder"
            self.pyclass = Holder

    class IDisplay_takeScreenShotToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_takeScreenShotToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_takeScreenShotToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_takeScreenShotToArray")
            kw["aname"] = "_IDisplay_takeScreenShotToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IDisplay_takeScreenShotToArray_Holder"
            self.pyclass = Holder

    class IDisplay_takeScreenShotToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_takeScreenShotToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_takeScreenShotToArrayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_takeScreenShotToArrayResponse")
            kw["aname"] = "_IDisplay_takeScreenShotToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDisplay_takeScreenShotToArrayResponse_Holder"
            self.pyclass = Holder

    class IDisplay_takeScreenShotPNGToArray_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_takeScreenShotPNGToArray"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_takeScreenShotPNGToArray_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="width", aname="_width", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="height", aname="_height", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_takeScreenShotPNGToArray")
            kw["aname"] = "_IDisplay_takeScreenShotPNGToArray"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    self._width = None
                    self._height = None
                    return
            Holder.__name__ = "IDisplay_takeScreenShotPNGToArray_Holder"
            self.pyclass = Holder

    class IDisplay_takeScreenShotPNGToArrayResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_takeScreenShotPNGToArrayResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_takeScreenShotPNGToArrayResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_takeScreenShotPNGToArrayResponse")
            kw["aname"] = "_IDisplay_takeScreenShotPNGToArrayResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IDisplay_takeScreenShotPNGToArrayResponse_Holder"
            self.pyclass = Holder

    class IDisplay_invalidateAndUpdate_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_invalidateAndUpdate"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_invalidateAndUpdate_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_invalidateAndUpdate")
            kw["aname"] = "_IDisplay_invalidateAndUpdate"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IDisplay_invalidateAndUpdate_Holder"
            self.pyclass = Holder

    class IDisplay_invalidateAndUpdateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_invalidateAndUpdateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_invalidateAndUpdateResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_invalidateAndUpdateResponse")
            kw["aname"] = "_IDisplay_invalidateAndUpdateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_invalidateAndUpdateResponse_Holder"
            self.pyclass = Holder

    class IDisplay_resizeCompleted_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_resizeCompleted"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_resizeCompleted_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="screenId", aname="_screenId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_resizeCompleted")
            kw["aname"] = "_IDisplay_resizeCompleted"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._screenId = None
                    return
            Holder.__name__ = "IDisplay_resizeCompleted_Holder"
            self.pyclass = Holder

    class IDisplay_resizeCompletedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IDisplay_resizeCompletedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IDisplay_resizeCompletedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IDisplay_resizeCompletedResponse")
            kw["aname"] = "_IDisplay_resizeCompletedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IDisplay_resizeCompletedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAdapterType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAdapterType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAdapterType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAdapterType")
            kw["aname"] = "_INetworkAdapter_getAdapterType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getAdapterType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAdapterTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAdapterTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAdapterTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NetworkAdapterType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAdapterTypeResponse")
            kw["aname"] = "_INetworkAdapter_getAdapterTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getAdapterTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAdapterType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAdapterType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAdapterType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAdapterType",lazy=False)(pname="adapterType", aname="_adapterType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAdapterType")
            kw["aname"] = "_INetworkAdapter_setAdapterType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._adapterType = None
                    return
            Holder.__name__ = "INetworkAdapter_setAdapterType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAdapterTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAdapterTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAdapterTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAdapterTypeResponse")
            kw["aname"] = "_INetworkAdapter_setAdapterTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setAdapterTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getSlot")
            kw["aname"] = "_INetworkAdapter_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getSlot_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getSlotResponse")
            kw["aname"] = "_INetworkAdapter_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getSlotResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getEnabled")
            kw["aname"] = "_INetworkAdapter_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getEnabledResponse")
            kw["aname"] = "_INetworkAdapter_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setEnabled")
            kw["aname"] = "_INetworkAdapter_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "INetworkAdapter_setEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setEnabledResponse")
            kw["aname"] = "_INetworkAdapter_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getMACAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getMACAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getMACAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getMACAddress")
            kw["aname"] = "_INetworkAdapter_getMACAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getMACAddress_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getMACAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getMACAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getMACAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getMACAddressResponse")
            kw["aname"] = "_INetworkAdapter_getMACAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getMACAddressResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setMACAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setMACAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setMACAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="MACAddress", aname="_MACAddress", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setMACAddress")
            kw["aname"] = "_INetworkAdapter_setMACAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._MACAddress = None
                    return
            Holder.__name__ = "INetworkAdapter_setMACAddress_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setMACAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setMACAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setMACAddressResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setMACAddressResponse")
            kw["aname"] = "_INetworkAdapter_setMACAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setMACAddressResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAttachmentType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAttachmentType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAttachmentType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAttachmentType")
            kw["aname"] = "_INetworkAdapter_getAttachmentType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getAttachmentType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getAttachmentTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getAttachmentTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getAttachmentTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NetworkAttachmentType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getAttachmentTypeResponse")
            kw["aname"] = "_INetworkAdapter_getAttachmentTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getAttachmentTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAttachmentType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAttachmentType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAttachmentType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAttachmentType",lazy=False)(pname="attachmentType", aname="_attachmentType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAttachmentType")
            kw["aname"] = "_INetworkAdapter_setAttachmentType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._attachmentType = None
                    return
            Holder.__name__ = "INetworkAdapter_setAttachmentType_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setAttachmentTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setAttachmentTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setAttachmentTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setAttachmentTypeResponse")
            kw["aname"] = "_INetworkAdapter_setAttachmentTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setAttachmentTypeResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBridgedInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBridgedInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBridgedInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBridgedInterface")
            kw["aname"] = "_INetworkAdapter_getBridgedInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getBridgedInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBridgedInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBridgedInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBridgedInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBridgedInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_getBridgedInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getBridgedInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBridgedInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBridgedInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBridgedInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bridgedInterface", aname="_bridgedInterface", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBridgedInterface")
            kw["aname"] = "_INetworkAdapter_setBridgedInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bridgedInterface = None
                    return
            Holder.__name__ = "INetworkAdapter_setBridgedInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBridgedInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBridgedInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBridgedInterfaceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBridgedInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_setBridgedInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setBridgedInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getHostOnlyInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getHostOnlyInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getHostOnlyInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getHostOnlyInterface")
            kw["aname"] = "_INetworkAdapter_getHostOnlyInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getHostOnlyInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getHostOnlyInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getHostOnlyInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getHostOnlyInterfaceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getHostOnlyInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_getHostOnlyInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getHostOnlyInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setHostOnlyInterface_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setHostOnlyInterface"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setHostOnlyInterface_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostOnlyInterface", aname="_hostOnlyInterface", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setHostOnlyInterface")
            kw["aname"] = "_INetworkAdapter_setHostOnlyInterface"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostOnlyInterface = None
                    return
            Holder.__name__ = "INetworkAdapter_setHostOnlyInterface_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setHostOnlyInterfaceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setHostOnlyInterfaceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setHostOnlyInterfaceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setHostOnlyInterfaceResponse")
            kw["aname"] = "_INetworkAdapter_setHostOnlyInterfaceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setHostOnlyInterfaceResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getInternalNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getInternalNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getInternalNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getInternalNetwork")
            kw["aname"] = "_INetworkAdapter_getInternalNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getInternalNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getInternalNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getInternalNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getInternalNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getInternalNetworkResponse")
            kw["aname"] = "_INetworkAdapter_getInternalNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getInternalNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setInternalNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setInternalNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setInternalNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="internalNetwork", aname="_internalNetwork", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setInternalNetwork")
            kw["aname"] = "_INetworkAdapter_setInternalNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._internalNetwork = None
                    return
            Holder.__name__ = "INetworkAdapter_setInternalNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setInternalNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setInternalNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setInternalNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setInternalNetworkResponse")
            kw["aname"] = "_INetworkAdapter_setInternalNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setInternalNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNATNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNATNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNATNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNATNetwork")
            kw["aname"] = "_INetworkAdapter_getNATNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getNATNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNATNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNATNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNATNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNATNetworkResponse")
            kw["aname"] = "_INetworkAdapter_getNATNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getNATNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setNATNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setNATNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setNATNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="NATNetwork", aname="_NATNetwork", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setNATNetwork")
            kw["aname"] = "_INetworkAdapter_setNATNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._NATNetwork = None
                    return
            Holder.__name__ = "INetworkAdapter_setNATNetwork_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setNATNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setNATNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setNATNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setNATNetworkResponse")
            kw["aname"] = "_INetworkAdapter_setNATNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setNATNetworkResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getGenericDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getGenericDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getGenericDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getGenericDriver")
            kw["aname"] = "_INetworkAdapter_getGenericDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getGenericDriver_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getGenericDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getGenericDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getGenericDriverResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getGenericDriverResponse")
            kw["aname"] = "_INetworkAdapter_getGenericDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getGenericDriverResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setGenericDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setGenericDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setGenericDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="genericDriver", aname="_genericDriver", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setGenericDriver")
            kw["aname"] = "_INetworkAdapter_setGenericDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._genericDriver = None
                    return
            Holder.__name__ = "INetworkAdapter_setGenericDriver_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setGenericDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setGenericDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setGenericDriverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setGenericDriverResponse")
            kw["aname"] = "_INetworkAdapter_setGenericDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setGenericDriverResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getCableConnected_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getCableConnected"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getCableConnected_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getCableConnected")
            kw["aname"] = "_INetworkAdapter_getCableConnected"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getCableConnected_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getCableConnectedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getCableConnectedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getCableConnectedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getCableConnectedResponse")
            kw["aname"] = "_INetworkAdapter_getCableConnectedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getCableConnectedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setCableConnected_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setCableConnected"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setCableConnected_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="cableConnected", aname="_cableConnected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setCableConnected")
            kw["aname"] = "_INetworkAdapter_setCableConnected"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._cableConnected = None
                    return
            Holder.__name__ = "INetworkAdapter_setCableConnected_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setCableConnectedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setCableConnectedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setCableConnectedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setCableConnectedResponse")
            kw["aname"] = "_INetworkAdapter_setCableConnectedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setCableConnectedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getLineSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getLineSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getLineSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getLineSpeed")
            kw["aname"] = "_INetworkAdapter_getLineSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getLineSpeed_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getLineSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getLineSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getLineSpeedResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getLineSpeedResponse")
            kw["aname"] = "_INetworkAdapter_getLineSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getLineSpeedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setLineSpeed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setLineSpeed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setLineSpeed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="lineSpeed", aname="_lineSpeed", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setLineSpeed")
            kw["aname"] = "_INetworkAdapter_setLineSpeed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._lineSpeed = None
                    return
            Holder.__name__ = "INetworkAdapter_setLineSpeed_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setLineSpeedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setLineSpeedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setLineSpeedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setLineSpeedResponse")
            kw["aname"] = "_INetworkAdapter_setLineSpeedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setLineSpeedResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPromiscModePolicy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPromiscModePolicy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPromiscModePolicy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPromiscModePolicy")
            kw["aname"] = "_INetworkAdapter_getPromiscModePolicy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getPromiscModePolicy_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPromiscModePolicyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPromiscModePolicyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPromiscModePolicyResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NetworkAdapterPromiscModePolicy",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPromiscModePolicyResponse")
            kw["aname"] = "_INetworkAdapter_getPromiscModePolicyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getPromiscModePolicyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setPromiscModePolicy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setPromiscModePolicy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setPromiscModePolicy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NetworkAdapterPromiscModePolicy",lazy=False)(pname="promiscModePolicy", aname="_promiscModePolicy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setPromiscModePolicy")
            kw["aname"] = "_INetworkAdapter_setPromiscModePolicy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._promiscModePolicy = None
                    return
            Holder.__name__ = "INetworkAdapter_setPromiscModePolicy_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setPromiscModePolicyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setPromiscModePolicyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setPromiscModePolicyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setPromiscModePolicyResponse")
            kw["aname"] = "_INetworkAdapter_setPromiscModePolicyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setPromiscModePolicyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceEnabled")
            kw["aname"] = "_INetworkAdapter_getTraceEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceEnabledResponse")
            kw["aname"] = "_INetworkAdapter_getTraceEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="traceEnabled", aname="_traceEnabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceEnabled")
            kw["aname"] = "_INetworkAdapter_setTraceEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._traceEnabled = None
                    return
            Holder.__name__ = "INetworkAdapter_setTraceEnabled_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceEnabledResponse")
            kw["aname"] = "_INetworkAdapter_setTraceEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setTraceEnabledResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceFile")
            kw["aname"] = "_INetworkAdapter_getTraceFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceFile_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getTraceFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getTraceFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getTraceFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getTraceFileResponse")
            kw["aname"] = "_INetworkAdapter_getTraceFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getTraceFileResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="traceFile", aname="_traceFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceFile")
            kw["aname"] = "_INetworkAdapter_setTraceFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._traceFile = None
                    return
            Holder.__name__ = "INetworkAdapter_setTraceFile_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setTraceFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setTraceFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setTraceFileResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setTraceFileResponse")
            kw["aname"] = "_INetworkAdapter_setTraceFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setTraceFileResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNatDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNatDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNatDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNatDriver")
            kw["aname"] = "_INetworkAdapter_getNatDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getNatDriver_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getNatDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getNatDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getNatDriverResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getNatDriverResponse")
            kw["aname"] = "_INetworkAdapter_getNatDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getNatDriverResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBootPriority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBootPriority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBootPriority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBootPriority")
            kw["aname"] = "_INetworkAdapter_getBootPriority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getBootPriority_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBootPriorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBootPriorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBootPriorityResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBootPriorityResponse")
            kw["aname"] = "_INetworkAdapter_getBootPriorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getBootPriorityResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBootPriority_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBootPriority"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBootPriority_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="bootPriority", aname="_bootPriority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBootPriority")
            kw["aname"] = "_INetworkAdapter_setBootPriority"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bootPriority = None
                    return
            Holder.__name__ = "INetworkAdapter_setBootPriority_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBootPriorityResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBootPriorityResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBootPriorityResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBootPriorityResponse")
            kw["aname"] = "_INetworkAdapter_setBootPriorityResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setBootPriorityResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBandwidthGroup")
            kw["aname"] = "_INetworkAdapter_getBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapter_getBandwidthGroup_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getBandwidthGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getBandwidthGroupResponse")
            kw["aname"] = "_INetworkAdapter_getBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="bandwidthGroup", aname="_bandwidthGroup", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBandwidthGroup")
            kw["aname"] = "_INetworkAdapter_setBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._bandwidthGroup = None
                    return
            Holder.__name__ = "INetworkAdapter_setBandwidthGroup_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setBandwidthGroupResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setBandwidthGroupResponse")
            kw["aname"] = "_INetworkAdapter_setBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getProperty")
            kw["aname"] = "_INetworkAdapter_getProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "INetworkAdapter_getProperty_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPropertyResponse")
            kw["aname"] = "_INetworkAdapter_getPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapter_getPropertyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setProperty")
            kw["aname"] = "_INetworkAdapter_setProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "INetworkAdapter_setProperty_Holder"
            self.pyclass = Holder

    class INetworkAdapter_setPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_setPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_setPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_setPropertyResponse")
            kw["aname"] = "_INetworkAdapter_setPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INetworkAdapter_setPropertyResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="names", aname="_names", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getProperties")
            kw["aname"] = "_INetworkAdapter_getProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._names = None
                    return
            Holder.__name__ = "INetworkAdapter_getProperties_Holder"
            self.pyclass = Holder

    class INetworkAdapter_getPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapter_getPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapter_getPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnNames", aname="_returnNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapter_getPropertiesResponse")
            kw["aname"] = "_INetworkAdapter_getPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnNames = []
                    self._returnval = []
                    return
            Holder.__name__ = "INetworkAdapter_getPropertiesResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getSlot")
            kw["aname"] = "_ISerialPort_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getSlot_Holder"
            self.pyclass = Holder

    class ISerialPort_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getSlotResponse")
            kw["aname"] = "_ISerialPort_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getSlotResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getEnabled")
            kw["aname"] = "_ISerialPort_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getEnabled_Holder"
            self.pyclass = Holder

    class ISerialPort_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getEnabledResponse")
            kw["aname"] = "_ISerialPort_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getEnabledResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setEnabled")
            kw["aname"] = "_ISerialPort_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "ISerialPort_setEnabled_Holder"
            self.pyclass = Holder

    class ISerialPort_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setEnabledResponse")
            kw["aname"] = "_ISerialPort_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setEnabledResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIOBase")
            kw["aname"] = "_ISerialPort_getIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getIOBase_Holder"
            self.pyclass = Holder

    class ISerialPort_getIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIOBaseResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIOBaseResponse")
            kw["aname"] = "_ISerialPort_getIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getIOBaseResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IOBase", aname="_IOBase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIOBase")
            kw["aname"] = "_ISerialPort_setIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOBase = None
                    return
            Holder.__name__ = "ISerialPort_setIOBase_Holder"
            self.pyclass = Holder

    class ISerialPort_setIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIOBaseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIOBaseResponse")
            kw["aname"] = "_ISerialPort_setIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setIOBaseResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIRQ")
            kw["aname"] = "_ISerialPort_getIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getIRQ_Holder"
            self.pyclass = Holder

    class ISerialPort_getIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getIRQResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getIRQResponse")
            kw["aname"] = "_ISerialPort_getIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getIRQResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IRQ", aname="_IRQ", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIRQ")
            kw["aname"] = "_ISerialPort_setIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IRQ = None
                    return
            Holder.__name__ = "ISerialPort_setIRQ_Holder"
            self.pyclass = Holder

    class ISerialPort_setIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setIRQResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setIRQResponse")
            kw["aname"] = "_ISerialPort_setIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setIRQResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getHostMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getHostMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getHostMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getHostMode")
            kw["aname"] = "_ISerialPort_getHostMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getHostMode_Holder"
            self.pyclass = Holder

    class ISerialPort_getHostModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getHostModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getHostModeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","PortMode",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getHostModeResponse")
            kw["aname"] = "_ISerialPort_getHostModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getHostModeResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setHostMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setHostMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setHostMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","PortMode",lazy=False)(pname="hostMode", aname="_hostMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setHostMode")
            kw["aname"] = "_ISerialPort_setHostMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostMode = None
                    return
            Holder.__name__ = "ISerialPort_setHostMode_Holder"
            self.pyclass = Holder

    class ISerialPort_setHostModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setHostModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setHostModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setHostModeResponse")
            kw["aname"] = "_ISerialPort_setHostModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setHostModeResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getServer")
            kw["aname"] = "_ISerialPort_getServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getServer_Holder"
            self.pyclass = Holder

    class ISerialPort_getServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getServerResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getServerResponse")
            kw["aname"] = "_ISerialPort_getServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getServerResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="server", aname="_server", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setServer")
            kw["aname"] = "_ISerialPort_setServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._server = None
                    return
            Holder.__name__ = "ISerialPort_setServer_Holder"
            self.pyclass = Holder

    class ISerialPort_setServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setServerResponse")
            kw["aname"] = "_ISerialPort_setServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setServerResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getPath")
            kw["aname"] = "_ISerialPort_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPort_getPath_Holder"
            self.pyclass = Holder

    class ISerialPort_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_getPathResponse")
            kw["aname"] = "_ISerialPort_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPort_getPathResponse_Holder"
            self.pyclass = Holder

    class ISerialPort_setPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setPath")
            kw["aname"] = "_ISerialPort_setPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "ISerialPort_setPath_Holder"
            self.pyclass = Holder

    class ISerialPort_setPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPort_setPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPort_setPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPort_setPathResponse")
            kw["aname"] = "_ISerialPort_setPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISerialPort_setPathResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getSlot")
            kw["aname"] = "_IParallelPort_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getSlot_Holder"
            self.pyclass = Holder

    class IParallelPort_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getSlotResponse")
            kw["aname"] = "_IParallelPort_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getSlotResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getEnabled")
            kw["aname"] = "_IParallelPort_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getEnabled_Holder"
            self.pyclass = Holder

    class IParallelPort_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getEnabledResponse")
            kw["aname"] = "_IParallelPort_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setEnabled")
            kw["aname"] = "_IParallelPort_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IParallelPort_setEnabled_Holder"
            self.pyclass = Holder

    class IParallelPort_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setEnabledResponse")
            kw["aname"] = "_IParallelPort_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIOBase")
            kw["aname"] = "_IParallelPort_getIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getIOBase_Holder"
            self.pyclass = Holder

    class IParallelPort_getIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIOBaseResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIOBaseResponse")
            kw["aname"] = "_IParallelPort_getIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getIOBaseResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setIOBase_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIOBase"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIOBase_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IOBase", aname="_IOBase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIOBase")
            kw["aname"] = "_IParallelPort_setIOBase"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IOBase = None
                    return
            Holder.__name__ = "IParallelPort_setIOBase_Holder"
            self.pyclass = Holder

    class IParallelPort_setIOBaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIOBaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIOBaseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIOBaseResponse")
            kw["aname"] = "_IParallelPort_setIOBaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setIOBaseResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIRQ")
            kw["aname"] = "_IParallelPort_getIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getIRQ_Holder"
            self.pyclass = Holder

    class IParallelPort_getIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getIRQResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getIRQResponse")
            kw["aname"] = "_IParallelPort_getIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getIRQResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setIRQ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIRQ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIRQ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="IRQ", aname="_IRQ", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIRQ")
            kw["aname"] = "_IParallelPort_setIRQ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._IRQ = None
                    return
            Holder.__name__ = "IParallelPort_setIRQ_Holder"
            self.pyclass = Holder

    class IParallelPort_setIRQResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setIRQResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setIRQResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setIRQResponse")
            kw["aname"] = "_IParallelPort_setIRQResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setIRQResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_getPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getPath")
            kw["aname"] = "_IParallelPort_getPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPort_getPath_Holder"
            self.pyclass = Holder

    class IParallelPort_getPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_getPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_getPathResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_getPathResponse")
            kw["aname"] = "_IParallelPort_getPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPort_getPathResponse_Holder"
            self.pyclass = Holder

    class IParallelPort_setPath_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setPath"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setPath_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="path", aname="_path", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setPath")
            kw["aname"] = "_IParallelPort_setPath"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._path = None
                    return
            Holder.__name__ = "IParallelPort_setPath_Holder"
            self.pyclass = Holder

    class IParallelPort_setPathResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPort_setPathResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPort_setPathResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPort_setPathResponse")
            kw["aname"] = "_IParallelPort_setPathResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IParallelPort_setPathResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getEnabled")
            kw["aname"] = "_IUSBController_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getEnabled_Holder"
            self.pyclass = Holder

    class IUSBController_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getEnabledResponse")
            kw["aname"] = "_IUSBController_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IUSBController_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setEnabled")
            kw["aname"] = "_IUSBController_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IUSBController_setEnabled_Holder"
            self.pyclass = Holder

    class IUSBController_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setEnabledResponse")
            kw["aname"] = "_IUSBController_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBController_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getEnabledEhci_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getEnabledEhci"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getEnabledEhci_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getEnabledEhci")
            kw["aname"] = "_IUSBController_getEnabledEhci"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getEnabledEhci_Holder"
            self.pyclass = Holder

    class IUSBController_getEnabledEhciResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getEnabledEhciResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getEnabledEhciResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getEnabledEhciResponse")
            kw["aname"] = "_IUSBController_getEnabledEhciResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getEnabledEhciResponse_Holder"
            self.pyclass = Holder

    class IUSBController_setEnabledEhci_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setEnabledEhci"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setEnabledEhci_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabledEhci", aname="_enabledEhci", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setEnabledEhci")
            kw["aname"] = "_IUSBController_setEnabledEhci"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabledEhci = None
                    return
            Holder.__name__ = "IUSBController_setEnabledEhci_Holder"
            self.pyclass = Holder

    class IUSBController_setEnabledEhciResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_setEnabledEhciResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_setEnabledEhciResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_setEnabledEhciResponse")
            kw["aname"] = "_IUSBController_setEnabledEhciResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBController_setEnabledEhciResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getProxyAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getProxyAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getProxyAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getProxyAvailable")
            kw["aname"] = "_IUSBController_getProxyAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getProxyAvailable_Holder"
            self.pyclass = Holder

    class IUSBController_getProxyAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getProxyAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getProxyAvailableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getProxyAvailableResponse")
            kw["aname"] = "_IUSBController_getProxyAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getProxyAvailableResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getUSBStandard_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getUSBStandard"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getUSBStandard_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getUSBStandard")
            kw["aname"] = "_IUSBController_getUSBStandard"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getUSBStandard_Holder"
            self.pyclass = Holder

    class IUSBController_getUSBStandardResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getUSBStandardResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getUSBStandardResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getUSBStandardResponse")
            kw["aname"] = "_IUSBController_getUSBStandardResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_getUSBStandardResponse_Holder"
            self.pyclass = Holder

    class IUSBController_getDeviceFilters_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getDeviceFilters"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getDeviceFilters_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getDeviceFilters")
            kw["aname"] = "_IUSBController_getDeviceFilters"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBController_getDeviceFilters_Holder"
            self.pyclass = Holder

    class IUSBController_getDeviceFiltersResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_getDeviceFiltersResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_getDeviceFiltersResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_getDeviceFiltersResponse")
            kw["aname"] = "_IUSBController_getDeviceFiltersResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IUSBController_getDeviceFiltersResponse_Holder"
            self.pyclass = Holder

    class IUSBController_createDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_createDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_createDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_createDeviceFilter")
            kw["aname"] = "_IUSBController_createDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IUSBController_createDeviceFilter_Holder"
            self.pyclass = Holder

    class IUSBController_createDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_createDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_createDeviceFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_createDeviceFilterResponse")
            kw["aname"] = "_IUSBController_createDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_createDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IUSBController_insertDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_insertDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_insertDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="filter", aname="_filter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_insertDeviceFilter")
            kw["aname"] = "_IUSBController_insertDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    self._filter = None
                    return
            Holder.__name__ = "IUSBController_insertDeviceFilter_Holder"
            self.pyclass = Holder

    class IUSBController_insertDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_insertDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_insertDeviceFilterResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_insertDeviceFilterResponse")
            kw["aname"] = "_IUSBController_insertDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBController_insertDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IUSBController_removeDeviceFilter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_removeDeviceFilter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_removeDeviceFilter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="position", aname="_position", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_removeDeviceFilter")
            kw["aname"] = "_IUSBController_removeDeviceFilter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._position = None
                    return
            Holder.__name__ = "IUSBController_removeDeviceFilter_Holder"
            self.pyclass = Holder

    class IUSBController_removeDeviceFilterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBController_removeDeviceFilterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBController_removeDeviceFilterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBController_removeDeviceFilterResponse")
            kw["aname"] = "_IUSBController_removeDeviceFilterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBController_removeDeviceFilterResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getId")
            kw["aname"] = "_IUSBDevice_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getId_Holder"
            self.pyclass = Holder

    class IUSBDevice_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getIdResponse")
            kw["aname"] = "_IUSBDevice_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVendorId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVendorId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVendorId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVendorId")
            kw["aname"] = "_IUSBDevice_getVendorId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getVendorId_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVendorIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVendorIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVendorIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVendorIdResponse")
            kw["aname"] = "_IUSBDevice_getVendorIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getVendorIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProductId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProductId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProductId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProductId")
            kw["aname"] = "_IUSBDevice_getProductId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getProductId_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProductIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProductIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProductIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProductIdResponse")
            kw["aname"] = "_IUSBDevice_getProductIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getProductIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRevision")
            kw["aname"] = "_IUSBDevice_getRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getRevision_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRevisionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRevisionResponse")
            kw["aname"] = "_IUSBDevice_getRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getRevisionResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getManufacturer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getManufacturer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getManufacturer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getManufacturer")
            kw["aname"] = "_IUSBDevice_getManufacturer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getManufacturer_Holder"
            self.pyclass = Holder

    class IUSBDevice_getManufacturerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getManufacturerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getManufacturerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getManufacturerResponse")
            kw["aname"] = "_IUSBDevice_getManufacturerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getManufacturerResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProduct_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProduct"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProduct_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProduct")
            kw["aname"] = "_IUSBDevice_getProduct"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getProduct_Holder"
            self.pyclass = Holder

    class IUSBDevice_getProductResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getProductResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getProductResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getProductResponse")
            kw["aname"] = "_IUSBDevice_getProductResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getProductResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getSerialNumber")
            kw["aname"] = "_IUSBDevice_getSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getSerialNumber_Holder"
            self.pyclass = Holder

    class IUSBDevice_getSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getSerialNumberResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getSerialNumberResponse")
            kw["aname"] = "_IUSBDevice_getSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getSerialNumberResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getAddress_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getAddress"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getAddress_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getAddress")
            kw["aname"] = "_IUSBDevice_getAddress"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getAddress_Holder"
            self.pyclass = Holder

    class IUSBDevice_getAddressResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getAddressResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getAddressResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getAddressResponse")
            kw["aname"] = "_IUSBDevice_getAddressResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getAddressResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPort")
            kw["aname"] = "_IUSBDevice_getPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getPort_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPortResponse")
            kw["aname"] = "_IUSBDevice_getPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getPortResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVersion")
            kw["aname"] = "_IUSBDevice_getVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getVersion_Holder"
            self.pyclass = Holder

    class IUSBDevice_getVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getVersionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getVersionResponse")
            kw["aname"] = "_IUSBDevice_getVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getVersionResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPortVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPortVersion"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPortVersion_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPortVersion")
            kw["aname"] = "_IUSBDevice_getPortVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getPortVersion_Holder"
            self.pyclass = Holder

    class IUSBDevice_getPortVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getPortVersionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getPortVersionResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedShort(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getPortVersionResponse")
            kw["aname"] = "_IUSBDevice_getPortVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getPortVersionResponse_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRemote_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRemote"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRemote_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRemote")
            kw["aname"] = "_IUSBDevice_getRemote"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDevice_getRemote_Holder"
            self.pyclass = Holder

    class IUSBDevice_getRemoteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDevice_getRemoteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDevice_getRemoteResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDevice_getRemoteResponse")
            kw["aname"] = "_IUSBDevice_getRemoteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDevice_getRemoteResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getName")
            kw["aname"] = "_IUSBDeviceFilter_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getName_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getNameResponse")
            kw["aname"] = "_IUSBDeviceFilter_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getNameResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setName")
            kw["aname"] = "_IUSBDeviceFilter_setName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setName_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setNameResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setNameResponse")
            kw["aname"] = "_IUSBDeviceFilter_setNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setNameResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getActive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getActive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getActive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getActive")
            kw["aname"] = "_IUSBDeviceFilter_getActive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getActive_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getActiveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getActiveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getActiveResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getActiveResponse")
            kw["aname"] = "_IUSBDeviceFilter_getActiveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getActiveResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setActive_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setActive"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setActive_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setActive")
            kw["aname"] = "_IUSBDeviceFilter_setActive"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._active = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setActive_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setActiveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setActiveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setActiveResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setActiveResponse")
            kw["aname"] = "_IUSBDeviceFilter_setActiveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setActiveResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getVendorId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getVendorId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getVendorId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getVendorId")
            kw["aname"] = "_IUSBDeviceFilter_getVendorId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getVendorId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getVendorIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getVendorIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getVendorIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getVendorIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_getVendorIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getVendorIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setVendorId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setVendorId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setVendorId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="vendorId", aname="_vendorId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setVendorId")
            kw["aname"] = "_IUSBDeviceFilter_setVendorId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._vendorId = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setVendorId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setVendorIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setVendorIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setVendorIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setVendorIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_setVendorIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setVendorIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProductId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProductId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProductId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProductId")
            kw["aname"] = "_IUSBDeviceFilter_getProductId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProductId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProductIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProductIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProductIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProductIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_getProductIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProductIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProductId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProductId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProductId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="productId", aname="_productId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProductId")
            kw["aname"] = "_IUSBDeviceFilter_setProductId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._productId = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProductId_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProductIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProductIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProductIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProductIdResponse")
            kw["aname"] = "_IUSBDeviceFilter_setProductIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProductIdResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRevision")
            kw["aname"] = "_IUSBDeviceFilter_getRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRevision_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRevisionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRevisionResponse")
            kw["aname"] = "_IUSBDeviceFilter_getRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRevisionResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRevision_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRevision"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRevision_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="revision", aname="_revision", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRevision")
            kw["aname"] = "_IUSBDeviceFilter_setRevision"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._revision = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRevision_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRevisionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRevisionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRevisionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRevisionResponse")
            kw["aname"] = "_IUSBDeviceFilter_setRevisionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRevisionResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getManufacturer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getManufacturer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getManufacturer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getManufacturer")
            kw["aname"] = "_IUSBDeviceFilter_getManufacturer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getManufacturer_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getManufacturerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getManufacturerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getManufacturerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getManufacturerResponse")
            kw["aname"] = "_IUSBDeviceFilter_getManufacturerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getManufacturerResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setManufacturer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setManufacturer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setManufacturer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="manufacturer", aname="_manufacturer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setManufacturer")
            kw["aname"] = "_IUSBDeviceFilter_setManufacturer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._manufacturer = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setManufacturer_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setManufacturerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setManufacturerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setManufacturerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setManufacturerResponse")
            kw["aname"] = "_IUSBDeviceFilter_setManufacturerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setManufacturerResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProduct_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProduct"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProduct_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProduct")
            kw["aname"] = "_IUSBDeviceFilter_getProduct"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProduct_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getProductResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getProductResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getProductResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getProductResponse")
            kw["aname"] = "_IUSBDeviceFilter_getProductResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getProductResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProduct_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProduct"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProduct_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="product", aname="_product", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProduct")
            kw["aname"] = "_IUSBDeviceFilter_setProduct"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._product = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProduct_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setProductResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setProductResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setProductResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setProductResponse")
            kw["aname"] = "_IUSBDeviceFilter_setProductResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setProductResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getSerialNumber")
            kw["aname"] = "_IUSBDeviceFilter_getSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getSerialNumber_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getSerialNumberResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getSerialNumberResponse")
            kw["aname"] = "_IUSBDeviceFilter_getSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getSerialNumberResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setSerialNumber_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setSerialNumber"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setSerialNumber_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="serialNumber", aname="_serialNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setSerialNumber")
            kw["aname"] = "_IUSBDeviceFilter_setSerialNumber"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._serialNumber = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setSerialNumber_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setSerialNumberResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setSerialNumberResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setSerialNumberResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setSerialNumberResponse")
            kw["aname"] = "_IUSBDeviceFilter_setSerialNumberResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setSerialNumberResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getPort")
            kw["aname"] = "_IUSBDeviceFilter_getPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getPort_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getPortResponse")
            kw["aname"] = "_IUSBDeviceFilter_getPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getPortResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="port", aname="_port", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setPort")
            kw["aname"] = "_IUSBDeviceFilter_setPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._port = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setPort_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setPortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setPortResponse")
            kw["aname"] = "_IUSBDeviceFilter_setPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setPortResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRemote_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRemote"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRemote_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRemote")
            kw["aname"] = "_IUSBDeviceFilter_getRemote"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRemote_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getRemoteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getRemoteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getRemoteResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getRemoteResponse")
            kw["aname"] = "_IUSBDeviceFilter_getRemoteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getRemoteResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRemote_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRemote"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRemote_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="remote", aname="_remote", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRemote")
            kw["aname"] = "_IUSBDeviceFilter_setRemote"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._remote = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRemote_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setRemoteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setRemoteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setRemoteResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setRemoteResponse")
            kw["aname"] = "_IUSBDeviceFilter_setRemoteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setRemoteResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getMaskedInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getMaskedInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getMaskedInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getMaskedInterfaces")
            kw["aname"] = "_IUSBDeviceFilter_getMaskedInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getMaskedInterfaces_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_getMaskedInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_getMaskedInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_getMaskedInterfacesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_getMaskedInterfacesResponse")
            kw["aname"] = "_IUSBDeviceFilter_getMaskedInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_getMaskedInterfacesResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setMaskedInterfaces_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setMaskedInterfaces"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setMaskedInterfaces_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maskedInterfaces", aname="_maskedInterfaces", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setMaskedInterfaces")
            kw["aname"] = "_IUSBDeviceFilter_setMaskedInterfaces"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maskedInterfaces = None
                    return
            Holder.__name__ = "IUSBDeviceFilter_setMaskedInterfaces_Holder"
            self.pyclass = Holder

    class IUSBDeviceFilter_setMaskedInterfacesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceFilter_setMaskedInterfacesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceFilter_setMaskedInterfacesResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceFilter_setMaskedInterfacesResponse")
            kw["aname"] = "_IUSBDeviceFilter_setMaskedInterfacesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IUSBDeviceFilter_setMaskedInterfacesResponse_Holder"
            self.pyclass = Holder

    class IHostUSBDevice_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDevice_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDevice_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDevice_getState")
            kw["aname"] = "_IHostUSBDevice_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostUSBDevice_getState_Holder"
            self.pyclass = Holder

    class IHostUSBDevice_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDevice_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDevice_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","USBDeviceState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDevice_getStateResponse")
            kw["aname"] = "_IHostUSBDevice_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostUSBDevice_getStateResponse_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_getAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_getAction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_getAction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_getAction")
            kw["aname"] = "_IHostUSBDeviceFilter_getAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_getAction_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_getActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_getActionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_getActionResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","USBDeviceFilterAction",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_getActionResponse")
            kw["aname"] = "_IHostUSBDeviceFilter_getActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_getActionResponse_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_setAction_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_setAction"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_setAction_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","USBDeviceFilterAction",lazy=False)(pname="action", aname="_action", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_setAction")
            kw["aname"] = "_IHostUSBDeviceFilter_setAction"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._action = None
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_setAction_Holder"
            self.pyclass = Holder

    class IHostUSBDeviceFilter_setActionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostUSBDeviceFilter_setActionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostUSBDeviceFilter_setActionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IHostUSBDeviceFilter_setActionResponse")
            kw["aname"] = "_IHostUSBDeviceFilter_setActionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IHostUSBDeviceFilter_setActionResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabled")
            kw["aname"] = "_IAudioAdapter_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabled_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getEnabledResponse")
            kw["aname"] = "_IAudioAdapter_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabled")
            kw["aname"] = "_IAudioAdapter_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IAudioAdapter_setEnabled_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setEnabledResponse")
            kw["aname"] = "_IAudioAdapter_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioController")
            kw["aname"] = "_IAudioAdapter_getAudioController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioController_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioControllerResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioControllerType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioControllerResponse")
            kw["aname"] = "_IAudioAdapter_getAudioControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioControllerResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioController_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioController"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioController_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioControllerType",lazy=False)(pname="audioController", aname="_audioController", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioController")
            kw["aname"] = "_IAudioAdapter_setAudioController"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioController = None
                    return
            Holder.__name__ = "IAudioAdapter_setAudioController_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioControllerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioControllerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioControllerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioControllerResponse")
            kw["aname"] = "_IAudioAdapter_setAudioControllerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setAudioControllerResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioDriver")
            kw["aname"] = "_IAudioAdapter_getAudioDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioDriver_Holder"
            self.pyclass = Holder

    class IAudioAdapter_getAudioDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_getAudioDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_getAudioDriverResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AudioDriverType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_getAudioDriverResponse")
            kw["aname"] = "_IAudioAdapter_getAudioDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IAudioAdapter_getAudioDriverResponse_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioDriver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioDriver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioDriver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AudioDriverType",lazy=False)(pname="audioDriver", aname="_audioDriver", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioDriver")
            kw["aname"] = "_IAudioAdapter_setAudioDriver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._audioDriver = None
                    return
            Holder.__name__ = "IAudioAdapter_setAudioDriver_Holder"
            self.pyclass = Holder

    class IAudioAdapter_setAudioDriverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IAudioAdapter_setAudioDriverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IAudioAdapter_setAudioDriverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IAudioAdapter_setAudioDriverResponse")
            kw["aname"] = "_IAudioAdapter_setAudioDriverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IAudioAdapter_setAudioDriverResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getEnabled")
            kw["aname"] = "_IVRDEServer_getEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getEnabled_Holder"
            self.pyclass = Holder

    class IVRDEServer_getEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getEnabledResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getEnabledResponse")
            kw["aname"] = "_IVRDEServer_getEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getEnabledResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setEnabled_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setEnabled"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setEnabled_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="enabled", aname="_enabled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setEnabled")
            kw["aname"] = "_IVRDEServer_setEnabled"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._enabled = None
                    return
            Holder.__name__ = "IVRDEServer_setEnabled_Holder"
            self.pyclass = Holder

    class IVRDEServer_setEnabledResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setEnabledResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setEnabledResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setEnabledResponse")
            kw["aname"] = "_IVRDEServer_setEnabledResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setEnabledResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthType")
            kw["aname"] = "_IVRDEServer_getAuthType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthType_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","AuthType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthTypeResponse")
            kw["aname"] = "_IVRDEServer_getAuthTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthTypeResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","AuthType",lazy=False)(pname="authType", aname="_authType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthType")
            kw["aname"] = "_IVRDEServer_setAuthType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._authType = None
                    return
            Holder.__name__ = "IVRDEServer_setAuthType_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthTypeResponse")
            kw["aname"] = "_IVRDEServer_setAuthTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAuthTypeResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthTimeout")
            kw["aname"] = "_IVRDEServer_getAuthTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthTimeout_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthTimeoutResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthTimeoutResponse")
            kw["aname"] = "_IVRDEServer_getAuthTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthTimeoutResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthTimeout_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthTimeout"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthTimeout_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="authTimeout", aname="_authTimeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthTimeout")
            kw["aname"] = "_IVRDEServer_setAuthTimeout"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._authTimeout = None
                    return
            Holder.__name__ = "IVRDEServer_setAuthTimeout_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthTimeoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthTimeoutResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthTimeoutResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthTimeoutResponse")
            kw["aname"] = "_IVRDEServer_setAuthTimeoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAuthTimeoutResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAllowMultiConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAllowMultiConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAllowMultiConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAllowMultiConnection")
            kw["aname"] = "_IVRDEServer_getAllowMultiConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAllowMultiConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAllowMultiConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAllowMultiConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAllowMultiConnectionResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAllowMultiConnectionResponse")
            kw["aname"] = "_IVRDEServer_getAllowMultiConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAllowMultiConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAllowMultiConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAllowMultiConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAllowMultiConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="allowMultiConnection", aname="_allowMultiConnection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAllowMultiConnection")
            kw["aname"] = "_IVRDEServer_setAllowMultiConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._allowMultiConnection = None
                    return
            Holder.__name__ = "IVRDEServer_setAllowMultiConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAllowMultiConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAllowMultiConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAllowMultiConnectionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAllowMultiConnectionResponse")
            kw["aname"] = "_IVRDEServer_setAllowMultiConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAllowMultiConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getReuseSingleConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getReuseSingleConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getReuseSingleConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getReuseSingleConnection")
            kw["aname"] = "_IVRDEServer_getReuseSingleConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getReuseSingleConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_getReuseSingleConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getReuseSingleConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getReuseSingleConnectionResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getReuseSingleConnectionResponse")
            kw["aname"] = "_IVRDEServer_getReuseSingleConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getReuseSingleConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setReuseSingleConnection_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setReuseSingleConnection"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setReuseSingleConnection_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="reuseSingleConnection", aname="_reuseSingleConnection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setReuseSingleConnection")
            kw["aname"] = "_IVRDEServer_setReuseSingleConnection"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._reuseSingleConnection = None
                    return
            Holder.__name__ = "IVRDEServer_setReuseSingleConnection_Holder"
            self.pyclass = Holder

    class IVRDEServer_setReuseSingleConnectionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setReuseSingleConnectionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setReuseSingleConnectionResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setReuseSingleConnectionResponse")
            kw["aname"] = "_IVRDEServer_setReuseSingleConnectionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setReuseSingleConnectionResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEExtPack")
            kw["aname"] = "_IVRDEServer_getVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEExtPack_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEExtPackResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEExtPackResponse")
            kw["aname"] = "_IVRDEServer_getVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEExtPack_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEExtPack"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEExtPack_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="VRDEExtPack", aname="_VRDEExtPack", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEExtPack")
            kw["aname"] = "_IVRDEServer_setVRDEExtPack"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._VRDEExtPack = None
                    return
            Holder.__name__ = "IVRDEServer_setVRDEExtPack_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEExtPackResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEExtPackResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEExtPackResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEExtPackResponse")
            kw["aname"] = "_IVRDEServer_setVRDEExtPackResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setVRDEExtPackResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthLibrary")
            kw["aname"] = "_IVRDEServer_getAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthLibrary_Holder"
            self.pyclass = Holder

    class IVRDEServer_getAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getAuthLibraryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getAuthLibraryResponse")
            kw["aname"] = "_IVRDEServer_getAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthLibrary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthLibrary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthLibrary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="authLibrary", aname="_authLibrary", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthLibrary")
            kw["aname"] = "_IVRDEServer_setAuthLibrary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._authLibrary = None
                    return
            Holder.__name__ = "IVRDEServer_setAuthLibrary_Holder"
            self.pyclass = Holder

    class IVRDEServer_setAuthLibraryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setAuthLibraryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setAuthLibraryResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setAuthLibraryResponse")
            kw["aname"] = "_IVRDEServer_setAuthLibraryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setAuthLibraryResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEProperties_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEProperties"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEProperties_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEProperties")
            kw["aname"] = "_IVRDEServer_getVRDEProperties"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEProperties_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEPropertiesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEPropertiesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEPropertiesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEPropertiesResponse")
            kw["aname"] = "_IVRDEServer_getVRDEPropertiesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVRDEServer_getVRDEPropertiesResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="value", aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEProperty")
            kw["aname"] = "_IVRDEServer_setVRDEProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    self._value = None
                    return
            Holder.__name__ = "IVRDEServer_setVRDEProperty_Holder"
            self.pyclass = Holder

    class IVRDEServer_setVRDEPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_setVRDEPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_setVRDEPropertyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_setVRDEPropertyResponse")
            kw["aname"] = "_IVRDEServer_setVRDEPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVRDEServer_setVRDEPropertyResponse_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEProperty_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEProperty"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEProperty_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="key", aname="_key", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEProperty")
            kw["aname"] = "_IVRDEServer_getVRDEProperty"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._key = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEProperty_Holder"
            self.pyclass = Holder

    class IVRDEServer_getVRDEPropertyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVRDEServer_getVRDEPropertyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVRDEServer_getVRDEPropertyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVRDEServer_getVRDEPropertyResponse")
            kw["aname"] = "_IVRDEServer_getVRDEPropertyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVRDEServer_getVRDEPropertyResponse_Holder"
            self.pyclass = Holder

    class ISession_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getState")
            kw["aname"] = "_ISession_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getState_Holder"
            self.pyclass = Holder

    class ISession_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getStateResponse")
            kw["aname"] = "_ISession_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getStateResponse_Holder"
            self.pyclass = Holder

    class ISession_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getType")
            kw["aname"] = "_ISession_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getType_Holder"
            self.pyclass = Holder

    class ISession_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getTypeResponse")
            kw["aname"] = "_ISession_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getTypeResponse_Holder"
            self.pyclass = Holder

    class ISession_getMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getMachine")
            kw["aname"] = "_ISession_getMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getMachine_Holder"
            self.pyclass = Holder

    class ISession_getMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getMachineResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getMachineResponse")
            kw["aname"] = "_ISession_getMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getMachineResponse_Holder"
            self.pyclass = Holder

    class ISession_getConsole_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getConsole"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getConsole_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getConsole")
            kw["aname"] = "_ISession_getConsole"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_getConsole_Holder"
            self.pyclass = Holder

    class ISession_getConsoleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_getConsoleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_getConsoleResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_getConsoleResponse")
            kw["aname"] = "_ISession_getConsoleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISession_getConsoleResponse_Holder"
            self.pyclass = Holder

    class ISession_unlockMachine_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_unlockMachine"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_unlockMachine_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISession_unlockMachine")
            kw["aname"] = "_ISession_unlockMachine"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISession_unlockMachine_Holder"
            self.pyclass = Holder

    class ISession_unlockMachineResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISession_unlockMachineResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISession_unlockMachineResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","ISession_unlockMachineResponse")
            kw["aname"] = "_ISession_unlockMachineResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ISession_unlockMachineResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getName")
            kw["aname"] = "_IStorageController_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getName_Holder"
            self.pyclass = Holder

    class IStorageController_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getNameResponse")
            kw["aname"] = "_IStorageController_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getNameResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxDevicesPerPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxDevicesPerPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxDevicesPerPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxDevicesPerPortCount")
            kw["aname"] = "_IStorageController_getMaxDevicesPerPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getMaxDevicesPerPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxDevicesPerPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxDevicesPerPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxDevicesPerPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxDevicesPerPortCountResponse")
            kw["aname"] = "_IStorageController_getMaxDevicesPerPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getMaxDevicesPerPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getMinPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMinPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMinPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMinPortCount")
            kw["aname"] = "_IStorageController_getMinPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getMinPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getMinPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMinPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMinPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMinPortCountResponse")
            kw["aname"] = "_IStorageController_getMinPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getMinPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxPortCount")
            kw["aname"] = "_IStorageController_getMaxPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getMaxPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getMaxPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getMaxPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getMaxPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getMaxPortCountResponse")
            kw["aname"] = "_IStorageController_getMaxPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getMaxPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getInstance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getInstance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getInstance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getInstance")
            kw["aname"] = "_IStorageController_getInstance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getInstance_Holder"
            self.pyclass = Holder

    class IStorageController_getInstanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getInstanceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getInstanceResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getInstanceResponse")
            kw["aname"] = "_IStorageController_getInstanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getInstanceResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setInstance_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setInstance"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setInstance_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="instance", aname="_instance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setInstance")
            kw["aname"] = "_IStorageController_setInstance"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._instance = None
                    return
            Holder.__name__ = "IStorageController_setInstance_Holder"
            self.pyclass = Holder

    class IStorageController_setInstanceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setInstanceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setInstanceResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setInstanceResponse")
            kw["aname"] = "_IStorageController_setInstanceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setInstanceResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getPortCount")
            kw["aname"] = "_IStorageController_getPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_getPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getPortCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getPortCountResponse")
            kw["aname"] = "_IStorageController_getPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setPortCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setPortCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setPortCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="portCount", aname="_portCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setPortCount")
            kw["aname"] = "_IStorageController_setPortCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._portCount = None
                    return
            Holder.__name__ = "IStorageController_setPortCount_Holder"
            self.pyclass = Holder

    class IStorageController_setPortCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setPortCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setPortCountResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setPortCountResponse")
            kw["aname"] = "_IStorageController_setPortCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setPortCountResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getBus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBus"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBus_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBus")
            kw["aname"] = "_IStorageController_getBus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getBus_Holder"
            self.pyclass = Holder

    class IStorageController_getBusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBusResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBusResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","StorageBus",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBusResponse")
            kw["aname"] = "_IStorageController_getBusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getBusResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getControllerType")
            kw["aname"] = "_IStorageController_getControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getControllerType_Holder"
            self.pyclass = Holder

    class IStorageController_getControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getControllerTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getControllerTypeResponse")
            kw["aname"] = "_IStorageController_getControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setControllerType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setControllerType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setControllerType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","StorageControllerType",lazy=False)(pname="controllerType", aname="_controllerType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setControllerType")
            kw["aname"] = "_IStorageController_setControllerType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._controllerType = None
                    return
            Holder.__name__ = "IStorageController_setControllerType_Holder"
            self.pyclass = Holder

    class IStorageController_setControllerTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setControllerTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setControllerTypeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setControllerTypeResponse")
            kw["aname"] = "_IStorageController_setControllerTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setControllerTypeResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getUseHostIOCache_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getUseHostIOCache"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getUseHostIOCache_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getUseHostIOCache")
            kw["aname"] = "_IStorageController_getUseHostIOCache"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getUseHostIOCache_Holder"
            self.pyclass = Holder

    class IStorageController_getUseHostIOCacheResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getUseHostIOCacheResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getUseHostIOCacheResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getUseHostIOCacheResponse")
            kw["aname"] = "_IStorageController_getUseHostIOCacheResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getUseHostIOCacheResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setUseHostIOCache_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setUseHostIOCache"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setUseHostIOCache_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="useHostIOCache", aname="_useHostIOCache", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setUseHostIOCache")
            kw["aname"] = "_IStorageController_setUseHostIOCache"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._useHostIOCache = None
                    return
            Holder.__name__ = "IStorageController_setUseHostIOCache_Holder"
            self.pyclass = Holder

    class IStorageController_setUseHostIOCacheResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setUseHostIOCacheResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setUseHostIOCacheResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setUseHostIOCacheResponse")
            kw["aname"] = "_IStorageController_setUseHostIOCacheResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setUseHostIOCacheResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getBootable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBootable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBootable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBootable")
            kw["aname"] = "_IStorageController_getBootable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageController_getBootable_Holder"
            self.pyclass = Holder

    class IStorageController_getBootableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getBootableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getBootableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getBootableResponse")
            kw["aname"] = "_IStorageController_getBootableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getBootableResponse_Holder"
            self.pyclass = Holder

    class IStorageController_getIDEEmulationPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getIDEEmulationPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getIDEEmulationPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="devicePosition", aname="_devicePosition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getIDEEmulationPort")
            kw["aname"] = "_IStorageController_getIDEEmulationPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._devicePosition = None
                    return
            Holder.__name__ = "IStorageController_getIDEEmulationPort_Holder"
            self.pyclass = Holder

    class IStorageController_getIDEEmulationPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_getIDEEmulationPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_getIDEEmulationPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_getIDEEmulationPortResponse")
            kw["aname"] = "_IStorageController_getIDEEmulationPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageController_getIDEEmulationPortResponse_Holder"
            self.pyclass = Holder

    class IStorageController_setIDEEmulationPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setIDEEmulationPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setIDEEmulationPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="devicePosition", aname="_devicePosition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="portNumber", aname="_portNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setIDEEmulationPort")
            kw["aname"] = "_IStorageController_setIDEEmulationPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._devicePosition = None
                    self._portNumber = None
                    return
            Holder.__name__ = "IStorageController_setIDEEmulationPort_Holder"
            self.pyclass = Holder

    class IStorageController_setIDEEmulationPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageController_setIDEEmulationPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageController_setIDEEmulationPortResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IStorageController_setIDEEmulationPortResponse")
            kw["aname"] = "_IStorageController_setIDEEmulationPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IStorageController_setIDEEmulationPortResponse_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_getInterfaceName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_getInterfaceName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_getInterfaceName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_getInterfaceName")
            kw["aname"] = "_IManagedObjectRef_getInterfaceName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IManagedObjectRef_getInterfaceName_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_getInterfaceNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_getInterfaceNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_getInterfaceNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_getInterfaceNameResponse")
            kw["aname"] = "_IManagedObjectRef_getInterfaceNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IManagedObjectRef_getInterfaceNameResponse_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_release_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_release"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_release_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_release")
            kw["aname"] = "_IManagedObjectRef_release"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IManagedObjectRef_release_Holder"
            self.pyclass = Holder

    class IManagedObjectRef_releaseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IManagedObjectRef_releaseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IManagedObjectRef_releaseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IManagedObjectRef_releaseResponse")
            kw["aname"] = "_IManagedObjectRef_releaseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IManagedObjectRef_releaseResponse_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logon_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logon"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logon_Dec.schema
            TClist = [ZSI.TC.String(pname="username", aname="_username", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="password", aname="_password", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logon")
            kw["aname"] = "_IWebsessionManager_logon"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._username = None
                    self._password = None
                    return
            Holder.__name__ = "IWebsessionManager_logon_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logonResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logonResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logonResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logonResponse")
            kw["aname"] = "_IWebsessionManager_logonResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IWebsessionManager_logonResponse_Holder"
            self.pyclass = Holder

    class IWebsessionManager_getSessionObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_getSessionObject"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_getSessionObject_Dec.schema
            TClist = [ZSI.TC.String(pname="refIVirtualBox", aname="_refIVirtualBox", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_getSessionObject")
            kw["aname"] = "_IWebsessionManager_getSessionObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refIVirtualBox = None
                    return
            Holder.__name__ = "IWebsessionManager_getSessionObject_Holder"
            self.pyclass = Holder

    class IWebsessionManager_getSessionObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_getSessionObjectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_getSessionObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_getSessionObjectResponse")
            kw["aname"] = "_IWebsessionManager_getSessionObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IWebsessionManager_getSessionObjectResponse_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logoff_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logoff"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logoff_Dec.schema
            TClist = [ZSI.TC.String(pname="refIVirtualBox", aname="_refIVirtualBox", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logoff")
            kw["aname"] = "_IWebsessionManager_logoff"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._refIVirtualBox = None
                    return
            Holder.__name__ = "IWebsessionManager_logoff_Holder"
            self.pyclass = Holder

    class IWebsessionManager_logoffResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IWebsessionManager_logoffResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IWebsessionManager_logoffResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IWebsessionManager_logoffResponse")
            kw["aname"] = "_IWebsessionManager_logoffResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IWebsessionManager_logoffResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMetricName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMetricName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMetricName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMetricName")
            kw["aname"] = "_IPerformanceMetric_getMetricName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMetricName_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMetricNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMetricNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMetricNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMetricNameResponse")
            kw["aname"] = "_IPerformanceMetric_getMetricNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMetricNameResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getObject_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getObject"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getObject_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getObject")
            kw["aname"] = "_IPerformanceMetric_getObject"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getObject_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getObjectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getObjectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getObjectResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getObjectResponse")
            kw["aname"] = "_IPerformanceMetric_getObjectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getObjectResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getDescription"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getDescription")
            kw["aname"] = "_IPerformanceMetric_getDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getDescription_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getDescriptionResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getDescriptionResponse")
            kw["aname"] = "_IPerformanceMetric_getDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getDescriptionResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getPeriod_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getPeriod"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getPeriod_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getPeriod")
            kw["aname"] = "_IPerformanceMetric_getPeriod"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getPeriod_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getPeriodResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getPeriodResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getPeriodResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getPeriodResponse")
            kw["aname"] = "_IPerformanceMetric_getPeriodResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getPeriodResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getCount_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getCount"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getCount_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getCount")
            kw["aname"] = "_IPerformanceMetric_getCount"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getCount_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getCountResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getCountResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getCountResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getCountResponse")
            kw["aname"] = "_IPerformanceMetric_getCountResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getCountResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getUnit_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getUnit"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getUnit_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getUnit")
            kw["aname"] = "_IPerformanceMetric_getUnit"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getUnit_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getUnitResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getUnitResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getUnitResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getUnitResponse")
            kw["aname"] = "_IPerformanceMetric_getUnitResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getUnitResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMinimumValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMinimumValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMinimumValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMinimumValue")
            kw["aname"] = "_IPerformanceMetric_getMinimumValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMinimumValue_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMinimumValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMinimumValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMinimumValueResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMinimumValueResponse")
            kw["aname"] = "_IPerformanceMetric_getMinimumValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMinimumValueResponse_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMaximumValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMaximumValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMaximumValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMaximumValue")
            kw["aname"] = "_IPerformanceMetric_getMaximumValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMaximumValue_Holder"
            self.pyclass = Holder

    class IPerformanceMetric_getMaximumValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceMetric_getMaximumValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceMetric_getMaximumValueResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceMetric_getMaximumValueResponse")
            kw["aname"] = "_IPerformanceMetric_getMaximumValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IPerformanceMetric_getMaximumValueResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetricNames_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetricNames"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetricNames_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetricNames")
            kw["aname"] = "_IPerformanceCollector_getMetricNames"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IPerformanceCollector_getMetricNames_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetricNamesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetricNamesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetricNamesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetricNamesResponse")
            kw["aname"] = "_IPerformanceCollector_getMetricNamesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_getMetricNamesResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetrics")
            kw["aname"] = "_IPerformanceCollector_getMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_getMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_getMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_getMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_getMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_getMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_getMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_getMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_setupMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_setupMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_setupMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="period", aname="_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="count", aname="_count", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_setupMetrics")
            kw["aname"] = "_IPerformanceCollector_setupMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    self._period = None
                    self._count = None
                    return
            Holder.__name__ = "IPerformanceCollector_setupMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_setupMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_setupMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_setupMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_setupMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_setupMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_setupMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_enableMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_enableMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_enableMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_enableMetrics")
            kw["aname"] = "_IPerformanceCollector_enableMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_enableMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_enableMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_enableMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_enableMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_enableMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_enableMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_enableMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_disableMetrics_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_disableMetrics"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_disableMetrics_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_disableMetrics")
            kw["aname"] = "_IPerformanceCollector_disableMetrics"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_disableMetrics_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_disableMetricsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_disableMetricsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_disableMetricsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_disableMetricsResponse")
            kw["aname"] = "_IPerformanceCollector_disableMetricsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_disableMetricsResponse_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_queryMetricsData_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_queryMetricsData"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_queryMetricsData_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="metricNames", aname="_metricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="objects", aname="_objects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_queryMetricsData")
            kw["aname"] = "_IPerformanceCollector_queryMetricsData"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._metricNames = []
                    self._objects = []
                    return
            Holder.__name__ = "IPerformanceCollector_queryMetricsData_Holder"
            self.pyclass = Holder

    class IPerformanceCollector_queryMetricsDataResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IPerformanceCollector_queryMetricsDataResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IPerformanceCollector_queryMetricsDataResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnMetricNames", aname="_returnMetricNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnObjects", aname="_returnObjects", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="returnUnits", aname="_returnUnits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnScales", aname="_returnScales", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnSequenceNumbers", aname="_returnSequenceNumbers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnDataIndices", aname="_returnDataIndices", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="returnDataLengths", aname="_returnDataLengths", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IPerformanceCollector_queryMetricsDataResponse")
            kw["aname"] = "_IPerformanceCollector_queryMetricsDataResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnMetricNames = []
                    self._returnObjects = []
                    self._returnUnits = []
                    self._returnScales = []
                    self._returnSequenceNumbers = []
                    self._returnDataIndices = []
                    self._returnDataLengths = []
                    self._returnval = []
                    return
            Holder.__name__ = "IPerformanceCollector_queryMetricsDataResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetwork")
            kw["aname"] = "_INATEngine_getNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getNetwork_Holder"
            self.pyclass = Holder

    class INATEngine_getNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetworkResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetworkResponse")
            kw["aname"] = "_INATEngine_getNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getNetworkResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setNetwork_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetwork"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetwork_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="network", aname="_network", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetwork")
            kw["aname"] = "_INATEngine_setNetwork"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._network = None
                    return
            Holder.__name__ = "INATEngine_setNetwork_Holder"
            self.pyclass = Holder

    class INATEngine_setNetworkResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetworkResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetworkResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetworkResponse")
            kw["aname"] = "_INATEngine_setNetworkResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setNetworkResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getHostIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getHostIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getHostIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getHostIP")
            kw["aname"] = "_INATEngine_getHostIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getHostIP_Holder"
            self.pyclass = Holder

    class INATEngine_getHostIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getHostIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getHostIPResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getHostIPResponse")
            kw["aname"] = "_INATEngine_getHostIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getHostIPResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setHostIP_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setHostIP"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setHostIP_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostIP", aname="_hostIP", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setHostIP")
            kw["aname"] = "_INATEngine_setHostIP"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._hostIP = None
                    return
            Holder.__name__ = "INATEngine_setHostIP_Holder"
            self.pyclass = Holder

    class INATEngine_setHostIPResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setHostIPResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setHostIPResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setHostIPResponse")
            kw["aname"] = "_INATEngine_setHostIPResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setHostIPResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getTftpPrefix_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTftpPrefix"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTftpPrefix_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTftpPrefix")
            kw["aname"] = "_INATEngine_getTftpPrefix"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getTftpPrefix_Holder"
            self.pyclass = Holder

    class INATEngine_getTftpPrefixResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTftpPrefixResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTftpPrefixResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTftpPrefixResponse")
            kw["aname"] = "_INATEngine_getTftpPrefixResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getTftpPrefixResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setTftpPrefix_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTftpPrefix"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTftpPrefix_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tftpPrefix", aname="_tftpPrefix", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTftpPrefix")
            kw["aname"] = "_INATEngine_setTftpPrefix"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._tftpPrefix = None
                    return
            Holder.__name__ = "INATEngine_setTftpPrefix_Holder"
            self.pyclass = Holder

    class INATEngine_setTftpPrefixResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTftpPrefixResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTftpPrefixResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTftpPrefixResponse")
            kw["aname"] = "_INATEngine_setTftpPrefixResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setTftpPrefixResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getTftpBootFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTftpBootFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTftpBootFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTftpBootFile")
            kw["aname"] = "_INATEngine_getTftpBootFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getTftpBootFile_Holder"
            self.pyclass = Holder

    class INATEngine_getTftpBootFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTftpBootFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTftpBootFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTftpBootFileResponse")
            kw["aname"] = "_INATEngine_getTftpBootFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getTftpBootFileResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setTftpBootFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTftpBootFile"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTftpBootFile_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tftpBootFile", aname="_tftpBootFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTftpBootFile")
            kw["aname"] = "_INATEngine_setTftpBootFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._tftpBootFile = None
                    return
            Holder.__name__ = "INATEngine_setTftpBootFile_Holder"
            self.pyclass = Holder

    class INATEngine_setTftpBootFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTftpBootFileResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTftpBootFileResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTftpBootFileResponse")
            kw["aname"] = "_INATEngine_setTftpBootFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setTftpBootFileResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getTftpNextServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTftpNextServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTftpNextServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTftpNextServer")
            kw["aname"] = "_INATEngine_getTftpNextServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getTftpNextServer_Holder"
            self.pyclass = Holder

    class INATEngine_getTftpNextServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getTftpNextServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getTftpNextServerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getTftpNextServerResponse")
            kw["aname"] = "_INATEngine_getTftpNextServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getTftpNextServerResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setTftpNextServer_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTftpNextServer"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTftpNextServer_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="tftpNextServer", aname="_tftpNextServer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTftpNextServer")
            kw["aname"] = "_INATEngine_setTftpNextServer"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._tftpNextServer = None
                    return
            Holder.__name__ = "INATEngine_setTftpNextServer_Holder"
            self.pyclass = Holder

    class INATEngine_setTftpNextServerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setTftpNextServerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setTftpNextServerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setTftpNextServerResponse")
            kw["aname"] = "_INATEngine_setTftpNextServerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setTftpNextServerResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getAliasMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getAliasMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getAliasMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getAliasMode")
            kw["aname"] = "_INATEngine_getAliasMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getAliasMode_Holder"
            self.pyclass = Holder

    class INATEngine_getAliasModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getAliasModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getAliasModeResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getAliasModeResponse")
            kw["aname"] = "_INATEngine_getAliasModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getAliasModeResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setAliasMode_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setAliasMode"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setAliasMode_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="aliasMode", aname="_aliasMode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setAliasMode")
            kw["aname"] = "_INATEngine_setAliasMode"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._aliasMode = None
                    return
            Holder.__name__ = "INATEngine_setAliasMode_Holder"
            self.pyclass = Holder

    class INATEngine_setAliasModeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setAliasModeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setAliasModeResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setAliasModeResponse")
            kw["aname"] = "_INATEngine_setAliasModeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setAliasModeResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getDnsPassDomain_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDnsPassDomain"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDnsPassDomain_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDnsPassDomain")
            kw["aname"] = "_INATEngine_getDnsPassDomain"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getDnsPassDomain_Holder"
            self.pyclass = Holder

    class INATEngine_getDnsPassDomainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDnsPassDomainResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDnsPassDomainResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDnsPassDomainResponse")
            kw["aname"] = "_INATEngine_getDnsPassDomainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getDnsPassDomainResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setDnsPassDomain_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDnsPassDomain"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDnsPassDomain_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dnsPassDomain", aname="_dnsPassDomain", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDnsPassDomain")
            kw["aname"] = "_INATEngine_setDnsPassDomain"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dnsPassDomain = None
                    return
            Holder.__name__ = "INATEngine_setDnsPassDomain_Holder"
            self.pyclass = Holder

    class INATEngine_setDnsPassDomainResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDnsPassDomainResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDnsPassDomainResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDnsPassDomainResponse")
            kw["aname"] = "_INATEngine_setDnsPassDomainResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setDnsPassDomainResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getDnsProxy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDnsProxy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDnsProxy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDnsProxy")
            kw["aname"] = "_INATEngine_getDnsProxy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getDnsProxy_Holder"
            self.pyclass = Holder

    class INATEngine_getDnsProxyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDnsProxyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDnsProxyResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDnsProxyResponse")
            kw["aname"] = "_INATEngine_getDnsProxyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getDnsProxyResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setDnsProxy_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDnsProxy"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDnsProxy_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dnsProxy", aname="_dnsProxy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDnsProxy")
            kw["aname"] = "_INATEngine_setDnsProxy"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dnsProxy = None
                    return
            Holder.__name__ = "INATEngine_setDnsProxy_Holder"
            self.pyclass = Holder

    class INATEngine_setDnsProxyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDnsProxyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDnsProxyResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDnsProxyResponse")
            kw["aname"] = "_INATEngine_setDnsProxyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setDnsProxyResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getDnsUseHostResolver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDnsUseHostResolver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDnsUseHostResolver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDnsUseHostResolver")
            kw["aname"] = "_INATEngine_getDnsUseHostResolver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getDnsUseHostResolver_Holder"
            self.pyclass = Holder

    class INATEngine_getDnsUseHostResolverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getDnsUseHostResolverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getDnsUseHostResolverResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getDnsUseHostResolverResponse")
            kw["aname"] = "_INATEngine_getDnsUseHostResolverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATEngine_getDnsUseHostResolverResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setDnsUseHostResolver_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDnsUseHostResolver"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDnsUseHostResolver_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="dnsUseHostResolver", aname="_dnsUseHostResolver", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDnsUseHostResolver")
            kw["aname"] = "_INATEngine_setDnsUseHostResolver"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._dnsUseHostResolver = None
                    return
            Holder.__name__ = "INATEngine_setDnsUseHostResolver_Holder"
            self.pyclass = Holder

    class INATEngine_setDnsUseHostResolverResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setDnsUseHostResolverResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setDnsUseHostResolverResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setDnsUseHostResolverResponse")
            kw["aname"] = "_INATEngine_setDnsUseHostResolverResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setDnsUseHostResolverResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getRedirects_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getRedirects"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getRedirects_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getRedirects")
            kw["aname"] = "_INATEngine_getRedirects"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getRedirects_Holder"
            self.pyclass = Holder

    class INATEngine_getRedirectsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getRedirectsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getRedirectsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getRedirectsResponse")
            kw["aname"] = "_INATEngine_getRedirectsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "INATEngine_getRedirectsResponse_Holder"
            self.pyclass = Holder

    class INATEngine_setNetworkSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetworkSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetworkSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="mtu", aname="_mtu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockSnd", aname="_sockSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockRcv", aname="_sockRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndSnd", aname="_TcpWndSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndRcv", aname="_TcpWndRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetworkSettings")
            kw["aname"] = "_INATEngine_setNetworkSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._mtu = None
                    self._sockSnd = None
                    self._sockRcv = None
                    self._TcpWndSnd = None
                    self._TcpWndRcv = None
                    return
            Holder.__name__ = "INATEngine_setNetworkSettings_Holder"
            self.pyclass = Holder

    class INATEngine_setNetworkSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_setNetworkSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_setNetworkSettingsResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_setNetworkSettingsResponse")
            kw["aname"] = "_INATEngine_setNetworkSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_setNetworkSettingsResponse_Holder"
            self.pyclass = Holder

    class INATEngine_getNetworkSettings_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetworkSettings"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetworkSettings_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetworkSettings")
            kw["aname"] = "_INATEngine_getNetworkSettings"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATEngine_getNetworkSettings_Holder"
            self.pyclass = Holder

    class INATEngine_getNetworkSettingsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_getNetworkSettingsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_getNetworkSettingsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="mtu", aname="_mtu", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockSnd", aname="_sockSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="sockRcv", aname="_sockRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndSnd", aname="_TcpWndSnd", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="TcpWndRcv", aname="_TcpWndRcv", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_getNetworkSettingsResponse")
            kw["aname"] = "_INATEngine_getNetworkSettingsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._mtu = None
                    self._sockSnd = None
                    self._sockRcv = None
                    self._TcpWndSnd = None
                    self._TcpWndRcv = None
                    return
            Holder.__name__ = "INATEngine_getNetworkSettingsResponse_Holder"
            self.pyclass = Holder

    class INATEngine_addRedirect_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_addRedirect"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_addRedirect_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","NATProtocol",lazy=False)(pname="proto", aname="_proto", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="hostIp", aname="_hostIp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="hostPort", aname="_hostPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="guestIp", aname="_guestIp", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedShort(pname="guestPort", aname="_guestPort", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_addRedirect")
            kw["aname"] = "_INATEngine_addRedirect"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._proto = None
                    self._hostIp = None
                    self._hostPort = None
                    self._guestIp = None
                    self._guestPort = None
                    return
            Holder.__name__ = "INATEngine_addRedirect_Holder"
            self.pyclass = Holder

    class INATEngine_addRedirectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_addRedirectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_addRedirectResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_addRedirectResponse")
            kw["aname"] = "_INATEngine_addRedirectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_addRedirectResponse_Holder"
            self.pyclass = Holder

    class INATEngine_removeRedirect_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_removeRedirect"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_removeRedirect_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_removeRedirect")
            kw["aname"] = "_INATEngine_removeRedirect"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "INATEngine_removeRedirect_Holder"
            self.pyclass = Holder

    class INATEngine_removeRedirectResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATEngine_removeRedirectResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATEngine_removeRedirectResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","INATEngine_removeRedirectResponse")
            kw["aname"] = "_INATEngine_removeRedirectResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "INATEngine_removeRedirectResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getName")
            kw["aname"] = "_IBandwidthGroup_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getName_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getNameResponse")
            kw["aname"] = "_IBandwidthGroup_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getNameResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getType")
            kw["aname"] = "_IBandwidthGroup_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getType_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","BandwidthGroupType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getTypeResponse")
            kw["aname"] = "_IBandwidthGroup_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getTypeResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getReference_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getReference"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getReference_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getReference")
            kw["aname"] = "_IBandwidthGroup_getReference"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getReference_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getReferenceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getReferenceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getReferenceResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getReferenceResponse")
            kw["aname"] = "_IBandwidthGroup_getReferenceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getReferenceResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getMaxMbPerSec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getMaxMbPerSec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getMaxMbPerSec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getMaxMbPerSec")
            kw["aname"] = "_IBandwidthGroup_getMaxMbPerSec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroup_getMaxMbPerSec_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_getMaxMbPerSecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_getMaxMbPerSecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_getMaxMbPerSecResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_getMaxMbPerSecResponse")
            kw["aname"] = "_IBandwidthGroup_getMaxMbPerSecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroup_getMaxMbPerSecResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_setMaxMbPerSec_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_setMaxMbPerSec"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_setMaxMbPerSec_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxMbPerSec", aname="_maxMbPerSec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_setMaxMbPerSec")
            kw["aname"] = "_IBandwidthGroup_setMaxMbPerSec"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._maxMbPerSec = None
                    return
            Holder.__name__ = "IBandwidthGroup_setMaxMbPerSec_Holder"
            self.pyclass = Holder

    class IBandwidthGroup_setMaxMbPerSecResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroup_setMaxMbPerSecResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroup_setMaxMbPerSecResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroup_setMaxMbPerSecResponse")
            kw["aname"] = "_IBandwidthGroup_setMaxMbPerSecResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBandwidthGroup_setMaxMbPerSecResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getNumGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getNumGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getNumGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getNumGroups")
            kw["aname"] = "_IBandwidthControl_getNumGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthControl_getNumGroups_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getNumGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getNumGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getNumGroupsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getNumGroupsResponse")
            kw["aname"] = "_IBandwidthControl_getNumGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthControl_getNumGroupsResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_createBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_createBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_createBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","BandwidthGroupType",lazy=False)(pname="type", aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IunsignedInt(pname="maxMbPerSec", aname="_maxMbPerSec", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_createBandwidthGroup")
            kw["aname"] = "_IBandwidthControl_createBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    self._type = None
                    self._maxMbPerSec = None
                    return
            Holder.__name__ = "IBandwidthControl_createBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthControl_createBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_createBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_createBandwidthGroupResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_createBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthControl_createBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBandwidthControl_createBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_deleteBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_deleteBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_deleteBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_deleteBandwidthGroup")
            kw["aname"] = "_IBandwidthControl_deleteBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IBandwidthControl_deleteBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthControl_deleteBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_deleteBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_deleteBandwidthGroupResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_deleteBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthControl_deleteBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IBandwidthControl_deleteBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="name", aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getBandwidthGroup")
            kw["aname"] = "_IBandwidthControl_getBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._name = None
                    return
            Holder.__name__ = "IBandwidthControl_getBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getBandwidthGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthControl_getBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthControl_getBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getAllBandwidthGroups_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getAllBandwidthGroups"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getAllBandwidthGroups_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getAllBandwidthGroups")
            kw["aname"] = "_IBandwidthControl_getAllBandwidthGroups"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthControl_getAllBandwidthGroups_Holder"
            self.pyclass = Holder

    class IBandwidthControl_getAllBandwidthGroupsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthControl_getAllBandwidthGroupsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthControl_getAllBandwidthGroupsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthControl_getAllBandwidthGroupsResponse")
            kw["aname"] = "_IBandwidthControl_getAllBandwidthGroupsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IBandwidthControl_getAllBandwidthGroupsResponse_Holder"
            self.pyclass = Holder

    class IEventSource_createListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createListener")
            kw["aname"] = "_IEventSource_createListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEventSource_createListener_Holder"
            self.pyclass = Holder

    class IEventSource_createListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createListenerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createListenerResponse")
            kw["aname"] = "_IEventSource_createListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_createListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSource_createAggregator_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createAggregator"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createAggregator_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="subordinates", aname="_subordinates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createAggregator")
            kw["aname"] = "_IEventSource_createAggregator"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._subordinates = []
                    return
            Holder.__name__ = "IEventSource_createAggregator_Holder"
            self.pyclass = Holder

    class IEventSource_createAggregatorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_createAggregatorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_createAggregatorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_createAggregatorResponse")
            kw["aname"] = "_IEventSource_createAggregatorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_createAggregatorResponse_Holder"
            self.pyclass = Holder

    class IEventSource_registerListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_registerListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_registerListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://www.virtualbox.org/","VBoxEventType",lazy=False)(pname="interesting", aname="_interesting", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname="active", aname="_active", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_registerListener")
            kw["aname"] = "_IEventSource_registerListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    self._interesting = []
                    self._active = None
                    return
            Holder.__name__ = "IEventSource_registerListener_Holder"
            self.pyclass = Holder

    class IEventSource_registerListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_registerListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_registerListenerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_registerListenerResponse")
            kw["aname"] = "_IEventSource_registerListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventSource_registerListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSource_unregisterListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_unregisterListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_unregisterListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_unregisterListener")
            kw["aname"] = "_IEventSource_unregisterListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    return
            Holder.__name__ = "IEventSource_unregisterListener_Holder"
            self.pyclass = Holder

    class IEventSource_unregisterListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_unregisterListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_unregisterListenerResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_unregisterListenerResponse")
            kw["aname"] = "_IEventSource_unregisterListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventSource_unregisterListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSource_fireEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_fireEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_fireEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="event", aname="_event", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_fireEvent")
            kw["aname"] = "_IEventSource_fireEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._event = None
                    self._timeout = None
                    return
            Holder.__name__ = "IEventSource_fireEvent_Holder"
            self.pyclass = Holder

    class IEventSource_fireEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_fireEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_fireEventResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_fireEventResponse")
            kw["aname"] = "_IEventSource_fireEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_fireEventResponse_Holder"
            self.pyclass = Holder

    class IEventSource_getEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_getEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_getEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_getEvent")
            kw["aname"] = "_IEventSource_getEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    self._timeout = None
                    return
            Holder.__name__ = "IEventSource_getEvent_Holder"
            self.pyclass = Holder

    class IEventSource_getEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_getEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_getEventResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_getEventResponse")
            kw["aname"] = "_IEventSource_getEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSource_getEventResponse_Holder"
            self.pyclass = Holder

    class IEventSource_eventProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_eventProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_eventProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="listener", aname="_listener", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="event", aname="_event", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_eventProcessed")
            kw["aname"] = "_IEventSource_eventProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._listener = None
                    self._event = None
                    return
            Holder.__name__ = "IEventSource_eventProcessed_Holder"
            self.pyclass = Holder

    class IEventSource_eventProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSource_eventProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSource_eventProcessedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventSource_eventProcessedResponse")
            kw["aname"] = "_IEventSource_eventProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventSource_eventProcessedResponse_Holder"
            self.pyclass = Holder

    class IEventListener_handleEvent_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventListener_handleEvent"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventListener_handleEvent_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="event", aname="_event", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventListener_handleEvent")
            kw["aname"] = "_IEventListener_handleEvent"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._event = None
                    return
            Holder.__name__ = "IEventListener_handleEvent_Holder"
            self.pyclass = Holder

    class IEventListener_handleEventResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventListener_handleEventResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventListener_handleEventResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEventListener_handleEventResponse")
            kw["aname"] = "_IEventListener_handleEventResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEventListener_handleEventResponse_Holder"
            self.pyclass = Holder

    class IEvent_getType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getType")
            kw["aname"] = "_IEvent_getType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_getType_Holder"
            self.pyclass = Holder

    class IEvent_getTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","VBoxEventType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getTypeResponse")
            kw["aname"] = "_IEvent_getTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_getTypeResponse_Holder"
            self.pyclass = Holder

    class IEvent_getSource_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getSource"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getSource_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getSource")
            kw["aname"] = "_IEvent_getSource"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_getSource_Holder"
            self.pyclass = Holder

    class IEvent_getSourceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getSourceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getSourceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getSourceResponse")
            kw["aname"] = "_IEvent_getSourceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_getSourceResponse_Holder"
            self.pyclass = Holder

    class IEvent_getWaitable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getWaitable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getWaitable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getWaitable")
            kw["aname"] = "_IEvent_getWaitable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_getWaitable_Holder"
            self.pyclass = Holder

    class IEvent_getWaitableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_getWaitableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_getWaitableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_getWaitableResponse")
            kw["aname"] = "_IEvent_getWaitableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_getWaitableResponse_Holder"
            self.pyclass = Holder

    class IEvent_setProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_setProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_setProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_setProcessed")
            kw["aname"] = "_IEvent_setProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEvent_setProcessed_Holder"
            self.pyclass = Holder

    class IEvent_setProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_setProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_setProcessedResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_setProcessedResponse")
            kw["aname"] = "_IEvent_setProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IEvent_setProcessedResponse_Holder"
            self.pyclass = Holder

    class IEvent_waitProcessed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_waitProcessed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_waitProcessed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="timeout", aname="_timeout", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_waitProcessed")
            kw["aname"] = "_IEvent_waitProcessed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._timeout = None
                    return
            Holder.__name__ = "IEvent_waitProcessed_Holder"
            self.pyclass = Holder

    class IEvent_waitProcessedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEvent_waitProcessedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEvent_waitProcessedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEvent_waitProcessedResponse")
            kw["aname"] = "_IEvent_waitProcessedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEvent_waitProcessedResponse_Holder"
            self.pyclass = Holder

    class IReusableEvent_getGeneration_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_getGeneration"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_getGeneration_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_getGeneration")
            kw["aname"] = "_IReusableEvent_getGeneration"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IReusableEvent_getGeneration_Holder"
            self.pyclass = Holder

    class IReusableEvent_getGenerationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_getGenerationResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_getGenerationResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_getGenerationResponse")
            kw["aname"] = "_IReusableEvent_getGenerationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IReusableEvent_getGenerationResponse_Holder"
            self.pyclass = Holder

    class IReusableEvent_reuse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_reuse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_reuse_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_reuse")
            kw["aname"] = "_IReusableEvent_reuse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IReusableEvent_reuse_Holder"
            self.pyclass = Holder

    class IReusableEvent_reuseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IReusableEvent_reuseResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IReusableEvent_reuseResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IReusableEvent_reuseResponse")
            kw["aname"] = "_IReusableEvent_reuseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IReusableEvent_reuseResponse_Holder"
            self.pyclass = Holder

    class IMachineEvent_getMachineId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineEvent_getMachineId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineEvent_getMachineId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineEvent_getMachineId")
            kw["aname"] = "_IMachineEvent_getMachineId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineEvent_getMachineId_Holder"
            self.pyclass = Holder

    class IMachineEvent_getMachineIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineEvent_getMachineIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineEvent_getMachineIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineEvent_getMachineIdResponse")
            kw["aname"] = "_IMachineEvent_getMachineIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineEvent_getMachineIdResponse_Holder"
            self.pyclass = Holder

    class IMachineStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineStateChangedEvent_getState")
            kw["aname"] = "_IMachineStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class IMachineStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineStateChangedEvent_getStateResponse")
            kw["aname"] = "_IMachineStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class IMachineDataChangedEvent_getTemporary_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDataChangedEvent_getTemporary"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDataChangedEvent_getTemporary_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDataChangedEvent_getTemporary")
            kw["aname"] = "_IMachineDataChangedEvent_getTemporary"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineDataChangedEvent_getTemporary_Holder"
            self.pyclass = Holder

    class IMachineDataChangedEvent_getTemporaryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineDataChangedEvent_getTemporaryResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineDataChangedEvent_getTemporaryResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineDataChangedEvent_getTemporaryResponse")
            kw["aname"] = "_IMachineDataChangedEvent_getTemporaryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineDataChangedEvent_getTemporaryResponse_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumId")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumId_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumIdResponse")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumIdResponse_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumType")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumType_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getMediumTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getMediumTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getMediumTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","DeviceType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getMediumTypeResponse")
            kw["aname"] = "_IMediumRegisteredEvent_getMediumTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getMediumTypeResponse_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getRegistered")
            kw["aname"] = "_IMediumRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IMediumRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IMediumRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class IMachineRegisteredEvent_getRegistered_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineRegisteredEvent_getRegistered"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineRegisteredEvent_getRegistered_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineRegisteredEvent_getRegistered")
            kw["aname"] = "_IMachineRegisteredEvent_getRegistered"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMachineRegisteredEvent_getRegistered_Holder"
            self.pyclass = Holder

    class IMachineRegisteredEvent_getRegisteredResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMachineRegisteredEvent_getRegisteredResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMachineRegisteredEvent_getRegisteredResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMachineRegisteredEvent_getRegisteredResponse")
            kw["aname"] = "_IMachineRegisteredEvent_getRegisteredResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMachineRegisteredEvent_getRegisteredResponse_Holder"
            self.pyclass = Holder

    class ISessionStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISessionStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISessionStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISessionStateChangedEvent_getState")
            kw["aname"] = "_ISessionStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISessionStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class ISessionStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISessionStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISessionStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","SessionState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISessionStateChangedEvent_getStateResponse")
            kw["aname"] = "_ISessionStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISessionStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getName")
            kw["aname"] = "_IGuestPropertyChangedEvent_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getName_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getNameResponse")
            kw["aname"] = "_IGuestPropertyChangedEvent_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getNameResponse_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getValue")
            kw["aname"] = "_IGuestPropertyChangedEvent_getValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getValue_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getValueResponse")
            kw["aname"] = "_IGuestPropertyChangedEvent_getValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getValueResponse_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getFlags_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getFlags"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getFlags_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getFlags")
            kw["aname"] = "_IGuestPropertyChangedEvent_getFlags"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getFlags_Holder"
            self.pyclass = Holder

    class IGuestPropertyChangedEvent_getFlagsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestPropertyChangedEvent_getFlagsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestPropertyChangedEvent_getFlagsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestPropertyChangedEvent_getFlagsResponse")
            kw["aname"] = "_IGuestPropertyChangedEvent_getFlagsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestPropertyChangedEvent_getFlagsResponse_Holder"
            self.pyclass = Holder

    class ISnapshotEvent_getSnapshotId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotEvent_getSnapshotId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotEvent_getSnapshotId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotEvent_getSnapshotId")
            kw["aname"] = "_ISnapshotEvent_getSnapshotId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISnapshotEvent_getSnapshotId_Holder"
            self.pyclass = Holder

    class ISnapshotEvent_getSnapshotIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISnapshotEvent_getSnapshotIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISnapshotEvent_getSnapshotIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISnapshotEvent_getSnapshotIdResponse")
            kw["aname"] = "_ISnapshotEvent_getSnapshotIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISnapshotEvent_getSnapshotIdResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getVisible_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getVisible"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getVisible_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getVisible")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getVisible"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getVisible_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getVisibleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getVisibleResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getVisibleResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getVisibleResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getVisibleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getVisibleResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getAlpha_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getAlpha"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getAlpha_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getAlpha")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getAlpha"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getAlpha_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getAlphaResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getAlphaResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getAlphaResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getAlphaResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getAlphaResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getAlphaResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getXhot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getXhot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getXhot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getXhot")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getXhot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getXhot_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getXhotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getXhotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getXhotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getXhotResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getXhotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getXhotResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getYhot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getYhot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getYhot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getYhot")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getYhot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getYhot_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getYhotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getYhotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getYhotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getYhotResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getYhotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getYhotResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getWidth")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getWidth_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getWidthResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getWidthResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getHeight")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getHeight_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getHeightResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getHeightResponse_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getShape_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getShape"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getShape_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getShape")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getShape"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getShape_Holder"
            self.pyclass = Holder

    class IMousePointerShapeChangedEvent_getShapeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMousePointerShapeChangedEvent_getShapeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMousePointerShapeChangedEvent_getShapeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMousePointerShapeChangedEvent_getShapeResponse")
            kw["aname"] = "_IMousePointerShapeChangedEvent_getShapeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMousePointerShapeChangedEvent_getShapeResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsAbsolute_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsAbsolute"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsAbsolute_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsAbsolute")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsAbsolute"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsAbsolute_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsRelative_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsRelative"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsRelative_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsRelative")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsRelative"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsRelative_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getSupportsRelativeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getSupportsRelativeResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getSupportsRelativeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getNeedsHostCursor_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getNeedsHostCursor"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getNeedsHostCursor_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getNeedsHostCursor")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getNeedsHostCursor"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getNeedsHostCursor_Holder"
            self.pyclass = Holder

    class IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMouseCapabilityChangedEvent_getNeedsHostCursorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMouseCapabilityChangedEvent_getNeedsHostCursorResponse")
            kw["aname"] = "_IMouseCapabilityChangedEvent_getNeedsHostCursorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getNumLock_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getNumLock"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getNumLock_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getNumLock")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getNumLock"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getNumLock_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getNumLockResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getNumLockResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getNumLockResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getNumLockResponse")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getNumLockResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getNumLockResponse_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getCapsLock_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getCapsLock"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getCapsLock_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getCapsLock")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getCapsLock"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getCapsLock_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getCapsLockResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getCapsLockResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getCapsLockResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getCapsLockResponse")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getCapsLockResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getCapsLockResponse_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getScrollLock_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getScrollLock"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getScrollLock_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getScrollLock")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getScrollLock"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getScrollLock_Holder"
            self.pyclass = Holder

    class IKeyboardLedsChangedEvent_getScrollLockResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IKeyboardLedsChangedEvent_getScrollLockResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IKeyboardLedsChangedEvent_getScrollLockResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IKeyboardLedsChangedEvent_getScrollLockResponse")
            kw["aname"] = "_IKeyboardLedsChangedEvent_getScrollLockResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IKeyboardLedsChangedEvent_getScrollLockResponse_Holder"
            self.pyclass = Holder

    class IStateChangedEvent_getState_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStateChangedEvent_getState"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStateChangedEvent_getState_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStateChangedEvent_getState")
            kw["aname"] = "_IStateChangedEvent_getState"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStateChangedEvent_getState_Holder"
            self.pyclass = Holder

    class IStateChangedEvent_getStateResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStateChangedEvent_getStateResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStateChangedEvent_getStateResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","MachineState",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStateChangedEvent_getStateResponse")
            kw["aname"] = "_IStateChangedEvent_getStateResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStateChangedEvent_getStateResponse_Holder"
            self.pyclass = Holder

    class INetworkAdapterChangedEvent_getNetworkAdapter_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapterChangedEvent_getNetworkAdapter"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapterChangedEvent_getNetworkAdapter_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapterChangedEvent_getNetworkAdapter")
            kw["aname"] = "_INetworkAdapterChangedEvent_getNetworkAdapter"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INetworkAdapterChangedEvent_getNetworkAdapter_Holder"
            self.pyclass = Holder

    class INetworkAdapterChangedEvent_getNetworkAdapterResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INetworkAdapterChangedEvent_getNetworkAdapterResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INetworkAdapterChangedEvent_getNetworkAdapterResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INetworkAdapterChangedEvent_getNetworkAdapterResponse")
            kw["aname"] = "_INetworkAdapterChangedEvent_getNetworkAdapterResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INetworkAdapterChangedEvent_getNetworkAdapterResponse_Holder"
            self.pyclass = Holder

    class ISerialPortChangedEvent_getSerialPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPortChangedEvent_getSerialPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPortChangedEvent_getSerialPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPortChangedEvent_getSerialPort")
            kw["aname"] = "_ISerialPortChangedEvent_getSerialPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISerialPortChangedEvent_getSerialPort_Holder"
            self.pyclass = Holder

    class ISerialPortChangedEvent_getSerialPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISerialPortChangedEvent_getSerialPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISerialPortChangedEvent_getSerialPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISerialPortChangedEvent_getSerialPortResponse")
            kw["aname"] = "_ISerialPortChangedEvent_getSerialPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISerialPortChangedEvent_getSerialPortResponse_Holder"
            self.pyclass = Holder

    class IParallelPortChangedEvent_getParallelPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPortChangedEvent_getParallelPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPortChangedEvent_getParallelPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPortChangedEvent_getParallelPort")
            kw["aname"] = "_IParallelPortChangedEvent_getParallelPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IParallelPortChangedEvent_getParallelPort_Holder"
            self.pyclass = Holder

    class IParallelPortChangedEvent_getParallelPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IParallelPortChangedEvent_getParallelPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IParallelPortChangedEvent_getParallelPortResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IParallelPortChangedEvent_getParallelPortResponse")
            kw["aname"] = "_IParallelPortChangedEvent_getParallelPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IParallelPortChangedEvent_getParallelPortResponse_Holder"
            self.pyclass = Holder

    class IMediumChangedEvent_getMediumAttachment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumChangedEvent_getMediumAttachment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumChangedEvent_getMediumAttachment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumChangedEvent_getMediumAttachment")
            kw["aname"] = "_IMediumChangedEvent_getMediumAttachment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IMediumChangedEvent_getMediumAttachment_Holder"
            self.pyclass = Holder

    class IMediumChangedEvent_getMediumAttachmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IMediumChangedEvent_getMediumAttachmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IMediumChangedEvent_getMediumAttachmentResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IMediumChangedEvent_getMediumAttachmentResponse")
            kw["aname"] = "_IMediumChangedEvent_getMediumAttachmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IMediumChangedEvent_getMediumAttachmentResponse_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getCpu_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getCpu"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getCpu_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getCpu")
            kw["aname"] = "_ICPUChangedEvent_getCpu"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getCpu_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getCpuResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getCpuResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getCpuResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getCpuResponse")
            kw["aname"] = "_ICPUChangedEvent_getCpuResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getCpuResponse_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getAdd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getAdd"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getAdd_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getAdd")
            kw["aname"] = "_ICPUChangedEvent_getAdd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getAdd_Holder"
            self.pyclass = Holder

    class ICPUChangedEvent_getAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUChangedEvent_getAddResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUChangedEvent_getAddResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUChangedEvent_getAddResponse")
            kw["aname"] = "_ICPUChangedEvent_getAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICPUChangedEvent_getAddResponse_Holder"
            self.pyclass = Holder

    class ICPUExecutionCapChangedEvent_getExecutionCap_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUExecutionCapChangedEvent_getExecutionCap"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUExecutionCapChangedEvent_getExecutionCap_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUExecutionCapChangedEvent_getExecutionCap")
            kw["aname"] = "_ICPUExecutionCapChangedEvent_getExecutionCap"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ICPUExecutionCapChangedEvent_getExecutionCap_Holder"
            self.pyclass = Holder

    class ICPUExecutionCapChangedEvent_getExecutionCapResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ICPUExecutionCapChangedEvent_getExecutionCapResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ICPUExecutionCapChangedEvent_getExecutionCapResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ICPUExecutionCapChangedEvent_getExecutionCapResponse")
            kw["aname"] = "_ICPUExecutionCapChangedEvent_getExecutionCapResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ICPUExecutionCapChangedEvent_getExecutionCapResponse_Holder"
            self.pyclass = Holder

    class IGuestKeyboardEvent_getScancodes_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestKeyboardEvent_getScancodes"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestKeyboardEvent_getScancodes_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestKeyboardEvent_getScancodes")
            kw["aname"] = "_IGuestKeyboardEvent_getScancodes"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestKeyboardEvent_getScancodes_Holder"
            self.pyclass = Holder

    class IGuestKeyboardEvent_getScancodesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestKeyboardEvent_getScancodesResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestKeyboardEvent_getScancodesResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestKeyboardEvent_getScancodesResponse")
            kw["aname"] = "_IGuestKeyboardEvent_getScancodesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IGuestKeyboardEvent_getScancodesResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getAbsolute_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getAbsolute"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getAbsolute_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getAbsolute")
            kw["aname"] = "_IGuestMouseEvent_getAbsolute"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getAbsolute_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getAbsoluteResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getAbsoluteResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getAbsoluteResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getAbsoluteResponse")
            kw["aname"] = "_IGuestMouseEvent_getAbsoluteResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getAbsoluteResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getX")
            kw["aname"] = "_IGuestMouseEvent_getX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getX_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getXResponse")
            kw["aname"] = "_IGuestMouseEvent_getXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getXResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getY")
            kw["aname"] = "_IGuestMouseEvent_getY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getY_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getYResponse")
            kw["aname"] = "_IGuestMouseEvent_getYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getYResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getZ_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getZ"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getZ_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getZ")
            kw["aname"] = "_IGuestMouseEvent_getZ"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getZ_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getZResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getZResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getZResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getZResponse")
            kw["aname"] = "_IGuestMouseEvent_getZResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getZResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getW_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getW"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getW_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getW")
            kw["aname"] = "_IGuestMouseEvent_getW"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getW_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getWResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getWResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getWResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getWResponse")
            kw["aname"] = "_IGuestMouseEvent_getWResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getWResponse_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getButtons_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getButtons"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getButtons_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getButtons")
            kw["aname"] = "_IGuestMouseEvent_getButtons"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getButtons_Holder"
            self.pyclass = Holder

    class IGuestMouseEvent_getButtonsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMouseEvent_getButtonsResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMouseEvent_getButtonsResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMouseEvent_getButtonsResponse")
            kw["aname"] = "_IGuestMouseEvent_getButtonsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMouseEvent_getButtonsResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getDevice")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getDevice_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getDeviceResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getDeviceResponse")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getDeviceResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getAttached_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getAttached"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getAttached_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getAttached")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getAttached"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getAttached_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getAttachedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getAttachedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getAttachedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getAttachedResponse")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getAttachedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getAttachedResponse_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getError_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getError"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getError_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getError")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getError"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getError_Holder"
            self.pyclass = Holder

    class IUSBDeviceStateChangedEvent_getErrorResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IUSBDeviceStateChangedEvent_getErrorResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IUSBDeviceStateChangedEvent_getErrorResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IUSBDeviceStateChangedEvent_getErrorResponse")
            kw["aname"] = "_IUSBDeviceStateChangedEvent_getErrorResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IUSBDeviceStateChangedEvent_getErrorResponse_Holder"
            self.pyclass = Holder

    class ISharedFolderChangedEvent_getScope_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolderChangedEvent_getScope"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolderChangedEvent_getScope_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolderChangedEvent_getScope")
            kw["aname"] = "_ISharedFolderChangedEvent_getScope"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "ISharedFolderChangedEvent_getScope_Holder"
            self.pyclass = Holder

    class ISharedFolderChangedEvent_getScopeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "ISharedFolderChangedEvent_getScopeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.ISharedFolderChangedEvent_getScopeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","Scope",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","ISharedFolderChangedEvent_getScopeResponse")
            kw["aname"] = "_ISharedFolderChangedEvent_getScopeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "ISharedFolderChangedEvent_getScopeResponse_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getFatal_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getFatal"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getFatal_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getFatal")
            kw["aname"] = "_IRuntimeErrorEvent_getFatal"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getFatal_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getFatalResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getFatalResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getFatalResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getFatalResponse")
            kw["aname"] = "_IRuntimeErrorEvent_getFatalResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getFatalResponse_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getId")
            kw["aname"] = "_IRuntimeErrorEvent_getId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getId_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getIdResponse")
            kw["aname"] = "_IRuntimeErrorEvent_getIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getIdResponse_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getMessage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getMessage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getMessage")
            kw["aname"] = "_IRuntimeErrorEvent_getMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getMessage_Holder"
            self.pyclass = Holder

    class IRuntimeErrorEvent_getMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IRuntimeErrorEvent_getMessageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IRuntimeErrorEvent_getMessageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IRuntimeErrorEvent_getMessageResponse")
            kw["aname"] = "_IRuntimeErrorEvent_getMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IRuntimeErrorEvent_getMessageResponse_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getListener_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getListener"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getListener_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getListener")
            kw["aname"] = "_IEventSourceChangedEvent_getListener"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getListener_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getListenerResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getListenerResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getListenerResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getListenerResponse")
            kw["aname"] = "_IEventSourceChangedEvent_getListenerResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getListenerResponse_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getAdd_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getAdd"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getAdd_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getAdd")
            kw["aname"] = "_IEventSourceChangedEvent_getAdd"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getAdd_Holder"
            self.pyclass = Holder

    class IEventSourceChangedEvent_getAddResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IEventSourceChangedEvent_getAddResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IEventSourceChangedEvent_getAddResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IEventSourceChangedEvent_getAddResponse")
            kw["aname"] = "_IEventSourceChangedEvent_getAddResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IEventSourceChangedEvent_getAddResponse_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getMachineId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getMachineId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getMachineId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getMachineId")
            kw["aname"] = "_IExtraDataChangedEvent_getMachineId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getMachineId_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getMachineIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getMachineIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getMachineIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getMachineIdResponse")
            kw["aname"] = "_IExtraDataChangedEvent_getMachineIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getMachineIdResponse_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getKey")
            kw["aname"] = "_IExtraDataChangedEvent_getKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getKey_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getKeyResponse")
            kw["aname"] = "_IExtraDataChangedEvent_getKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getKeyResponse_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getValue")
            kw["aname"] = "_IExtraDataChangedEvent_getValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getValue_Holder"
            self.pyclass = Holder

    class IExtraDataChangedEvent_getValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataChangedEvent_getValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataChangedEvent_getValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataChangedEvent_getValueResponse")
            kw["aname"] = "_IExtraDataChangedEvent_getValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataChangedEvent_getValueResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_addVeto_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_addVeto"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_addVeto_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="reason", aname="_reason", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_addVeto")
            kw["aname"] = "_IVetoEvent_addVeto"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._reason = None
                    return
            Holder.__name__ = "IVetoEvent_addVeto_Holder"
            self.pyclass = Holder

    class IVetoEvent_addVetoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_addVetoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_addVetoResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_addVetoResponse")
            kw["aname"] = "_IVetoEvent_addVetoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IVetoEvent_addVetoResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_isVetoed_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_isVetoed"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_isVetoed_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_isVetoed")
            kw["aname"] = "_IVetoEvent_isVetoed"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVetoEvent_isVetoed_Holder"
            self.pyclass = Holder

    class IVetoEvent_isVetoedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_isVetoedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_isVetoedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_isVetoedResponse")
            kw["aname"] = "_IVetoEvent_isVetoedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVetoEvent_isVetoedResponse_Holder"
            self.pyclass = Holder

    class IVetoEvent_getVetos_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_getVetos"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_getVetos_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_getVetos")
            kw["aname"] = "_IVetoEvent_getVetos"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVetoEvent_getVetos_Holder"
            self.pyclass = Holder

    class IVetoEvent_getVetosResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVetoEvent_getVetosResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVetoEvent_getVetosResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVetoEvent_getVetosResponse")
            kw["aname"] = "_IVetoEvent_getVetosResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = []
                    return
            Holder.__name__ = "IVetoEvent_getVetosResponse_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getMachineId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getMachineId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getMachineId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getMachineId")
            kw["aname"] = "_IExtraDataCanChangeEvent_getMachineId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getMachineId_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getMachineIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getMachineIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getMachineIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getMachineIdResponse")
            kw["aname"] = "_IExtraDataCanChangeEvent_getMachineIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getMachineIdResponse_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getKey_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getKey"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getKey_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getKey")
            kw["aname"] = "_IExtraDataCanChangeEvent_getKey"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getKey_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getKeyResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getKeyResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getKeyResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getKeyResponse")
            kw["aname"] = "_IExtraDataCanChangeEvent_getKeyResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getKeyResponse_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getValue_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getValue"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getValue_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getValue")
            kw["aname"] = "_IExtraDataCanChangeEvent_getValue"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getValue_Holder"
            self.pyclass = Holder

    class IExtraDataCanChangeEvent_getValueResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IExtraDataCanChangeEvent_getValueResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IExtraDataCanChangeEvent_getValueResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IExtraDataCanChangeEvent_getValueResponse")
            kw["aname"] = "_IExtraDataCanChangeEvent_getValueResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IExtraDataCanChangeEvent_getValueResponse_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_getWinId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_getWinId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_getWinId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_getWinId")
            kw["aname"] = "_IShowWindowEvent_getWinId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IShowWindowEvent_getWinId_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_getWinIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_getWinIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_getWinIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_getWinIdResponse")
            kw["aname"] = "_IShowWindowEvent_getWinIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IShowWindowEvent_getWinIdResponse_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_setWinId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_setWinId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_setWinId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname="winId", aname="_winId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_setWinId")
            kw["aname"] = "_IShowWindowEvent_setWinId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    self._winId = None
                    return
            Holder.__name__ = "IShowWindowEvent_setWinId_Holder"
            self.pyclass = Holder

    class IShowWindowEvent_setWinIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IShowWindowEvent_setWinIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IShowWindowEvent_setWinIdResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://www.virtualbox.org/","IShowWindowEvent_setWinIdResponse")
            kw["aname"] = "_IShowWindowEvent_setWinIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IShowWindowEvent_setWinIdResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getSlot_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getSlot"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getSlot_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getSlot")
            kw["aname"] = "_INATRedirectEvent_getSlot"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getSlot_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getSlotResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getSlotResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getSlotResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getSlotResponse")
            kw["aname"] = "_INATRedirectEvent_getSlotResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getSlotResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getRemove_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getRemove"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getRemove_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getRemove")
            kw["aname"] = "_INATRedirectEvent_getRemove"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getRemove_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getRemoveResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getRemoveResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getRemoveResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getRemoveResponse")
            kw["aname"] = "_INATRedirectEvent_getRemoveResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getRemoveResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getName_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getName"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getName_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getName")
            kw["aname"] = "_INATRedirectEvent_getName"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getName_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getNameResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getNameResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getNameResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getNameResponse")
            kw["aname"] = "_INATRedirectEvent_getNameResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getNameResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getProto_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getProto"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getProto_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getProto")
            kw["aname"] = "_INATRedirectEvent_getProto"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getProto_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getProtoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getProtoResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getProtoResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","NATProtocol",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getProtoResponse")
            kw["aname"] = "_INATRedirectEvent_getProtoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getProtoResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostIp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostIp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostIp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostIp")
            kw["aname"] = "_INATRedirectEvent_getHostIp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostIp_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostIpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostIpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostIpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostIpResponse")
            kw["aname"] = "_INATRedirectEvent_getHostIpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostIpResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostPort")
            kw["aname"] = "_INATRedirectEvent_getHostPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostPort_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getHostPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getHostPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getHostPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getHostPortResponse")
            kw["aname"] = "_INATRedirectEvent_getHostPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getHostPortResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestIp_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestIp"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestIp_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestIp")
            kw["aname"] = "_INATRedirectEvent_getGuestIp"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestIp_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestIpResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestIpResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestIpResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestIpResponse")
            kw["aname"] = "_INATRedirectEvent_getGuestIpResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestIpResponse_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestPort_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestPort"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestPort_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestPort")
            kw["aname"] = "_INATRedirectEvent_getGuestPort"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestPort_Holder"
            self.pyclass = Holder

    class INATRedirectEvent_getGuestPortResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "INATRedirectEvent_getGuestPortResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.INATRedirectEvent_getGuestPortResponse_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","INATRedirectEvent_getGuestPortResponse")
            kw["aname"] = "_INATRedirectEvent_getGuestPortResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "INATRedirectEvent_getGuestPortResponse_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getPlugged_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getPlugged"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getPlugged_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getPlugged")
            kw["aname"] = "_IHostPciDevicePlugEvent_getPlugged"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getPlugged_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getPluggedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getPluggedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getPluggedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getPluggedResponse")
            kw["aname"] = "_IHostPciDevicePlugEvent_getPluggedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getPluggedResponse_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getSuccess_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getSuccess"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getSuccess_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getSuccess")
            kw["aname"] = "_IHostPciDevicePlugEvent_getSuccess"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getSuccess_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getSuccessResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getSuccessResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getSuccessResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getSuccessResponse")
            kw["aname"] = "_IHostPciDevicePlugEvent_getSuccessResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getSuccessResponse_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getAttachment_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getAttachment"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getAttachment_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getAttachment")
            kw["aname"] = "_IHostPciDevicePlugEvent_getAttachment"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getAttachment_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getAttachmentResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getAttachmentResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getAttachmentResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IPciDeviceAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getAttachmentResponse")
            kw["aname"] = "_IHostPciDevicePlugEvent_getAttachmentResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getAttachmentResponse_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getMessage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getMessage"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getMessage_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getMessage")
            kw["aname"] = "_IHostPciDevicePlugEvent_getMessage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getMessage_Holder"
            self.pyclass = Holder

    class IHostPciDevicePlugEvent_getMessageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IHostPciDevicePlugEvent_getMessageResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IHostPciDevicePlugEvent_getMessageResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IHostPciDevicePlugEvent_getMessageResponse")
            kw["aname"] = "_IHostPciDevicePlugEvent_getMessageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IHostPciDevicePlugEvent_getMessageResponse_Holder"
            self.pyclass = Holder

    class IVBoxSVCAvailabilityChangedEvent_getAvailable_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVBoxSVCAvailabilityChangedEvent_getAvailable"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVBoxSVCAvailabilityChangedEvent_getAvailable_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVBoxSVCAvailabilityChangedEvent_getAvailable")
            kw["aname"] = "_IVBoxSVCAvailabilityChangedEvent_getAvailable"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IVBoxSVCAvailabilityChangedEvent_getAvailable_Holder"
            self.pyclass = Holder

    class IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IVBoxSVCAvailabilityChangedEvent_getAvailableResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IVBoxSVCAvailabilityChangedEvent_getAvailableResponse")
            kw["aname"] = "_IVBoxSVCAvailabilityChangedEvent_getAvailableResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Holder"
            self.pyclass = Holder

    class IBandwidthGroupChangedEvent_getBandwidthGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroupChangedEvent_getBandwidthGroup"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroupChangedEvent_getBandwidthGroup_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroupChangedEvent_getBandwidthGroup")
            kw["aname"] = "_IBandwidthGroupChangedEvent_getBandwidthGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IBandwidthGroupChangedEvent_getBandwidthGroup_Holder"
            self.pyclass = Holder

    class IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IBandwidthGroupChangedEvent_getBandwidthGroupResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IBandwidthGroupChangedEvent_getBandwidthGroupResponse")
            kw["aname"] = "_IBandwidthGroupChangedEvent_getBandwidthGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getChangeType_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getChangeType"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getChangeType_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getChangeType")
            kw["aname"] = "_IGuestMonitorChangedEvent_getChangeType"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getChangeType_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getChangeTypeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getChangeTypeResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getChangeTypeResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","GuestMonitorChangedEventType",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getChangeTypeResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getChangeTypeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getChangeTypeResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getScreenId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getScreenId"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getScreenId_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getScreenId")
            kw["aname"] = "_IGuestMonitorChangedEvent_getScreenId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getScreenId_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getScreenIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getScreenIdResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getScreenIdResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getScreenIdResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getScreenIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getScreenIdResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginX_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginX"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginX_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginX")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginX"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginX_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginXResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginXResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginXResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginXResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginXResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginXResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginY_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginY"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginY_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginY")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginY"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginY_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getOriginYResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getOriginYResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getOriginYResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getOriginYResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getOriginYResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getOriginYResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getWidth_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getWidth"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getWidth_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getWidth")
            kw["aname"] = "_IGuestMonitorChangedEvent_getWidth"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getWidth_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getWidthResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getWidthResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getWidthResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getWidthResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getWidthResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getWidthResponse_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getHeight_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getHeight"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getHeight_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getHeight")
            kw["aname"] = "_IGuestMonitorChangedEvent_getHeight"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getHeight_Holder"
            self.pyclass = Holder

    class IGuestMonitorChangedEvent_getHeightResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IGuestMonitorChangedEvent_getHeightResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IGuestMonitorChangedEvent_getHeightResponse_Dec.schema
            TClist = [ZSI.TCnumbers.IunsignedInt(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IGuestMonitorChangedEvent_getHeightResponse")
            kw["aname"] = "_IGuestMonitorChangedEvent_getHeightResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IGuestMonitorChangedEvent_getHeightResponse_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getStorageDevice_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getStorageDevice"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getStorageDevice_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getStorageDevice")
            kw["aname"] = "_IStorageDeviceChangedEvent_getStorageDevice"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getStorageDevice_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getStorageDeviceResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getStorageDeviceResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getStorageDeviceResponse_Dec.schema
            TClist = [GTD("http://www.virtualbox.org/","IMediumAttachment",lazy=False)(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getStorageDeviceResponse")
            kw["aname"] = "_IStorageDeviceChangedEvent_getStorageDeviceResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getStorageDeviceResponse_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getRemoved_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getRemoved"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getRemoved_Dec.schema
            TClist = [ZSI.TC.String(pname="_this", aname="__this", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getRemoved")
            kw["aname"] = "_IStorageDeviceChangedEvent_getRemoved"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self.__this = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getRemoved_Holder"
            self.pyclass = Holder

    class IStorageDeviceChangedEvent_getRemovedResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "IStorageDeviceChangedEvent_getRemovedResponse"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.IStorageDeviceChangedEvent_getRemovedResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname="returnval", aname="_returnval", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","IStorageDeviceChangedEvent_getRemovedResponse")
            kw["aname"] = "_IStorageDeviceChangedEvent_getRemovedResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._returnval = None
                    return
            Holder.__name__ = "IStorageDeviceChangedEvent_getRemovedResponse_Holder"
            self.pyclass = Holder

    class InvalidObjectFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "InvalidObjectFault"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.InvalidObjectFault_Dec.schema
            TClist = [ZSI.TC.String(pname="badObjectID", aname="_badObjectID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","InvalidObjectFault")
            kw["aname"] = "_InvalidObjectFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._badObjectID = None
                    return
            Holder.__name__ = "InvalidObjectFault_Holder"
            self.pyclass = Holder

    class RuntimeFault_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "RuntimeFault"
        schema = "http://www.virtualbox.org/"
        def __init__(self, **kw):
            ns = ns0.RuntimeFault_Dec.schema
            TClist = [ZSI.TCnumbers.Iint(pname="resultCode", aname="_resultCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="interfaceID", aname="_interfaceID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="component", aname="_component", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname="text", aname="_text", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://www.virtualbox.org/","RuntimeFault")
            kw["aname"] = "_RuntimeFault"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resultCode = None
                    self._interfaceID = None
                    self._component = None
                    self._text = None
                    return
            Holder.__name__ = "RuntimeFault_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://www.virtualbox.org/)
