################################################## 
# VirtualBox_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from VirtualBox_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class vboxServiceLocator:
    vboxPortType_address = "http://localhost:18083/"
    def getvboxPortTypeAddress(self):
        return vboxServiceLocator.vboxPortType_address
    def getvboxPortType(self, url=None, **kw):
        return vboxBindingSOAP(url or vboxServiceLocator.vboxPortType_address, **kw)

# Methods
class vboxBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: IVirtualBoxErrorInfo_getResultCode
    def IVirtualBoxErrorInfo_getResultCode(self, request):
        if isinstance(request, IVirtualBoxErrorInfo_getResultCodeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getResultCodeResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getInterfaceID
    def IVirtualBoxErrorInfo_getInterfaceID(self, request):
        if isinstance(request, IVirtualBoxErrorInfo_getInterfaceIDRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getInterfaceIDResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getComponent
    def IVirtualBoxErrorInfo_getComponent(self, request):
        if isinstance(request, IVirtualBoxErrorInfo_getComponentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getComponentResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getText
    def IVirtualBoxErrorInfo_getText(self, request):
        if isinstance(request, IVirtualBoxErrorInfo_getTextRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getTextResultMsg.typecode)
        return response

    # op: IVirtualBoxErrorInfo_getNext
    def IVirtualBoxErrorInfo_getNext(self, request):
        if isinstance(request, IVirtualBoxErrorInfo_getNextRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBoxErrorInfo_getNextResultMsg.typecode)
        return response

    # op: IDHCPServer_getEnabled
    def IDHCPServer_getEnabled(self, request):
        if isinstance(request, IDHCPServer_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getEnabledResultMsg.typecode)
        return response

    # op: IDHCPServer_setEnabled
    def IDHCPServer_setEnabled(self, request):
        if isinstance(request, IDHCPServer_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_setEnabledResultMsg.typecode)
        return response

    # op: IDHCPServer_getIPAddress
    def IDHCPServer_getIPAddress(self, request):
        if isinstance(request, IDHCPServer_getIPAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getIPAddressResultMsg.typecode)
        return response

    # op: IDHCPServer_getNetworkMask
    def IDHCPServer_getNetworkMask(self, request):
        if isinstance(request, IDHCPServer_getNetworkMaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getNetworkMaskResultMsg.typecode)
        return response

    # op: IDHCPServer_getNetworkName
    def IDHCPServer_getNetworkName(self, request):
        if isinstance(request, IDHCPServer_getNetworkNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getNetworkNameResultMsg.typecode)
        return response

    # op: IDHCPServer_getLowerIP
    def IDHCPServer_getLowerIP(self, request):
        if isinstance(request, IDHCPServer_getLowerIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getLowerIPResultMsg.typecode)
        return response

    # op: IDHCPServer_getUpperIP
    def IDHCPServer_getUpperIP(self, request):
        if isinstance(request, IDHCPServer_getUpperIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_getUpperIPResultMsg.typecode)
        return response

    # op: IDHCPServer_setConfiguration
    def IDHCPServer_setConfiguration(self, request):
        if isinstance(request, IDHCPServer_setConfigurationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_setConfigurationResultMsg.typecode)
        return response

    # op: IDHCPServer_start
    def IDHCPServer_start(self, request):
        if isinstance(request, IDHCPServer_startRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_startResultMsg.typecode)
        return response

    # op: IDHCPServer_stop
    def IDHCPServer_stop(self, request):
        if isinstance(request, IDHCPServer_stopRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDHCPServer_stopResultMsg.typecode)
        return response

    # op: IVirtualBox_getVersion
    def IVirtualBox_getVersion(self, request):
        if isinstance(request, IVirtualBox_getVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getVersionResultMsg.typecode)
        return response

    # op: IVirtualBox_getRevision
    def IVirtualBox_getRevision(self, request):
        if isinstance(request, IVirtualBox_getRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getRevisionResultMsg.typecode)
        return response

    # op: IVirtualBox_getPackageType
    def IVirtualBox_getPackageType(self, request):
        if isinstance(request, IVirtualBox_getPackageTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getPackageTypeResultMsg.typecode)
        return response

    # op: IVirtualBox_getAPIVersion
    def IVirtualBox_getAPIVersion(self, request):
        if isinstance(request, IVirtualBox_getAPIVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getAPIVersionResultMsg.typecode)
        return response

    # op: IVirtualBox_getHomeFolder
    def IVirtualBox_getHomeFolder(self, request):
        if isinstance(request, IVirtualBox_getHomeFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getHomeFolderResultMsg.typecode)
        return response

    # op: IVirtualBox_getSettingsFilePath
    def IVirtualBox_getSettingsFilePath(self, request):
        if isinstance(request, IVirtualBox_getSettingsFilePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getSettingsFilePathResultMsg.typecode)
        return response

    # op: IVirtualBox_getHost
    def IVirtualBox_getHost(self, request):
        if isinstance(request, IVirtualBox_getHostRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getHostResultMsg.typecode)
        return response

    # op: IVirtualBox_getSystemProperties
    def IVirtualBox_getSystemProperties(self, request):
        if isinstance(request, IVirtualBox_getSystemPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getSystemPropertiesResultMsg.typecode)
        return response

    # op: IVirtualBox_getMachines
    def IVirtualBox_getMachines(self, request):
        if isinstance(request, IVirtualBox_getMachinesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getMachinesResultMsg.typecode)
        return response

    # op: IVirtualBox_getHardDisks
    def IVirtualBox_getHardDisks(self, request):
        if isinstance(request, IVirtualBox_getHardDisksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getHardDisksResultMsg.typecode)
        return response

    # op: IVirtualBox_getDVDImages
    def IVirtualBox_getDVDImages(self, request):
        if isinstance(request, IVirtualBox_getDVDImagesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getDVDImagesResultMsg.typecode)
        return response

    # op: IVirtualBox_getFloppyImages
    def IVirtualBox_getFloppyImages(self, request):
        if isinstance(request, IVirtualBox_getFloppyImagesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getFloppyImagesResultMsg.typecode)
        return response

    # op: IVirtualBox_getProgressOperations
    def IVirtualBox_getProgressOperations(self, request):
        if isinstance(request, IVirtualBox_getProgressOperationsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getProgressOperationsResultMsg.typecode)
        return response

    # op: IVirtualBox_getGuestOSTypes
    def IVirtualBox_getGuestOSTypes(self, request):
        if isinstance(request, IVirtualBox_getGuestOSTypesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getGuestOSTypesResultMsg.typecode)
        return response

    # op: IVirtualBox_getSharedFolders
    def IVirtualBox_getSharedFolders(self, request):
        if isinstance(request, IVirtualBox_getSharedFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getSharedFoldersResultMsg.typecode)
        return response

    # op: IVirtualBox_getPerformanceCollector
    def IVirtualBox_getPerformanceCollector(self, request):
        if isinstance(request, IVirtualBox_getPerformanceCollectorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getPerformanceCollectorResultMsg.typecode)
        return response

    # op: IVirtualBox_getDHCPServers
    def IVirtualBox_getDHCPServers(self, request):
        if isinstance(request, IVirtualBox_getDHCPServersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getDHCPServersResultMsg.typecode)
        return response

    # op: IVirtualBox_getEventSource
    def IVirtualBox_getEventSource(self, request):
        if isinstance(request, IVirtualBox_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getEventSourceResultMsg.typecode)
        return response

    # op: IVirtualBox_getInternalNetworks
    def IVirtualBox_getInternalNetworks(self, request):
        if isinstance(request, IVirtualBox_getInternalNetworksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getInternalNetworksResultMsg.typecode)
        return response

    # op: IVirtualBox_getGenericNetworkDrivers
    def IVirtualBox_getGenericNetworkDrivers(self, request):
        if isinstance(request, IVirtualBox_getGenericNetworkDriversRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getGenericNetworkDriversResultMsg.typecode)
        return response

    # op: IVirtualBox_composeMachineFilename
    def IVirtualBox_composeMachineFilename(self, request):
        if isinstance(request, IVirtualBox_composeMachineFilenameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_composeMachineFilenameResultMsg.typecode)
        return response

    # op: IVirtualBox_createMachine
    def IVirtualBox_createMachine(self, request):
        if isinstance(request, IVirtualBox_createMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_openMachine
    def IVirtualBox_openMachine(self, request):
        if isinstance(request, IVirtualBox_openMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_openMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_registerMachine
    def IVirtualBox_registerMachine(self, request):
        if isinstance(request, IVirtualBox_registerMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_registerMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_findMachine
    def IVirtualBox_findMachine(self, request):
        if isinstance(request, IVirtualBox_findMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_findMachineResultMsg.typecode)
        return response

    # op: IVirtualBox_createAppliance
    def IVirtualBox_createAppliance(self, request):
        if isinstance(request, IVirtualBox_createApplianceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createApplianceResultMsg.typecode)
        return response

    # op: IVirtualBox_createHardDisk
    def IVirtualBox_createHardDisk(self, request):
        if isinstance(request, IVirtualBox_createHardDiskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createHardDiskResultMsg.typecode)
        return response

    # op: IVirtualBox_openMedium
    def IVirtualBox_openMedium(self, request):
        if isinstance(request, IVirtualBox_openMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_openMediumResultMsg.typecode)
        return response

    # op: IVirtualBox_findMedium
    def IVirtualBox_findMedium(self, request):
        if isinstance(request, IVirtualBox_findMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_findMediumResultMsg.typecode)
        return response

    # op: IVirtualBox_getGuestOSType
    def IVirtualBox_getGuestOSType(self, request):
        if isinstance(request, IVirtualBox_getGuestOSTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getGuestOSTypeResultMsg.typecode)
        return response

    # op: IVirtualBox_createSharedFolder
    def IVirtualBox_createSharedFolder(self, request):
        if isinstance(request, IVirtualBox_createSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createSharedFolderResultMsg.typecode)
        return response

    # op: IVirtualBox_removeSharedFolder
    def IVirtualBox_removeSharedFolder(self, request):
        if isinstance(request, IVirtualBox_removeSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_removeSharedFolderResultMsg.typecode)
        return response

    # op: IVirtualBox_getExtraDataKeys
    def IVirtualBox_getExtraDataKeys(self, request):
        if isinstance(request, IVirtualBox_getExtraDataKeysRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getExtraDataKeysResultMsg.typecode)
        return response

    # op: IVirtualBox_getExtraData
    def IVirtualBox_getExtraData(self, request):
        if isinstance(request, IVirtualBox_getExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_getExtraDataResultMsg.typecode)
        return response

    # op: IVirtualBox_setExtraData
    def IVirtualBox_setExtraData(self, request):
        if isinstance(request, IVirtualBox_setExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_setExtraDataResultMsg.typecode)
        return response

    # op: IVirtualBox_createDHCPServer
    def IVirtualBox_createDHCPServer(self, request):
        if isinstance(request, IVirtualBox_createDHCPServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_createDHCPServerResultMsg.typecode)
        return response

    # op: IVirtualBox_findDHCPServerByNetworkName
    def IVirtualBox_findDHCPServerByNetworkName(self, request):
        if isinstance(request, IVirtualBox_findDHCPServerByNetworkNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_findDHCPServerByNetworkNameResultMsg.typecode)
        return response

    # op: IVirtualBox_removeDHCPServer
    def IVirtualBox_removeDHCPServer(self, request):
        if isinstance(request, IVirtualBox_removeDHCPServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_removeDHCPServerResultMsg.typecode)
        return response

    # op: IVirtualBox_checkFirmwarePresent
    def IVirtualBox_checkFirmwarePresent(self, request):
        if isinstance(request, IVirtualBox_checkFirmwarePresentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualBox_checkFirmwarePresentResultMsg.typecode)
        return response

    # op: IVFSExplorer_getPath
    def IVFSExplorer_getPath(self, request):
        if isinstance(request, IVFSExplorer_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_getPathResultMsg.typecode)
        return response

    # op: IVFSExplorer_getType
    def IVFSExplorer_getType(self, request):
        if isinstance(request, IVFSExplorer_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_getTypeResultMsg.typecode)
        return response

    # op: IVFSExplorer_update
    def IVFSExplorer_update(self, request):
        if isinstance(request, IVFSExplorer_updateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_updateResultMsg.typecode)
        return response

    # op: IVFSExplorer_cd
    def IVFSExplorer_cd(self, request):
        if isinstance(request, IVFSExplorer_cdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_cdResultMsg.typecode)
        return response

    # op: IVFSExplorer_cdUp
    def IVFSExplorer_cdUp(self, request):
        if isinstance(request, IVFSExplorer_cdUpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_cdUpResultMsg.typecode)
        return response

    # op: IVFSExplorer_entryList
    def IVFSExplorer_entryList(self, request):
        if isinstance(request, IVFSExplorer_entryListRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_entryListResultMsg.typecode)
        return response

    # op: IVFSExplorer_exists
    def IVFSExplorer_exists(self, request):
        if isinstance(request, IVFSExplorer_existsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_existsResultMsg.typecode)
        return response

    # op: IVFSExplorer_remove
    def IVFSExplorer_remove(self, request):
        if isinstance(request, IVFSExplorer_removeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVFSExplorer_removeResultMsg.typecode)
        return response

    # op: IAppliance_getPath
    def IAppliance_getPath(self, request):
        if isinstance(request, IAppliance_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getPathResultMsg.typecode)
        return response

    # op: IAppliance_getDisks
    def IAppliance_getDisks(self, request):
        if isinstance(request, IAppliance_getDisksRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getDisksResultMsg.typecode)
        return response

    # op: IAppliance_getVirtualSystemDescriptions
    def IAppliance_getVirtualSystemDescriptions(self, request):
        if isinstance(request, IAppliance_getVirtualSystemDescriptionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getVirtualSystemDescriptionsResultMsg.typecode)
        return response

    # op: IAppliance_getMachines
    def IAppliance_getMachines(self, request):
        if isinstance(request, IAppliance_getMachinesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getMachinesResultMsg.typecode)
        return response

    # op: IAppliance_read
    def IAppliance_read(self, request):
        if isinstance(request, IAppliance_readRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_readResultMsg.typecode)
        return response

    # op: IAppliance_interpret
    def IAppliance_interpret(self, request):
        if isinstance(request, IAppliance_interpretRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_interpretResultMsg.typecode)
        return response

    # op: IAppliance_importMachines
    def IAppliance_importMachines(self, request):
        if isinstance(request, IAppliance_importMachinesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_importMachinesResultMsg.typecode)
        return response

    # op: IAppliance_createVFSExplorer
    def IAppliance_createVFSExplorer(self, request):
        if isinstance(request, IAppliance_createVFSExplorerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_createVFSExplorerResultMsg.typecode)
        return response

    # op: IAppliance_write
    def IAppliance_write(self, request):
        if isinstance(request, IAppliance_writeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_writeResultMsg.typecode)
        return response

    # op: IAppliance_getWarnings
    def IAppliance_getWarnings(self, request):
        if isinstance(request, IAppliance_getWarningsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAppliance_getWarningsResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getCount
    def IVirtualSystemDescription_getCount(self, request):
        if isinstance(request, IVirtualSystemDescription_getCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getCountResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getDescription
    def IVirtualSystemDescription_getDescription(self, request):
        if isinstance(request, IVirtualSystemDescription_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getDescriptionResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getDescriptionByType
    def IVirtualSystemDescription_getDescriptionByType(self, request):
        if isinstance(request, IVirtualSystemDescription_getDescriptionByTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getDescriptionByTypeResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_getValuesByType
    def IVirtualSystemDescription_getValuesByType(self, request):
        if isinstance(request, IVirtualSystemDescription_getValuesByTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_getValuesByTypeResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_setFinalValues
    def IVirtualSystemDescription_setFinalValues(self, request):
        if isinstance(request, IVirtualSystemDescription_setFinalValuesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_setFinalValuesResultMsg.typecode)
        return response

    # op: IVirtualSystemDescription_addDescription
    def IVirtualSystemDescription_addDescription(self, request):
        if isinstance(request, IVirtualSystemDescription_addDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVirtualSystemDescription_addDescriptionResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoFadeIn
    def IBIOSSettings_getLogoFadeIn(self, request):
        if isinstance(request, IBIOSSettings_getLogoFadeInRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoFadeInResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoFadeIn
    def IBIOSSettings_setLogoFadeIn(self, request):
        if isinstance(request, IBIOSSettings_setLogoFadeInRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoFadeInResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoFadeOut
    def IBIOSSettings_getLogoFadeOut(self, request):
        if isinstance(request, IBIOSSettings_getLogoFadeOutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoFadeOutResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoFadeOut
    def IBIOSSettings_setLogoFadeOut(self, request):
        if isinstance(request, IBIOSSettings_setLogoFadeOutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoFadeOutResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoDisplayTime
    def IBIOSSettings_getLogoDisplayTime(self, request):
        if isinstance(request, IBIOSSettings_getLogoDisplayTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoDisplayTimeResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoDisplayTime
    def IBIOSSettings_setLogoDisplayTime(self, request):
        if isinstance(request, IBIOSSettings_setLogoDisplayTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoDisplayTimeResultMsg.typecode)
        return response

    # op: IBIOSSettings_getLogoImagePath
    def IBIOSSettings_getLogoImagePath(self, request):
        if isinstance(request, IBIOSSettings_getLogoImagePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getLogoImagePathResultMsg.typecode)
        return response

    # op: IBIOSSettings_setLogoImagePath
    def IBIOSSettings_setLogoImagePath(self, request):
        if isinstance(request, IBIOSSettings_setLogoImagePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setLogoImagePathResultMsg.typecode)
        return response

    # op: IBIOSSettings_getBootMenuMode
    def IBIOSSettings_getBootMenuMode(self, request):
        if isinstance(request, IBIOSSettings_getBootMenuModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getBootMenuModeResultMsg.typecode)
        return response

    # op: IBIOSSettings_setBootMenuMode
    def IBIOSSettings_setBootMenuMode(self, request):
        if isinstance(request, IBIOSSettings_setBootMenuModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setBootMenuModeResultMsg.typecode)
        return response

    # op: IBIOSSettings_getACPIEnabled
    def IBIOSSettings_getACPIEnabled(self, request):
        if isinstance(request, IBIOSSettings_getACPIEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getACPIEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_setACPIEnabled
    def IBIOSSettings_setACPIEnabled(self, request):
        if isinstance(request, IBIOSSettings_setACPIEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setACPIEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_getIOAPICEnabled
    def IBIOSSettings_getIOAPICEnabled(self, request):
        if isinstance(request, IBIOSSettings_getIOAPICEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getIOAPICEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_setIOAPICEnabled
    def IBIOSSettings_setIOAPICEnabled(self, request):
        if isinstance(request, IBIOSSettings_setIOAPICEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setIOAPICEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_getTimeOffset
    def IBIOSSettings_getTimeOffset(self, request):
        if isinstance(request, IBIOSSettings_getTimeOffsetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getTimeOffsetResultMsg.typecode)
        return response

    # op: IBIOSSettings_setTimeOffset
    def IBIOSSettings_setTimeOffset(self, request):
        if isinstance(request, IBIOSSettings_setTimeOffsetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setTimeOffsetResultMsg.typecode)
        return response

    # op: IBIOSSettings_getPXEDebugEnabled
    def IBIOSSettings_getPXEDebugEnabled(self, request):
        if isinstance(request, IBIOSSettings_getPXEDebugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_getPXEDebugEnabledResultMsg.typecode)
        return response

    # op: IBIOSSettings_setPXEDebugEnabled
    def IBIOSSettings_setPXEDebugEnabled(self, request):
        if isinstance(request, IBIOSSettings_setPXEDebugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBIOSSettings_setPXEDebugEnabledResultMsg.typecode)
        return response

    # op: IMachine_getParent
    def IMachine_getParent(self, request):
        if isinstance(request, IMachine_getParentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getParentResultMsg.typecode)
        return response

    # op: IMachine_getAccessible
    def IMachine_getAccessible(self, request):
        if isinstance(request, IMachine_getAccessibleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccessibleResultMsg.typecode)
        return response

    # op: IMachine_getAccessError
    def IMachine_getAccessError(self, request):
        if isinstance(request, IMachine_getAccessErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccessErrorResultMsg.typecode)
        return response

    # op: IMachine_getName
    def IMachine_getName(self, request):
        if isinstance(request, IMachine_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getNameResultMsg.typecode)
        return response

    # op: IMachine_setName
    def IMachine_setName(self, request):
        if isinstance(request, IMachine_setNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setNameResultMsg.typecode)
        return response

    # op: IMachine_getDescription
    def IMachine_getDescription(self, request):
        if isinstance(request, IMachine_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getDescriptionResultMsg.typecode)
        return response

    # op: IMachine_setDescription
    def IMachine_setDescription(self, request):
        if isinstance(request, IMachine_setDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setDescriptionResultMsg.typecode)
        return response

    # op: IMachine_getId
    def IMachine_getId(self, request):
        if isinstance(request, IMachine_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getIdResultMsg.typecode)
        return response

    # op: IMachine_getOSTypeId
    def IMachine_getOSTypeId(self, request):
        if isinstance(request, IMachine_getOSTypeIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getOSTypeIdResultMsg.typecode)
        return response

    # op: IMachine_setOSTypeId
    def IMachine_setOSTypeId(self, request):
        if isinstance(request, IMachine_setOSTypeIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setOSTypeIdResultMsg.typecode)
        return response

    # op: IMachine_getHardwareVersion
    def IMachine_getHardwareVersion(self, request):
        if isinstance(request, IMachine_getHardwareVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHardwareVersionResultMsg.typecode)
        return response

    # op: IMachine_setHardwareVersion
    def IMachine_setHardwareVersion(self, request):
        if isinstance(request, IMachine_setHardwareVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHardwareVersionResultMsg.typecode)
        return response

    # op: IMachine_getHardwareUUID
    def IMachine_getHardwareUUID(self, request):
        if isinstance(request, IMachine_getHardwareUUIDRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHardwareUUIDResultMsg.typecode)
        return response

    # op: IMachine_setHardwareUUID
    def IMachine_setHardwareUUID(self, request):
        if isinstance(request, IMachine_setHardwareUUIDRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHardwareUUIDResultMsg.typecode)
        return response

    # op: IMachine_getCPUCount
    def IMachine_getCPUCount(self, request):
        if isinstance(request, IMachine_getCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUCountResultMsg.typecode)
        return response

    # op: IMachine_setCPUCount
    def IMachine_setCPUCount(self, request):
        if isinstance(request, IMachine_setCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUCountResultMsg.typecode)
        return response

    # op: IMachine_getCPUHotPlugEnabled
    def IMachine_getCPUHotPlugEnabled(self, request):
        if isinstance(request, IMachine_getCPUHotPlugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUHotPlugEnabledResultMsg.typecode)
        return response

    # op: IMachine_setCPUHotPlugEnabled
    def IMachine_setCPUHotPlugEnabled(self, request):
        if isinstance(request, IMachine_setCPUHotPlugEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUHotPlugEnabledResultMsg.typecode)
        return response

    # op: IMachine_getCPUExecutionCap
    def IMachine_getCPUExecutionCap(self, request):
        if isinstance(request, IMachine_getCPUExecutionCapRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUExecutionCapResultMsg.typecode)
        return response

    # op: IMachine_setCPUExecutionCap
    def IMachine_setCPUExecutionCap(self, request):
        if isinstance(request, IMachine_setCPUExecutionCapRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUExecutionCapResultMsg.typecode)
        return response

    # op: IMachine_getMemorySize
    def IMachine_getMemorySize(self, request):
        if isinstance(request, IMachine_getMemorySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMemorySizeResultMsg.typecode)
        return response

    # op: IMachine_setMemorySize
    def IMachine_setMemorySize(self, request):
        if isinstance(request, IMachine_setMemorySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setMemorySizeResultMsg.typecode)
        return response

    # op: IMachine_getMemoryBalloonSize
    def IMachine_getMemoryBalloonSize(self, request):
        if isinstance(request, IMachine_getMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IMachine_setMemoryBalloonSize
    def IMachine_setMemoryBalloonSize(self, request):
        if isinstance(request, IMachine_setMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IMachine_getPageFusionEnabled
    def IMachine_getPageFusionEnabled(self, request):
        if isinstance(request, IMachine_getPageFusionEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getPageFusionEnabledResultMsg.typecode)
        return response

    # op: IMachine_setPageFusionEnabled
    def IMachine_setPageFusionEnabled(self, request):
        if isinstance(request, IMachine_setPageFusionEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setPageFusionEnabledResultMsg.typecode)
        return response

    # op: IMachine_getVRAMSize
    def IMachine_getVRAMSize(self, request):
        if isinstance(request, IMachine_getVRAMSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getVRAMSizeResultMsg.typecode)
        return response

    # op: IMachine_setVRAMSize
    def IMachine_setVRAMSize(self, request):
        if isinstance(request, IMachine_setVRAMSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setVRAMSizeResultMsg.typecode)
        return response

    # op: IMachine_getAccelerate3DEnabled
    def IMachine_getAccelerate3DEnabled(self, request):
        if isinstance(request, IMachine_getAccelerate3DEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccelerate3DEnabledResultMsg.typecode)
        return response

    # op: IMachine_setAccelerate3DEnabled
    def IMachine_setAccelerate3DEnabled(self, request):
        if isinstance(request, IMachine_setAccelerate3DEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setAccelerate3DEnabledResultMsg.typecode)
        return response

    # op: IMachine_getAccelerate2DVideoEnabled
    def IMachine_getAccelerate2DVideoEnabled(self, request):
        if isinstance(request, IMachine_getAccelerate2DVideoEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAccelerate2DVideoEnabledResultMsg.typecode)
        return response

    # op: IMachine_setAccelerate2DVideoEnabled
    def IMachine_setAccelerate2DVideoEnabled(self, request):
        if isinstance(request, IMachine_setAccelerate2DVideoEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setAccelerate2DVideoEnabledResultMsg.typecode)
        return response

    # op: IMachine_getMonitorCount
    def IMachine_getMonitorCount(self, request):
        if isinstance(request, IMachine_getMonitorCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMonitorCountResultMsg.typecode)
        return response

    # op: IMachine_setMonitorCount
    def IMachine_setMonitorCount(self, request):
        if isinstance(request, IMachine_setMonitorCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setMonitorCountResultMsg.typecode)
        return response

    # op: IMachine_getBIOSSettings
    def IMachine_getBIOSSettings(self, request):
        if isinstance(request, IMachine_getBIOSSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getBIOSSettingsResultMsg.typecode)
        return response

    # op: IMachine_getFirmwareType
    def IMachine_getFirmwareType(self, request):
        if isinstance(request, IMachine_getFirmwareTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFirmwareTypeResultMsg.typecode)
        return response

    # op: IMachine_setFirmwareType
    def IMachine_setFirmwareType(self, request):
        if isinstance(request, IMachine_setFirmwareTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFirmwareTypeResultMsg.typecode)
        return response

    # op: IMachine_getPointingHidType
    def IMachine_getPointingHidType(self, request):
        if isinstance(request, IMachine_getPointingHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getPointingHidTypeResultMsg.typecode)
        return response

    # op: IMachine_setPointingHidType
    def IMachine_setPointingHidType(self, request):
        if isinstance(request, IMachine_setPointingHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setPointingHidTypeResultMsg.typecode)
        return response

    # op: IMachine_getKeyboardHidType
    def IMachine_getKeyboardHidType(self, request):
        if isinstance(request, IMachine_getKeyboardHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getKeyboardHidTypeResultMsg.typecode)
        return response

    # op: IMachine_setKeyboardHidType
    def IMachine_setKeyboardHidType(self, request):
        if isinstance(request, IMachine_setKeyboardHidTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setKeyboardHidTypeResultMsg.typecode)
        return response

    # op: IMachine_getHpetEnabled
    def IMachine_getHpetEnabled(self, request):
        if isinstance(request, IMachine_getHpetEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHpetEnabledResultMsg.typecode)
        return response

    # op: IMachine_setHpetEnabled
    def IMachine_setHpetEnabled(self, request):
        if isinstance(request, IMachine_setHpetEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHpetEnabledResultMsg.typecode)
        return response

    # op: IMachine_getChipsetType
    def IMachine_getChipsetType(self, request):
        if isinstance(request, IMachine_getChipsetTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getChipsetTypeResultMsg.typecode)
        return response

    # op: IMachine_setChipsetType
    def IMachine_setChipsetType(self, request):
        if isinstance(request, IMachine_setChipsetTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setChipsetTypeResultMsg.typecode)
        return response

    # op: IMachine_getSnapshotFolder
    def IMachine_getSnapshotFolder(self, request):
        if isinstance(request, IMachine_getSnapshotFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSnapshotFolderResultMsg.typecode)
        return response

    # op: IMachine_setSnapshotFolder
    def IMachine_setSnapshotFolder(self, request):
        if isinstance(request, IMachine_setSnapshotFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setSnapshotFolderResultMsg.typecode)
        return response

    # op: IMachine_getVRDEServer
    def IMachine_getVRDEServer(self, request):
        if isinstance(request, IMachine_getVRDEServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getVRDEServerResultMsg.typecode)
        return response

    # op: IMachine_getEmulatedUSBWebcameraEnabled
    def IMachine_getEmulatedUSBWebcameraEnabled(self, request):
        if isinstance(request, IMachine_getEmulatedUSBWebcameraEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getEmulatedUSBWebcameraEnabledResultMsg.typecode)
        return response

    # op: IMachine_setEmulatedUSBWebcameraEnabled
    def IMachine_setEmulatedUSBWebcameraEnabled(self, request):
        if isinstance(request, IMachine_setEmulatedUSBWebcameraEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setEmulatedUSBWebcameraEnabledResultMsg.typecode)
        return response

    # op: IMachine_getEmulatedUSBCardReaderEnabled
    def IMachine_getEmulatedUSBCardReaderEnabled(self, request):
        if isinstance(request, IMachine_getEmulatedUSBCardReaderEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getEmulatedUSBCardReaderEnabledResultMsg.typecode)
        return response

    # op: IMachine_setEmulatedUSBCardReaderEnabled
    def IMachine_setEmulatedUSBCardReaderEnabled(self, request):
        if isinstance(request, IMachine_setEmulatedUSBCardReaderEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setEmulatedUSBCardReaderEnabledResultMsg.typecode)
        return response

    # op: IMachine_getMediumAttachments
    def IMachine_getMediumAttachments(self, request):
        if isinstance(request, IMachine_getMediumAttachmentsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumAttachmentsResultMsg.typecode)
        return response

    # op: IMachine_getUSBController
    def IMachine_getUSBController(self, request):
        if isinstance(request, IMachine_getUSBControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getUSBControllerResultMsg.typecode)
        return response

    # op: IMachine_getAudioAdapter
    def IMachine_getAudioAdapter(self, request):
        if isinstance(request, IMachine_getAudioAdapterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getAudioAdapterResultMsg.typecode)
        return response

    # op: IMachine_getStorageControllers
    def IMachine_getStorageControllers(self, request):
        if isinstance(request, IMachine_getStorageControllersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStorageControllersResultMsg.typecode)
        return response

    # op: IMachine_getSettingsFilePath
    def IMachine_getSettingsFilePath(self, request):
        if isinstance(request, IMachine_getSettingsFilePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSettingsFilePathResultMsg.typecode)
        return response

    # op: IMachine_getSettingsModified
    def IMachine_getSettingsModified(self, request):
        if isinstance(request, IMachine_getSettingsModifiedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSettingsModifiedResultMsg.typecode)
        return response

    # op: IMachine_getSessionState
    def IMachine_getSessionState(self, request):
        if isinstance(request, IMachine_getSessionStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSessionStateResultMsg.typecode)
        return response

    # op: IMachine_getSessionType
    def IMachine_getSessionType(self, request):
        if isinstance(request, IMachine_getSessionTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSessionTypeResultMsg.typecode)
        return response

    # op: IMachine_getSessionPid
    def IMachine_getSessionPid(self, request):
        if isinstance(request, IMachine_getSessionPidRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSessionPidResultMsg.typecode)
        return response

    # op: IMachine_getState
    def IMachine_getState(self, request):
        if isinstance(request, IMachine_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStateResultMsg.typecode)
        return response

    # op: IMachine_getLastStateChange
    def IMachine_getLastStateChange(self, request):
        if isinstance(request, IMachine_getLastStateChangeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getLastStateChangeResultMsg.typecode)
        return response

    # op: IMachine_getStateFilePath
    def IMachine_getStateFilePath(self, request):
        if isinstance(request, IMachine_getStateFilePathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStateFilePathResultMsg.typecode)
        return response

    # op: IMachine_getLogFolder
    def IMachine_getLogFolder(self, request):
        if isinstance(request, IMachine_getLogFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getLogFolderResultMsg.typecode)
        return response

    # op: IMachine_getCurrentSnapshot
    def IMachine_getCurrentSnapshot(self, request):
        if isinstance(request, IMachine_getCurrentSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCurrentSnapshotResultMsg.typecode)
        return response

    # op: IMachine_getSnapshotCount
    def IMachine_getSnapshotCount(self, request):
        if isinstance(request, IMachine_getSnapshotCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSnapshotCountResultMsg.typecode)
        return response

    # op: IMachine_getCurrentStateModified
    def IMachine_getCurrentStateModified(self, request):
        if isinstance(request, IMachine_getCurrentStateModifiedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCurrentStateModifiedResultMsg.typecode)
        return response

    # op: IMachine_getSharedFolders
    def IMachine_getSharedFolders(self, request):
        if isinstance(request, IMachine_getSharedFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSharedFoldersResultMsg.typecode)
        return response

    # op: IMachine_getClipboardMode
    def IMachine_getClipboardMode(self, request):
        if isinstance(request, IMachine_getClipboardModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getClipboardModeResultMsg.typecode)
        return response

    # op: IMachine_setClipboardMode
    def IMachine_setClipboardMode(self, request):
        if isinstance(request, IMachine_setClipboardModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setClipboardModeResultMsg.typecode)
        return response

    # op: IMachine_getGuestPropertyNotificationPatterns
    def IMachine_getGuestPropertyNotificationPatterns(self, request):
        if isinstance(request, IMachine_getGuestPropertyNotificationPatternsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyNotificationPatternsResultMsg.typecode)
        return response

    # op: IMachine_setGuestPropertyNotificationPatterns
    def IMachine_setGuestPropertyNotificationPatterns(self, request):
        if isinstance(request, IMachine_setGuestPropertyNotificationPatternsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setGuestPropertyNotificationPatternsResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterEnabled
    def IMachine_getTeleporterEnabled(self, request):
        if isinstance(request, IMachine_getTeleporterEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterEnabledResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterEnabled
    def IMachine_setTeleporterEnabled(self, request):
        if isinstance(request, IMachine_setTeleporterEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterEnabledResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterPort
    def IMachine_getTeleporterPort(self, request):
        if isinstance(request, IMachine_getTeleporterPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterPortResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterPort
    def IMachine_setTeleporterPort(self, request):
        if isinstance(request, IMachine_setTeleporterPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterPortResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterAddress
    def IMachine_getTeleporterAddress(self, request):
        if isinstance(request, IMachine_getTeleporterAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterAddressResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterAddress
    def IMachine_setTeleporterAddress(self, request):
        if isinstance(request, IMachine_setTeleporterAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterAddressResultMsg.typecode)
        return response

    # op: IMachine_getTeleporterPassword
    def IMachine_getTeleporterPassword(self, request):
        if isinstance(request, IMachine_getTeleporterPasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getTeleporterPasswordResultMsg.typecode)
        return response

    # op: IMachine_setTeleporterPassword
    def IMachine_setTeleporterPassword(self, request):
        if isinstance(request, IMachine_setTeleporterPasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setTeleporterPasswordResultMsg.typecode)
        return response

    # op: IMachine_getFaultToleranceState
    def IMachine_getFaultToleranceState(self, request):
        if isinstance(request, IMachine_getFaultToleranceStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultToleranceStateResultMsg.typecode)
        return response

    # op: IMachine_setFaultToleranceState
    def IMachine_setFaultToleranceState(self, request):
        if isinstance(request, IMachine_setFaultToleranceStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultToleranceStateResultMsg.typecode)
        return response

    # op: IMachine_getFaultTolerancePort
    def IMachine_getFaultTolerancePort(self, request):
        if isinstance(request, IMachine_getFaultTolerancePortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultTolerancePortResultMsg.typecode)
        return response

    # op: IMachine_setFaultTolerancePort
    def IMachine_setFaultTolerancePort(self, request):
        if isinstance(request, IMachine_setFaultTolerancePortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultTolerancePortResultMsg.typecode)
        return response

    # op: IMachine_getFaultToleranceAddress
    def IMachine_getFaultToleranceAddress(self, request):
        if isinstance(request, IMachine_getFaultToleranceAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultToleranceAddressResultMsg.typecode)
        return response

    # op: IMachine_setFaultToleranceAddress
    def IMachine_setFaultToleranceAddress(self, request):
        if isinstance(request, IMachine_setFaultToleranceAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultToleranceAddressResultMsg.typecode)
        return response

    # op: IMachine_getFaultTolerancePassword
    def IMachine_getFaultTolerancePassword(self, request):
        if isinstance(request, IMachine_getFaultTolerancePasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultTolerancePasswordResultMsg.typecode)
        return response

    # op: IMachine_setFaultTolerancePassword
    def IMachine_setFaultTolerancePassword(self, request):
        if isinstance(request, IMachine_setFaultTolerancePasswordRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultTolerancePasswordResultMsg.typecode)
        return response

    # op: IMachine_getFaultToleranceSyncInterval
    def IMachine_getFaultToleranceSyncInterval(self, request):
        if isinstance(request, IMachine_getFaultToleranceSyncIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getFaultToleranceSyncIntervalResultMsg.typecode)
        return response

    # op: IMachine_setFaultToleranceSyncInterval
    def IMachine_setFaultToleranceSyncInterval(self, request):
        if isinstance(request, IMachine_setFaultToleranceSyncIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setFaultToleranceSyncIntervalResultMsg.typecode)
        return response

    # op: IMachine_getRTCUseUTC
    def IMachine_getRTCUseUTC(self, request):
        if isinstance(request, IMachine_getRTCUseUTCRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getRTCUseUTCResultMsg.typecode)
        return response

    # op: IMachine_setRTCUseUTC
    def IMachine_setRTCUseUTC(self, request):
        if isinstance(request, IMachine_setRTCUseUTCRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setRTCUseUTCResultMsg.typecode)
        return response

    # op: IMachine_getIoCacheEnabled
    def IMachine_getIoCacheEnabled(self, request):
        if isinstance(request, IMachine_getIoCacheEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getIoCacheEnabledResultMsg.typecode)
        return response

    # op: IMachine_setIoCacheEnabled
    def IMachine_setIoCacheEnabled(self, request):
        if isinstance(request, IMachine_setIoCacheEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setIoCacheEnabledResultMsg.typecode)
        return response

    # op: IMachine_getIoCacheSize
    def IMachine_getIoCacheSize(self, request):
        if isinstance(request, IMachine_getIoCacheSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getIoCacheSizeResultMsg.typecode)
        return response

    # op: IMachine_setIoCacheSize
    def IMachine_setIoCacheSize(self, request):
        if isinstance(request, IMachine_setIoCacheSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setIoCacheSizeResultMsg.typecode)
        return response

    # op: IMachine_getBandwidthControl
    def IMachine_getBandwidthControl(self, request):
        if isinstance(request, IMachine_getBandwidthControlRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getBandwidthControlResultMsg.typecode)
        return response

    # op: IMachine_getPciDeviceAssignments
    def IMachine_getPciDeviceAssignments(self, request):
        if isinstance(request, IMachine_getPciDeviceAssignmentsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getPciDeviceAssignmentsResultMsg.typecode)
        return response

    # op: IMachine_lockMachine
    def IMachine_lockMachine(self, request):
        if isinstance(request, IMachine_lockMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_lockMachineResultMsg.typecode)
        return response

    # op: IMachine_launchVMProcess
    def IMachine_launchVMProcess(self, request):
        if isinstance(request, IMachine_launchVMProcessRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_launchVMProcessResultMsg.typecode)
        return response

    # op: IMachine_setBootOrder
    def IMachine_setBootOrder(self, request):
        if isinstance(request, IMachine_setBootOrderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setBootOrderResultMsg.typecode)
        return response

    # op: IMachine_getBootOrder
    def IMachine_getBootOrder(self, request):
        if isinstance(request, IMachine_getBootOrderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getBootOrderResultMsg.typecode)
        return response

    # op: IMachine_attachDevice
    def IMachine_attachDevice(self, request):
        if isinstance(request, IMachine_attachDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_attachDeviceResultMsg.typecode)
        return response

    # op: IMachine_detachDevice
    def IMachine_detachDevice(self, request):
        if isinstance(request, IMachine_detachDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_detachDeviceResultMsg.typecode)
        return response

    # op: IMachine_passthroughDevice
    def IMachine_passthroughDevice(self, request):
        if isinstance(request, IMachine_passthroughDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_passthroughDeviceResultMsg.typecode)
        return response

    # op: IMachine_temporaryEjectDevice
    def IMachine_temporaryEjectDevice(self, request):
        if isinstance(request, IMachine_temporaryEjectDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_temporaryEjectDeviceResultMsg.typecode)
        return response

    # op: IMachine_nonRotationalDevice
    def IMachine_nonRotationalDevice(self, request):
        if isinstance(request, IMachine_nonRotationalDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_nonRotationalDeviceResultMsg.typecode)
        return response

    # op: IMachine_setBandwidthGroupForDevice
    def IMachine_setBandwidthGroupForDevice(self, request):
        if isinstance(request, IMachine_setBandwidthGroupForDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setBandwidthGroupForDeviceResultMsg.typecode)
        return response

    # op: IMachine_mountMedium
    def IMachine_mountMedium(self, request):
        if isinstance(request, IMachine_mountMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_mountMediumResultMsg.typecode)
        return response

    # op: IMachine_getMedium
    def IMachine_getMedium(self, request):
        if isinstance(request, IMachine_getMediumRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumResultMsg.typecode)
        return response

    # op: IMachine_getMediumAttachmentsOfController
    def IMachine_getMediumAttachmentsOfController(self, request):
        if isinstance(request, IMachine_getMediumAttachmentsOfControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumAttachmentsOfControllerResultMsg.typecode)
        return response

    # op: IMachine_getMediumAttachment
    def IMachine_getMediumAttachment(self, request):
        if isinstance(request, IMachine_getMediumAttachmentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getMediumAttachmentResultMsg.typecode)
        return response

    # op: IMachine_attachHostPciDevice
    def IMachine_attachHostPciDevice(self, request):
        if isinstance(request, IMachine_attachHostPciDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_attachHostPciDeviceResultMsg.typecode)
        return response

    # op: IMachine_detachHostPciDevice
    def IMachine_detachHostPciDevice(self, request):
        if isinstance(request, IMachine_detachHostPciDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_detachHostPciDeviceResultMsg.typecode)
        return response

    # op: IMachine_getNetworkAdapter
    def IMachine_getNetworkAdapter(self, request):
        if isinstance(request, IMachine_getNetworkAdapterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getNetworkAdapterResultMsg.typecode)
        return response

    # op: IMachine_addStorageController
    def IMachine_addStorageController(self, request):
        if isinstance(request, IMachine_addStorageControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_addStorageControllerResultMsg.typecode)
        return response

    # op: IMachine_getStorageControllerByName
    def IMachine_getStorageControllerByName(self, request):
        if isinstance(request, IMachine_getStorageControllerByNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStorageControllerByNameResultMsg.typecode)
        return response

    # op: IMachine_getStorageControllerByInstance
    def IMachine_getStorageControllerByInstance(self, request):
        if isinstance(request, IMachine_getStorageControllerByInstanceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getStorageControllerByInstanceResultMsg.typecode)
        return response

    # op: IMachine_removeStorageController
    def IMachine_removeStorageController(self, request):
        if isinstance(request, IMachine_removeStorageControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeStorageControllerResultMsg.typecode)
        return response

    # op: IMachine_setStorageControllerBootable
    def IMachine_setStorageControllerBootable(self, request):
        if isinstance(request, IMachine_setStorageControllerBootableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setStorageControllerBootableResultMsg.typecode)
        return response

    # op: IMachine_getSerialPort
    def IMachine_getSerialPort(self, request):
        if isinstance(request, IMachine_getSerialPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getSerialPortResultMsg.typecode)
        return response

    # op: IMachine_getParallelPort
    def IMachine_getParallelPort(self, request):
        if isinstance(request, IMachine_getParallelPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getParallelPortResultMsg.typecode)
        return response

    # op: IMachine_getExtraDataKeys
    def IMachine_getExtraDataKeys(self, request):
        if isinstance(request, IMachine_getExtraDataKeysRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getExtraDataKeysResultMsg.typecode)
        return response

    # op: IMachine_getExtraData
    def IMachine_getExtraData(self, request):
        if isinstance(request, IMachine_getExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getExtraDataResultMsg.typecode)
        return response

    # op: IMachine_setExtraData
    def IMachine_setExtraData(self, request):
        if isinstance(request, IMachine_setExtraDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setExtraDataResultMsg.typecode)
        return response

    # op: IMachine_getCPUProperty
    def IMachine_getCPUProperty(self, request):
        if isinstance(request, IMachine_getCPUPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUPropertyResultMsg.typecode)
        return response

    # op: IMachine_setCPUProperty
    def IMachine_setCPUProperty(self, request):
        if isinstance(request, IMachine_setCPUPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUPropertyResultMsg.typecode)
        return response

    # op: IMachine_getCPUIDLeaf
    def IMachine_getCPUIDLeaf(self, request):
        if isinstance(request, IMachine_getCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUIDLeafResultMsg.typecode)
        return response

    # op: IMachine_setCPUIDLeaf
    def IMachine_setCPUIDLeaf(self, request):
        if isinstance(request, IMachine_setCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setCPUIDLeafResultMsg.typecode)
        return response

    # op: IMachine_removeCPUIDLeaf
    def IMachine_removeCPUIDLeaf(self, request):
        if isinstance(request, IMachine_removeCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeCPUIDLeafResultMsg.typecode)
        return response

    # op: IMachine_removeAllCPUIDLeaves
    def IMachine_removeAllCPUIDLeaves(self, request):
        if isinstance(request, IMachine_removeAllCPUIDLeavesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeAllCPUIDLeavesResultMsg.typecode)
        return response

    # op: IMachine_getHWVirtExProperty
    def IMachine_getHWVirtExProperty(self, request):
        if isinstance(request, IMachine_getHWVirtExPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getHWVirtExPropertyResultMsg.typecode)
        return response

    # op: IMachine_setHWVirtExProperty
    def IMachine_setHWVirtExProperty(self, request):
        if isinstance(request, IMachine_setHWVirtExPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setHWVirtExPropertyResultMsg.typecode)
        return response

    # op: IMachine_saveSettings
    def IMachine_saveSettings(self, request):
        if isinstance(request, IMachine_saveSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_saveSettingsResultMsg.typecode)
        return response

    # op: IMachine_discardSettings
    def IMachine_discardSettings(self, request):
        if isinstance(request, IMachine_discardSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_discardSettingsResultMsg.typecode)
        return response

    # op: IMachine_unregister
    def IMachine_unregister(self, request):
        if isinstance(request, IMachine_unregisterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_unregisterResultMsg.typecode)
        return response

    # op: IMachine_delete
    def IMachine_delete(self, request):
        if isinstance(request, IMachine_deleteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_deleteResultMsg.typecode)
        return response

    # op: IMachine_export
    def IMachine_export(self, request):
        if isinstance(request, IMachine_exportRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_exportResultMsg.typecode)
        return response

    # op: IMachine_findSnapshot
    def IMachine_findSnapshot(self, request):
        if isinstance(request, IMachine_findSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_findSnapshotResultMsg.typecode)
        return response

    # op: IMachine_createSharedFolder
    def IMachine_createSharedFolder(self, request):
        if isinstance(request, IMachine_createSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_createSharedFolderResultMsg.typecode)
        return response

    # op: IMachine_removeSharedFolder
    def IMachine_removeSharedFolder(self, request):
        if isinstance(request, IMachine_removeSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_removeSharedFolderResultMsg.typecode)
        return response

    # op: IMachine_canShowConsoleWindow
    def IMachine_canShowConsoleWindow(self, request):
        if isinstance(request, IMachine_canShowConsoleWindowRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_canShowConsoleWindowResultMsg.typecode)
        return response

    # op: IMachine_showConsoleWindow
    def IMachine_showConsoleWindow(self, request):
        if isinstance(request, IMachine_showConsoleWindowRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_showConsoleWindowResultMsg.typecode)
        return response

    # op: IMachine_getGuestProperty
    def IMachine_getGuestProperty(self, request):
        if isinstance(request, IMachine_getGuestPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyResultMsg.typecode)
        return response

    # op: IMachine_getGuestPropertyValue
    def IMachine_getGuestPropertyValue(self, request):
        if isinstance(request, IMachine_getGuestPropertyValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyValueResultMsg.typecode)
        return response

    # op: IMachine_getGuestPropertyTimestamp
    def IMachine_getGuestPropertyTimestamp(self, request):
        if isinstance(request, IMachine_getGuestPropertyTimestampRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getGuestPropertyTimestampResultMsg.typecode)
        return response

    # op: IMachine_setGuestProperty
    def IMachine_setGuestProperty(self, request):
        if isinstance(request, IMachine_setGuestPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setGuestPropertyResultMsg.typecode)
        return response

    # op: IMachine_setGuestPropertyValue
    def IMachine_setGuestPropertyValue(self, request):
        if isinstance(request, IMachine_setGuestPropertyValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_setGuestPropertyValueResultMsg.typecode)
        return response

    # op: IMachine_enumerateGuestProperties
    def IMachine_enumerateGuestProperties(self, request):
        if isinstance(request, IMachine_enumerateGuestPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_enumerateGuestPropertiesResultMsg.typecode)
        return response

    # op: IMachine_querySavedGuestSize
    def IMachine_querySavedGuestSize(self, request):
        if isinstance(request, IMachine_querySavedGuestSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_querySavedGuestSizeResultMsg.typecode)
        return response

    # op: IMachine_querySavedThumbnailSize
    def IMachine_querySavedThumbnailSize(self, request):
        if isinstance(request, IMachine_querySavedThumbnailSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_querySavedThumbnailSizeResultMsg.typecode)
        return response

    # op: IMachine_readSavedThumbnailToArray
    def IMachine_readSavedThumbnailToArray(self, request):
        if isinstance(request, IMachine_readSavedThumbnailToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readSavedThumbnailToArrayResultMsg.typecode)
        return response

    # op: IMachine_readSavedThumbnailPNGToArray
    def IMachine_readSavedThumbnailPNGToArray(self, request):
        if isinstance(request, IMachine_readSavedThumbnailPNGToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readSavedThumbnailPNGToArrayResultMsg.typecode)
        return response

    # op: IMachine_querySavedScreenshotPNGSize
    def IMachine_querySavedScreenshotPNGSize(self, request):
        if isinstance(request, IMachine_querySavedScreenshotPNGSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_querySavedScreenshotPNGSizeResultMsg.typecode)
        return response

    # op: IMachine_readSavedScreenshotPNGToArray
    def IMachine_readSavedScreenshotPNGToArray(self, request):
        if isinstance(request, IMachine_readSavedScreenshotPNGToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readSavedScreenshotPNGToArrayResultMsg.typecode)
        return response

    # op: IMachine_hotPlugCPU
    def IMachine_hotPlugCPU(self, request):
        if isinstance(request, IMachine_hotPlugCPURequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_hotPlugCPUResultMsg.typecode)
        return response

    # op: IMachine_hotUnplugCPU
    def IMachine_hotUnplugCPU(self, request):
        if isinstance(request, IMachine_hotUnplugCPURequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_hotUnplugCPUResultMsg.typecode)
        return response

    # op: IMachine_getCPUStatus
    def IMachine_getCPUStatus(self, request):
        if isinstance(request, IMachine_getCPUStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_getCPUStatusResultMsg.typecode)
        return response

    # op: IMachine_queryLogFilename
    def IMachine_queryLogFilename(self, request):
        if isinstance(request, IMachine_queryLogFilenameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_queryLogFilenameResultMsg.typecode)
        return response

    # op: IMachine_readLog
    def IMachine_readLog(self, request):
        if isinstance(request, IMachine_readLogRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_readLogResultMsg.typecode)
        return response

    # op: IMachine_cloneTo
    def IMachine_cloneTo(self, request):
        if isinstance(request, IMachine_cloneToRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachine_cloneToResultMsg.typecode)
        return response

    # op: IConsole_getMachine
    def IConsole_getMachine(self, request):
        if isinstance(request, IConsole_getMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getMachineResultMsg.typecode)
        return response

    # op: IConsole_getState
    def IConsole_getState(self, request):
        if isinstance(request, IConsole_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getStateResultMsg.typecode)
        return response

    # op: IConsole_getGuest
    def IConsole_getGuest(self, request):
        if isinstance(request, IConsole_getGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getGuestResultMsg.typecode)
        return response

    # op: IConsole_getKeyboard
    def IConsole_getKeyboard(self, request):
        if isinstance(request, IConsole_getKeyboardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getKeyboardResultMsg.typecode)
        return response

    # op: IConsole_getMouse
    def IConsole_getMouse(self, request):
        if isinstance(request, IConsole_getMouseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getMouseResultMsg.typecode)
        return response

    # op: IConsole_getDisplay
    def IConsole_getDisplay(self, request):
        if isinstance(request, IConsole_getDisplayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getDisplayResultMsg.typecode)
        return response

    # op: IConsole_getUSBDevices
    def IConsole_getUSBDevices(self, request):
        if isinstance(request, IConsole_getUSBDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getUSBDevicesResultMsg.typecode)
        return response

    # op: IConsole_getRemoteUSBDevices
    def IConsole_getRemoteUSBDevices(self, request):
        if isinstance(request, IConsole_getRemoteUSBDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getRemoteUSBDevicesResultMsg.typecode)
        return response

    # op: IConsole_getSharedFolders
    def IConsole_getSharedFolders(self, request):
        if isinstance(request, IConsole_getSharedFoldersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getSharedFoldersResultMsg.typecode)
        return response

    # op: IConsole_getVRDEServerInfo
    def IConsole_getVRDEServerInfo(self, request):
        if isinstance(request, IConsole_getVRDEServerInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getVRDEServerInfoResultMsg.typecode)
        return response

    # op: IConsole_getEventSource
    def IConsole_getEventSource(self, request):
        if isinstance(request, IConsole_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getEventSourceResultMsg.typecode)
        return response

    # op: IConsole_getAttachedPciDevices
    def IConsole_getAttachedPciDevices(self, request):
        if isinstance(request, IConsole_getAttachedPciDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getAttachedPciDevicesResultMsg.typecode)
        return response

    # op: IConsole_getUseHostClipboard
    def IConsole_getUseHostClipboard(self, request):
        if isinstance(request, IConsole_getUseHostClipboardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getUseHostClipboardResultMsg.typecode)
        return response

    # op: IConsole_setUseHostClipboard
    def IConsole_setUseHostClipboard(self, request):
        if isinstance(request, IConsole_setUseHostClipboardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_setUseHostClipboardResultMsg.typecode)
        return response

    # op: IConsole_powerUp
    def IConsole_powerUp(self, request):
        if isinstance(request, IConsole_powerUpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerUpResultMsg.typecode)
        return response

    # op: IConsole_powerUpPaused
    def IConsole_powerUpPaused(self, request):
        if isinstance(request, IConsole_powerUpPausedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerUpPausedResultMsg.typecode)
        return response

    # op: IConsole_powerDown
    def IConsole_powerDown(self, request):
        if isinstance(request, IConsole_powerDownRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerDownResultMsg.typecode)
        return response

    # op: IConsole_reset
    def IConsole_reset(self, request):
        if isinstance(request, IConsole_resetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_resetResultMsg.typecode)
        return response

    # op: IConsole_pause
    def IConsole_pause(self, request):
        if isinstance(request, IConsole_pauseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_pauseResultMsg.typecode)
        return response

    # op: IConsole_resume
    def IConsole_resume(self, request):
        if isinstance(request, IConsole_resumeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_resumeResultMsg.typecode)
        return response

    # op: IConsole_powerButton
    def IConsole_powerButton(self, request):
        if isinstance(request, IConsole_powerButtonRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_powerButtonResultMsg.typecode)
        return response

    # op: IConsole_sleepButton
    def IConsole_sleepButton(self, request):
        if isinstance(request, IConsole_sleepButtonRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_sleepButtonResultMsg.typecode)
        return response

    # op: IConsole_getPowerButtonHandled
    def IConsole_getPowerButtonHandled(self, request):
        if isinstance(request, IConsole_getPowerButtonHandledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getPowerButtonHandledResultMsg.typecode)
        return response

    # op: IConsole_getGuestEnteredACPIMode
    def IConsole_getGuestEnteredACPIMode(self, request):
        if isinstance(request, IConsole_getGuestEnteredACPIModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getGuestEnteredACPIModeResultMsg.typecode)
        return response

    # op: IConsole_saveState
    def IConsole_saveState(self, request):
        if isinstance(request, IConsole_saveStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_saveStateResultMsg.typecode)
        return response

    # op: IConsole_adoptSavedState
    def IConsole_adoptSavedState(self, request):
        if isinstance(request, IConsole_adoptSavedStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_adoptSavedStateResultMsg.typecode)
        return response

    # op: IConsole_discardSavedState
    def IConsole_discardSavedState(self, request):
        if isinstance(request, IConsole_discardSavedStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_discardSavedStateResultMsg.typecode)
        return response

    # op: IConsole_getDeviceActivity
    def IConsole_getDeviceActivity(self, request):
        if isinstance(request, IConsole_getDeviceActivityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_getDeviceActivityResultMsg.typecode)
        return response

    # op: IConsole_attachUSBDevice
    def IConsole_attachUSBDevice(self, request):
        if isinstance(request, IConsole_attachUSBDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_attachUSBDeviceResultMsg.typecode)
        return response

    # op: IConsole_detachUSBDevice
    def IConsole_detachUSBDevice(self, request):
        if isinstance(request, IConsole_detachUSBDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_detachUSBDeviceResultMsg.typecode)
        return response

    # op: IConsole_findUSBDeviceByAddress
    def IConsole_findUSBDeviceByAddress(self, request):
        if isinstance(request, IConsole_findUSBDeviceByAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_findUSBDeviceByAddressResultMsg.typecode)
        return response

    # op: IConsole_findUSBDeviceById
    def IConsole_findUSBDeviceById(self, request):
        if isinstance(request, IConsole_findUSBDeviceByIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_findUSBDeviceByIdResultMsg.typecode)
        return response

    # op: IConsole_createSharedFolder
    def IConsole_createSharedFolder(self, request):
        if isinstance(request, IConsole_createSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_createSharedFolderResultMsg.typecode)
        return response

    # op: IConsole_removeSharedFolder
    def IConsole_removeSharedFolder(self, request):
        if isinstance(request, IConsole_removeSharedFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_removeSharedFolderResultMsg.typecode)
        return response

    # op: IConsole_takeSnapshot
    def IConsole_takeSnapshot(self, request):
        if isinstance(request, IConsole_takeSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_takeSnapshotResultMsg.typecode)
        return response

    # op: IConsole_deleteSnapshot
    def IConsole_deleteSnapshot(self, request):
        if isinstance(request, IConsole_deleteSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_deleteSnapshotResultMsg.typecode)
        return response

    # op: IConsole_deleteSnapshotAndAllChildren
    def IConsole_deleteSnapshotAndAllChildren(self, request):
        if isinstance(request, IConsole_deleteSnapshotAndAllChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_deleteSnapshotAndAllChildrenResultMsg.typecode)
        return response

    # op: IConsole_deleteSnapshotRange
    def IConsole_deleteSnapshotRange(self, request):
        if isinstance(request, IConsole_deleteSnapshotRangeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_deleteSnapshotRangeResultMsg.typecode)
        return response

    # op: IConsole_restoreSnapshot
    def IConsole_restoreSnapshot(self, request):
        if isinstance(request, IConsole_restoreSnapshotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_restoreSnapshotResultMsg.typecode)
        return response

    # op: IConsole_teleport
    def IConsole_teleport(self, request):
        if isinstance(request, IConsole_teleportRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IConsole_teleportResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getName
    def IHostNetworkInterface_getName(self, request):
        if isinstance(request, IHostNetworkInterface_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getNameResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getId
    def IHostNetworkInterface_getId(self, request):
        if isinstance(request, IHostNetworkInterface_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIdResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getNetworkName
    def IHostNetworkInterface_getNetworkName(self, request):
        if isinstance(request, IHostNetworkInterface_getNetworkNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getNetworkNameResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getDhcpEnabled
    def IHostNetworkInterface_getDhcpEnabled(self, request):
        if isinstance(request, IHostNetworkInterface_getDhcpEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getDhcpEnabledResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPAddress
    def IHostNetworkInterface_getIPAddress(self, request):
        if isinstance(request, IHostNetworkInterface_getIPAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPAddressResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getNetworkMask
    def IHostNetworkInterface_getNetworkMask(self, request):
        if isinstance(request, IHostNetworkInterface_getNetworkMaskRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getNetworkMaskResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPV6Supported
    def IHostNetworkInterface_getIPV6Supported(self, request):
        if isinstance(request, IHostNetworkInterface_getIPV6SupportedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPV6SupportedResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPV6Address
    def IHostNetworkInterface_getIPV6Address(self, request):
        if isinstance(request, IHostNetworkInterface_getIPV6AddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPV6AddressResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getIPV6NetworkMaskPrefixLength
    def IHostNetworkInterface_getIPV6NetworkMaskPrefixLength(self, request):
        if isinstance(request, IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getHardwareAddress
    def IHostNetworkInterface_getHardwareAddress(self, request):
        if isinstance(request, IHostNetworkInterface_getHardwareAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getHardwareAddressResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getMediumType
    def IHostNetworkInterface_getMediumType(self, request):
        if isinstance(request, IHostNetworkInterface_getMediumTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getMediumTypeResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getStatus
    def IHostNetworkInterface_getStatus(self, request):
        if isinstance(request, IHostNetworkInterface_getStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getStatusResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_getInterfaceType
    def IHostNetworkInterface_getInterfaceType(self, request):
        if isinstance(request, IHostNetworkInterface_getInterfaceTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_getInterfaceTypeResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_enableStaticIpConfig
    def IHostNetworkInterface_enableStaticIpConfig(self, request):
        if isinstance(request, IHostNetworkInterface_enableStaticIpConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_enableStaticIpConfigResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_enableStaticIpConfigV6
    def IHostNetworkInterface_enableStaticIpConfigV6(self, request):
        if isinstance(request, IHostNetworkInterface_enableStaticIpConfigV6RequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_enableStaticIpConfigV6ResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_enableDynamicIpConfig
    def IHostNetworkInterface_enableDynamicIpConfig(self, request):
        if isinstance(request, IHostNetworkInterface_enableDynamicIpConfigRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_enableDynamicIpConfigResultMsg.typecode)
        return response

    # op: IHostNetworkInterface_dhcpRediscover
    def IHostNetworkInterface_dhcpRediscover(self, request):
        if isinstance(request, IHostNetworkInterface_dhcpRediscoverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostNetworkInterface_dhcpRediscoverResultMsg.typecode)
        return response

    # op: IHost_getDVDDrives
    def IHost_getDVDDrives(self, request):
        if isinstance(request, IHost_getDVDDrivesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getDVDDrivesResultMsg.typecode)
        return response

    # op: IHost_getFloppyDrives
    def IHost_getFloppyDrives(self, request):
        if isinstance(request, IHost_getFloppyDrivesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getFloppyDrivesResultMsg.typecode)
        return response

    # op: IHost_getUSBDevices
    def IHost_getUSBDevices(self, request):
        if isinstance(request, IHost_getUSBDevicesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getUSBDevicesResultMsg.typecode)
        return response

    # op: IHost_getUSBDeviceFilters
    def IHost_getUSBDeviceFilters(self, request):
        if isinstance(request, IHost_getUSBDeviceFiltersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getUSBDeviceFiltersResultMsg.typecode)
        return response

    # op: IHost_getNetworkInterfaces
    def IHost_getNetworkInterfaces(self, request):
        if isinstance(request, IHost_getNetworkInterfacesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getNetworkInterfacesResultMsg.typecode)
        return response

    # op: IHost_getProcessorCount
    def IHost_getProcessorCount(self, request):
        if isinstance(request, IHost_getProcessorCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorCountResultMsg.typecode)
        return response

    # op: IHost_getProcessorOnlineCount
    def IHost_getProcessorOnlineCount(self, request):
        if isinstance(request, IHost_getProcessorOnlineCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorOnlineCountResultMsg.typecode)
        return response

    # op: IHost_getProcessorCoreCount
    def IHost_getProcessorCoreCount(self, request):
        if isinstance(request, IHost_getProcessorCoreCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorCoreCountResultMsg.typecode)
        return response

    # op: IHost_getMemorySize
    def IHost_getMemorySize(self, request):
        if isinstance(request, IHost_getMemorySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getMemorySizeResultMsg.typecode)
        return response

    # op: IHost_getMemoryAvailable
    def IHost_getMemoryAvailable(self, request):
        if isinstance(request, IHost_getMemoryAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getMemoryAvailableResultMsg.typecode)
        return response

    # op: IHost_getOperatingSystem
    def IHost_getOperatingSystem(self, request):
        if isinstance(request, IHost_getOperatingSystemRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getOperatingSystemResultMsg.typecode)
        return response

    # op: IHost_getOSVersion
    def IHost_getOSVersion(self, request):
        if isinstance(request, IHost_getOSVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getOSVersionResultMsg.typecode)
        return response

    # op: IHost_getUTCTime
    def IHost_getUTCTime(self, request):
        if isinstance(request, IHost_getUTCTimeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getUTCTimeResultMsg.typecode)
        return response

    # op: IHost_getAcceleration3DAvailable
    def IHost_getAcceleration3DAvailable(self, request):
        if isinstance(request, IHost_getAcceleration3DAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getAcceleration3DAvailableResultMsg.typecode)
        return response

    # op: IHost_getProcessorSpeed
    def IHost_getProcessorSpeed(self, request):
        if isinstance(request, IHost_getProcessorSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorSpeedResultMsg.typecode)
        return response

    # op: IHost_getProcessorFeature
    def IHost_getProcessorFeature(self, request):
        if isinstance(request, IHost_getProcessorFeatureRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorFeatureResultMsg.typecode)
        return response

    # op: IHost_getProcessorDescription
    def IHost_getProcessorDescription(self, request):
        if isinstance(request, IHost_getProcessorDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorDescriptionResultMsg.typecode)
        return response

    # op: IHost_getProcessorCPUIDLeaf
    def IHost_getProcessorCPUIDLeaf(self, request):
        if isinstance(request, IHost_getProcessorCPUIDLeafRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_getProcessorCPUIDLeafResultMsg.typecode)
        return response

    # op: IHost_createHostOnlyNetworkInterface
    def IHost_createHostOnlyNetworkInterface(self, request):
        if isinstance(request, IHost_createHostOnlyNetworkInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_createHostOnlyNetworkInterfaceResultMsg.typecode)
        return response

    # op: IHost_removeHostOnlyNetworkInterface
    def IHost_removeHostOnlyNetworkInterface(self, request):
        if isinstance(request, IHost_removeHostOnlyNetworkInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_removeHostOnlyNetworkInterfaceResultMsg.typecode)
        return response

    # op: IHost_createUSBDeviceFilter
    def IHost_createUSBDeviceFilter(self, request):
        if isinstance(request, IHost_createUSBDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_createUSBDeviceFilterResultMsg.typecode)
        return response

    # op: IHost_insertUSBDeviceFilter
    def IHost_insertUSBDeviceFilter(self, request):
        if isinstance(request, IHost_insertUSBDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_insertUSBDeviceFilterResultMsg.typecode)
        return response

    # op: IHost_removeUSBDeviceFilter
    def IHost_removeUSBDeviceFilter(self, request):
        if isinstance(request, IHost_removeUSBDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_removeUSBDeviceFilterResultMsg.typecode)
        return response

    # op: IHost_findHostDVDDrive
    def IHost_findHostDVDDrive(self, request):
        if isinstance(request, IHost_findHostDVDDriveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostDVDDriveResultMsg.typecode)
        return response

    # op: IHost_findHostFloppyDrive
    def IHost_findHostFloppyDrive(self, request):
        if isinstance(request, IHost_findHostFloppyDriveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostFloppyDriveResultMsg.typecode)
        return response

    # op: IHost_findHostNetworkInterfaceByName
    def IHost_findHostNetworkInterfaceByName(self, request):
        if isinstance(request, IHost_findHostNetworkInterfaceByNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostNetworkInterfaceByNameResultMsg.typecode)
        return response

    # op: IHost_findHostNetworkInterfaceById
    def IHost_findHostNetworkInterfaceById(self, request):
        if isinstance(request, IHost_findHostNetworkInterfaceByIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostNetworkInterfaceByIdResultMsg.typecode)
        return response

    # op: IHost_findHostNetworkInterfacesOfType
    def IHost_findHostNetworkInterfacesOfType(self, request):
        if isinstance(request, IHost_findHostNetworkInterfacesOfTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findHostNetworkInterfacesOfTypeResultMsg.typecode)
        return response

    # op: IHost_findUSBDeviceById
    def IHost_findUSBDeviceById(self, request):
        if isinstance(request, IHost_findUSBDeviceByIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findUSBDeviceByIdResultMsg.typecode)
        return response

    # op: IHost_findUSBDeviceByAddress
    def IHost_findUSBDeviceByAddress(self, request):
        if isinstance(request, IHost_findUSBDeviceByAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_findUSBDeviceByAddressResultMsg.typecode)
        return response

    # op: IHost_generateMACAddress
    def IHost_generateMACAddress(self, request):
        if isinstance(request, IHost_generateMACAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHost_generateMACAddressResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinGuestRAM
    def ISystemProperties_getMinGuestRAM(self, request):
        if isinstance(request, ISystemProperties_getMinGuestRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinGuestRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestRAM
    def ISystemProperties_getMaxGuestRAM(self, request):
        if isinstance(request, ISystemProperties_getMaxGuestRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinGuestVRAM
    def ISystemProperties_getMinGuestVRAM(self, request):
        if isinstance(request, ISystemProperties_getMinGuestVRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinGuestVRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestVRAM
    def ISystemProperties_getMaxGuestVRAM(self, request):
        if isinstance(request, ISystemProperties_getMaxGuestVRAMRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestVRAMResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinGuestCPUCount
    def ISystemProperties_getMinGuestCPUCount(self, request):
        if isinstance(request, ISystemProperties_getMinGuestCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinGuestCPUCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestCPUCount
    def ISystemProperties_getMaxGuestCPUCount(self, request):
        if isinstance(request, ISystemProperties_getMaxGuestCPUCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestCPUCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxGuestMonitors
    def ISystemProperties_getMaxGuestMonitors(self, request):
        if isinstance(request, ISystemProperties_getMaxGuestMonitorsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxGuestMonitorsResultMsg.typecode)
        return response

    # op: ISystemProperties_getInfoVDSize
    def ISystemProperties_getInfoVDSize(self, request):
        if isinstance(request, ISystemProperties_getInfoVDSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getInfoVDSizeResultMsg.typecode)
        return response

    # op: ISystemProperties_getSerialPortCount
    def ISystemProperties_getSerialPortCount(self, request):
        if isinstance(request, ISystemProperties_getSerialPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getSerialPortCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getParallelPortCount
    def ISystemProperties_getParallelPortCount(self, request):
        if isinstance(request, ISystemProperties_getParallelPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getParallelPortCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxBootPosition
    def ISystemProperties_getMaxBootPosition(self, request):
        if isinstance(request, ISystemProperties_getMaxBootPositionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxBootPositionResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultMachineFolder
    def ISystemProperties_getDefaultMachineFolder(self, request):
        if isinstance(request, ISystemProperties_getDefaultMachineFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultMachineFolderResultMsg.typecode)
        return response

    # op: ISystemProperties_setDefaultMachineFolder
    def ISystemProperties_setDefaultMachineFolder(self, request):
        if isinstance(request, ISystemProperties_setDefaultMachineFolderRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setDefaultMachineFolderResultMsg.typecode)
        return response

    # op: ISystemProperties_getMediumFormats
    def ISystemProperties_getMediumFormats(self, request):
        if isinstance(request, ISystemProperties_getMediumFormatsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMediumFormatsResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultHardDiskFormat
    def ISystemProperties_getDefaultHardDiskFormat(self, request):
        if isinstance(request, ISystemProperties_getDefaultHardDiskFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultHardDiskFormatResultMsg.typecode)
        return response

    # op: ISystemProperties_setDefaultHardDiskFormat
    def ISystemProperties_setDefaultHardDiskFormat(self, request):
        if isinstance(request, ISystemProperties_setDefaultHardDiskFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setDefaultHardDiskFormatResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpaceWarning
    def ISystemProperties_getFreeDiskSpaceWarning(self, request):
        if isinstance(request, ISystemProperties_getFreeDiskSpaceWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpaceWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpaceWarning
    def ISystemProperties_setFreeDiskSpaceWarning(self, request):
        if isinstance(request, ISystemProperties_setFreeDiskSpaceWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpaceWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpacePercentWarning
    def ISystemProperties_getFreeDiskSpacePercentWarning(self, request):
        if isinstance(request, ISystemProperties_getFreeDiskSpacePercentWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpacePercentWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpacePercentWarning
    def ISystemProperties_setFreeDiskSpacePercentWarning(self, request):
        if isinstance(request, ISystemProperties_setFreeDiskSpacePercentWarningRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpacePercentWarningResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpaceError
    def ISystemProperties_getFreeDiskSpaceError(self, request):
        if isinstance(request, ISystemProperties_getFreeDiskSpaceErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpaceErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpaceError
    def ISystemProperties_setFreeDiskSpaceError(self, request):
        if isinstance(request, ISystemProperties_setFreeDiskSpaceErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpaceErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_getFreeDiskSpacePercentError
    def ISystemProperties_getFreeDiskSpacePercentError(self, request):
        if isinstance(request, ISystemProperties_getFreeDiskSpacePercentErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getFreeDiskSpacePercentErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_setFreeDiskSpacePercentError
    def ISystemProperties_setFreeDiskSpacePercentError(self, request):
        if isinstance(request, ISystemProperties_setFreeDiskSpacePercentErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setFreeDiskSpacePercentErrorResultMsg.typecode)
        return response

    # op: ISystemProperties_getVRDEAuthLibrary
    def ISystemProperties_getVRDEAuthLibrary(self, request):
        if isinstance(request, ISystemProperties_getVRDEAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getVRDEAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_setVRDEAuthLibrary
    def ISystemProperties_setVRDEAuthLibrary(self, request):
        if isinstance(request, ISystemProperties_setVRDEAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setVRDEAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_getWebServiceAuthLibrary
    def ISystemProperties_getWebServiceAuthLibrary(self, request):
        if isinstance(request, ISystemProperties_getWebServiceAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getWebServiceAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_setWebServiceAuthLibrary
    def ISystemProperties_setWebServiceAuthLibrary(self, request):
        if isinstance(request, ISystemProperties_setWebServiceAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setWebServiceAuthLibraryResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultVRDEExtPack
    def ISystemProperties_getDefaultVRDEExtPack(self, request):
        if isinstance(request, ISystemProperties_getDefaultVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultVRDEExtPackResultMsg.typecode)
        return response

    # op: ISystemProperties_setDefaultVRDEExtPack
    def ISystemProperties_setDefaultVRDEExtPack(self, request):
        if isinstance(request, ISystemProperties_setDefaultVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setDefaultVRDEExtPackResultMsg.typecode)
        return response

    # op: ISystemProperties_getLogHistoryCount
    def ISystemProperties_getLogHistoryCount(self, request):
        if isinstance(request, ISystemProperties_getLogHistoryCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getLogHistoryCountResultMsg.typecode)
        return response

    # op: ISystemProperties_setLogHistoryCount
    def ISystemProperties_setLogHistoryCount(self, request):
        if isinstance(request, ISystemProperties_setLogHistoryCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_setLogHistoryCountResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultAudioDriver
    def ISystemProperties_getDefaultAudioDriver(self, request):
        if isinstance(request, ISystemProperties_getDefaultAudioDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultAudioDriverResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxNetworkAdapters
    def ISystemProperties_getMaxNetworkAdapters(self, request):
        if isinstance(request, ISystemProperties_getMaxNetworkAdaptersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxNetworkAdaptersResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxNetworkAdaptersOfType
    def ISystemProperties_getMaxNetworkAdaptersOfType(self, request):
        if isinstance(request, ISystemProperties_getMaxNetworkAdaptersOfTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxNetworkAdaptersOfTypeResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxDevicesPerPortForStorageBus
    def ISystemProperties_getMaxDevicesPerPortForStorageBus(self, request):
        if isinstance(request, ISystemProperties_getMaxDevicesPerPortForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxDevicesPerPortForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getMinPortCountForStorageBus
    def ISystemProperties_getMinPortCountForStorageBus(self, request):
        if isinstance(request, ISystemProperties_getMinPortCountForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMinPortCountForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxPortCountForStorageBus
    def ISystemProperties_getMaxPortCountForStorageBus(self, request):
        if isinstance(request, ISystemProperties_getMaxPortCountForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxPortCountForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getMaxInstancesOfStorageBus
    def ISystemProperties_getMaxInstancesOfStorageBus(self, request):
        if isinstance(request, ISystemProperties_getMaxInstancesOfStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getMaxInstancesOfStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getDeviceTypesForStorageBus
    def ISystemProperties_getDeviceTypesForStorageBus(self, request):
        if isinstance(request, ISystemProperties_getDeviceTypesForStorageBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDeviceTypesForStorageBusResultMsg.typecode)
        return response

    # op: ISystemProperties_getDefaultIoCacheSettingForStorageController
    def ISystemProperties_getDefaultIoCacheSettingForStorageController(self, request):
        if isinstance(request, ISystemProperties_getDefaultIoCacheSettingForStorageControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISystemProperties_getDefaultIoCacheSettingForStorageControllerResultMsg.typecode)
        return response

    # op: IGuest_getOSTypeId
    def IGuest_getOSTypeId(self, request):
        if isinstance(request, IGuest_getOSTypeIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getOSTypeIdResultMsg.typecode)
        return response

    # op: IGuest_getAdditionsRunLevel
    def IGuest_getAdditionsRunLevel(self, request):
        if isinstance(request, IGuest_getAdditionsRunLevelRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getAdditionsRunLevelResultMsg.typecode)
        return response

    # op: IGuest_getAdditionsVersion
    def IGuest_getAdditionsVersion(self, request):
        if isinstance(request, IGuest_getAdditionsVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getAdditionsVersionResultMsg.typecode)
        return response

    # op: IGuest_getFacilities
    def IGuest_getFacilities(self, request):
        if isinstance(request, IGuest_getFacilitiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getFacilitiesResultMsg.typecode)
        return response

    # op: IGuest_getMemoryBalloonSize
    def IGuest_getMemoryBalloonSize(self, request):
        if isinstance(request, IGuest_getMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IGuest_setMemoryBalloonSize
    def IGuest_setMemoryBalloonSize(self, request):
        if isinstance(request, IGuest_setMemoryBalloonSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setMemoryBalloonSizeResultMsg.typecode)
        return response

    # op: IGuest_getStatisticsUpdateInterval
    def IGuest_getStatisticsUpdateInterval(self, request):
        if isinstance(request, IGuest_getStatisticsUpdateIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getStatisticsUpdateIntervalResultMsg.typecode)
        return response

    # op: IGuest_setStatisticsUpdateInterval
    def IGuest_setStatisticsUpdateInterval(self, request):
        if isinstance(request, IGuest_setStatisticsUpdateIntervalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setStatisticsUpdateIntervalResultMsg.typecode)
        return response

    # op: IGuest_internalGetStatistics
    def IGuest_internalGetStatistics(self, request):
        if isinstance(request, IGuest_internalGetStatisticsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_internalGetStatisticsResultMsg.typecode)
        return response

    # op: IGuest_getFacilityStatus
    def IGuest_getFacilityStatus(self, request):
        if isinstance(request, IGuest_getFacilityStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getFacilityStatusResultMsg.typecode)
        return response

    # op: IGuest_getAdditionsStatus
    def IGuest_getAdditionsStatus(self, request):
        if isinstance(request, IGuest_getAdditionsStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getAdditionsStatusResultMsg.typecode)
        return response

    # op: IGuest_setCredentials
    def IGuest_setCredentials(self, request):
        if isinstance(request, IGuest_setCredentialsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setCredentialsResultMsg.typecode)
        return response

    # op: IGuest_executeProcess
    def IGuest_executeProcess(self, request):
        if isinstance(request, IGuest_executeProcessRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_executeProcessResultMsg.typecode)
        return response

    # op: IGuest_getProcessOutput
    def IGuest_getProcessOutput(self, request):
        if isinstance(request, IGuest_getProcessOutputRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getProcessOutputResultMsg.typecode)
        return response

    # op: IGuest_getProcessStatus
    def IGuest_getProcessStatus(self, request):
        if isinstance(request, IGuest_getProcessStatusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_getProcessStatusResultMsg.typecode)
        return response

    # op: IGuest_copyFromGuest
    def IGuest_copyFromGuest(self, request):
        if isinstance(request, IGuest_copyFromGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_copyFromGuestResultMsg.typecode)
        return response

    # op: IGuest_copyToGuest
    def IGuest_copyToGuest(self, request):
        if isinstance(request, IGuest_copyToGuestRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_copyToGuestResultMsg.typecode)
        return response

    # op: IGuest_directoryClose
    def IGuest_directoryClose(self, request):
        if isinstance(request, IGuest_directoryCloseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryCloseResultMsg.typecode)
        return response

    # op: IGuest_directoryCreate
    def IGuest_directoryCreate(self, request):
        if isinstance(request, IGuest_directoryCreateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryCreateResultMsg.typecode)
        return response

    # op: IGuest_directoryOpen
    def IGuest_directoryOpen(self, request):
        if isinstance(request, IGuest_directoryOpenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryOpenResultMsg.typecode)
        return response

    # op: IGuest_directoryRead
    def IGuest_directoryRead(self, request):
        if isinstance(request, IGuest_directoryReadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_directoryReadResultMsg.typecode)
        return response

    # op: IGuest_fileExists
    def IGuest_fileExists(self, request):
        if isinstance(request, IGuest_fileExistsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_fileExistsResultMsg.typecode)
        return response

    # op: IGuest_fileQuerySize
    def IGuest_fileQuerySize(self, request):
        if isinstance(request, IGuest_fileQuerySizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_fileQuerySizeResultMsg.typecode)
        return response

    # op: IGuest_setProcessInput
    def IGuest_setProcessInput(self, request):
        if isinstance(request, IGuest_setProcessInputRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_setProcessInputResultMsg.typecode)
        return response

    # op: IGuest_updateGuestAdditions
    def IGuest_updateGuestAdditions(self, request):
        if isinstance(request, IGuest_updateGuestAdditionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuest_updateGuestAdditionsResultMsg.typecode)
        return response

    # op: IProgress_getId
    def IProgress_getId(self, request):
        if isinstance(request, IProgress_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getIdResultMsg.typecode)
        return response

    # op: IProgress_getDescription
    def IProgress_getDescription(self, request):
        if isinstance(request, IProgress_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getDescriptionResultMsg.typecode)
        return response

    # op: IProgress_getInitiator
    def IProgress_getInitiator(self, request):
        if isinstance(request, IProgress_getInitiatorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getInitiatorResultMsg.typecode)
        return response

    # op: IProgress_getCancelable
    def IProgress_getCancelable(self, request):
        if isinstance(request, IProgress_getCancelableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getCancelableResultMsg.typecode)
        return response

    # op: IProgress_getPercent
    def IProgress_getPercent(self, request):
        if isinstance(request, IProgress_getPercentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getPercentResultMsg.typecode)
        return response

    # op: IProgress_getTimeRemaining
    def IProgress_getTimeRemaining(self, request):
        if isinstance(request, IProgress_getTimeRemainingRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getTimeRemainingResultMsg.typecode)
        return response

    # op: IProgress_getCompleted
    def IProgress_getCompleted(self, request):
        if isinstance(request, IProgress_getCompletedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getCompletedResultMsg.typecode)
        return response

    # op: IProgress_getCanceled
    def IProgress_getCanceled(self, request):
        if isinstance(request, IProgress_getCanceledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getCanceledResultMsg.typecode)
        return response

    # op: IProgress_getResultCode
    def IProgress_getResultCode(self, request):
        if isinstance(request, IProgress_getResultCodeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getResultCodeResultMsg.typecode)
        return response

    # op: IProgress_getErrorInfo
    def IProgress_getErrorInfo(self, request):
        if isinstance(request, IProgress_getErrorInfoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getErrorInfoResultMsg.typecode)
        return response

    # op: IProgress_getOperationCount
    def IProgress_getOperationCount(self, request):
        if isinstance(request, IProgress_getOperationCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationCountResultMsg.typecode)
        return response

    # op: IProgress_getOperation
    def IProgress_getOperation(self, request):
        if isinstance(request, IProgress_getOperationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationResultMsg.typecode)
        return response

    # op: IProgress_getOperationDescription
    def IProgress_getOperationDescription(self, request):
        if isinstance(request, IProgress_getOperationDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationDescriptionResultMsg.typecode)
        return response

    # op: IProgress_getOperationPercent
    def IProgress_getOperationPercent(self, request):
        if isinstance(request, IProgress_getOperationPercentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationPercentResultMsg.typecode)
        return response

    # op: IProgress_getOperationWeight
    def IProgress_getOperationWeight(self, request):
        if isinstance(request, IProgress_getOperationWeightRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getOperationWeightResultMsg.typecode)
        return response

    # op: IProgress_getTimeout
    def IProgress_getTimeout(self, request):
        if isinstance(request, IProgress_getTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_getTimeoutResultMsg.typecode)
        return response

    # op: IProgress_setTimeout
    def IProgress_setTimeout(self, request):
        if isinstance(request, IProgress_setTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_setTimeoutResultMsg.typecode)
        return response

    # op: IProgress_setCurrentOperationProgress
    def IProgress_setCurrentOperationProgress(self, request):
        if isinstance(request, IProgress_setCurrentOperationProgressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_setCurrentOperationProgressResultMsg.typecode)
        return response

    # op: IProgress_setNextOperation
    def IProgress_setNextOperation(self, request):
        if isinstance(request, IProgress_setNextOperationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_setNextOperationResultMsg.typecode)
        return response

    # op: IProgress_waitForCompletion
    def IProgress_waitForCompletion(self, request):
        if isinstance(request, IProgress_waitForCompletionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_waitForCompletionResultMsg.typecode)
        return response

    # op: IProgress_waitForOperationCompletion
    def IProgress_waitForOperationCompletion(self, request):
        if isinstance(request, IProgress_waitForOperationCompletionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_waitForOperationCompletionResultMsg.typecode)
        return response

    # op: IProgress_waitForAsyncProgressCompletion
    def IProgress_waitForAsyncProgressCompletion(self, request):
        if isinstance(request, IProgress_waitForAsyncProgressCompletionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_waitForAsyncProgressCompletionResultMsg.typecode)
        return response

    # op: IProgress_cancel
    def IProgress_cancel(self, request):
        if isinstance(request, IProgress_cancelRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IProgress_cancelResultMsg.typecode)
        return response

    # op: ISnapshot_getId
    def ISnapshot_getId(self, request):
        if isinstance(request, ISnapshot_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getIdResultMsg.typecode)
        return response

    # op: ISnapshot_getName
    def ISnapshot_getName(self, request):
        if isinstance(request, ISnapshot_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getNameResultMsg.typecode)
        return response

    # op: ISnapshot_setName
    def ISnapshot_setName(self, request):
        if isinstance(request, ISnapshot_setNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_setNameResultMsg.typecode)
        return response

    # op: ISnapshot_getDescription
    def ISnapshot_getDescription(self, request):
        if isinstance(request, ISnapshot_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getDescriptionResultMsg.typecode)
        return response

    # op: ISnapshot_setDescription
    def ISnapshot_setDescription(self, request):
        if isinstance(request, ISnapshot_setDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_setDescriptionResultMsg.typecode)
        return response

    # op: ISnapshot_getTimeStamp
    def ISnapshot_getTimeStamp(self, request):
        if isinstance(request, ISnapshot_getTimeStampRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getTimeStampResultMsg.typecode)
        return response

    # op: ISnapshot_getOnline
    def ISnapshot_getOnline(self, request):
        if isinstance(request, ISnapshot_getOnlineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getOnlineResultMsg.typecode)
        return response

    # op: ISnapshot_getMachine
    def ISnapshot_getMachine(self, request):
        if isinstance(request, ISnapshot_getMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getMachineResultMsg.typecode)
        return response

    # op: ISnapshot_getParent
    def ISnapshot_getParent(self, request):
        if isinstance(request, ISnapshot_getParentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getParentResultMsg.typecode)
        return response

    # op: ISnapshot_getChildren
    def ISnapshot_getChildren(self, request):
        if isinstance(request, ISnapshot_getChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getChildrenResultMsg.typecode)
        return response

    # op: ISnapshot_getChildrenCount
    def ISnapshot_getChildrenCount(self, request):
        if isinstance(request, ISnapshot_getChildrenCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshot_getChildrenCountResultMsg.typecode)
        return response

    # op: IMedium_getId
    def IMedium_getId(self, request):
        if isinstance(request, IMedium_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getIdResultMsg.typecode)
        return response

    # op: IMedium_getDescription
    def IMedium_getDescription(self, request):
        if isinstance(request, IMedium_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getDescriptionResultMsg.typecode)
        return response

    # op: IMedium_setDescription
    def IMedium_setDescription(self, request):
        if isinstance(request, IMedium_setDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setDescriptionResultMsg.typecode)
        return response

    # op: IMedium_getState
    def IMedium_getState(self, request):
        if isinstance(request, IMedium_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getStateResultMsg.typecode)
        return response

    # op: IMedium_getVariant
    def IMedium_getVariant(self, request):
        if isinstance(request, IMedium_getVariantRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getVariantResultMsg.typecode)
        return response

    # op: IMedium_getLocation
    def IMedium_getLocation(self, request):
        if isinstance(request, IMedium_getLocationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getLocationResultMsg.typecode)
        return response

    # op: IMedium_setLocation
    def IMedium_setLocation(self, request):
        if isinstance(request, IMedium_setLocationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setLocationResultMsg.typecode)
        return response

    # op: IMedium_getName
    def IMedium_getName(self, request):
        if isinstance(request, IMedium_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getNameResultMsg.typecode)
        return response

    # op: IMedium_getDeviceType
    def IMedium_getDeviceType(self, request):
        if isinstance(request, IMedium_getDeviceTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getDeviceTypeResultMsg.typecode)
        return response

    # op: IMedium_getHostDrive
    def IMedium_getHostDrive(self, request):
        if isinstance(request, IMedium_getHostDriveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getHostDriveResultMsg.typecode)
        return response

    # op: IMedium_getSize
    def IMedium_getSize(self, request):
        if isinstance(request, IMedium_getSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getSizeResultMsg.typecode)
        return response

    # op: IMedium_getFormat
    def IMedium_getFormat(self, request):
        if isinstance(request, IMedium_getFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getFormatResultMsg.typecode)
        return response

    # op: IMedium_getMediumFormat
    def IMedium_getMediumFormat(self, request):
        if isinstance(request, IMedium_getMediumFormatRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getMediumFormatResultMsg.typecode)
        return response

    # op: IMedium_getType
    def IMedium_getType(self, request):
        if isinstance(request, IMedium_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getTypeResultMsg.typecode)
        return response

    # op: IMedium_setType
    def IMedium_setType(self, request):
        if isinstance(request, IMedium_setTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setTypeResultMsg.typecode)
        return response

    # op: IMedium_getAllowedTypes
    def IMedium_getAllowedTypes(self, request):
        if isinstance(request, IMedium_getAllowedTypesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getAllowedTypesResultMsg.typecode)
        return response

    # op: IMedium_getParent
    def IMedium_getParent(self, request):
        if isinstance(request, IMedium_getParentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getParentResultMsg.typecode)
        return response

    # op: IMedium_getChildren
    def IMedium_getChildren(self, request):
        if isinstance(request, IMedium_getChildrenRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getChildrenResultMsg.typecode)
        return response

    # op: IMedium_getBase
    def IMedium_getBase(self, request):
        if isinstance(request, IMedium_getBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getBaseResultMsg.typecode)
        return response

    # op: IMedium_getReadOnly
    def IMedium_getReadOnly(self, request):
        if isinstance(request, IMedium_getReadOnlyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getReadOnlyResultMsg.typecode)
        return response

    # op: IMedium_getLogicalSize
    def IMedium_getLogicalSize(self, request):
        if isinstance(request, IMedium_getLogicalSizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getLogicalSizeResultMsg.typecode)
        return response

    # op: IMedium_getAutoReset
    def IMedium_getAutoReset(self, request):
        if isinstance(request, IMedium_getAutoResetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getAutoResetResultMsg.typecode)
        return response

    # op: IMedium_setAutoReset
    def IMedium_setAutoReset(self, request):
        if isinstance(request, IMedium_setAutoResetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setAutoResetResultMsg.typecode)
        return response

    # op: IMedium_getLastAccessError
    def IMedium_getLastAccessError(self, request):
        if isinstance(request, IMedium_getLastAccessErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getLastAccessErrorResultMsg.typecode)
        return response

    # op: IMedium_getMachineIds
    def IMedium_getMachineIds(self, request):
        if isinstance(request, IMedium_getMachineIdsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getMachineIdsResultMsg.typecode)
        return response

    # op: IMedium_setIDs
    def IMedium_setIDs(self, request):
        if isinstance(request, IMedium_setIDsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setIDsResultMsg.typecode)
        return response

    # op: IMedium_refreshState
    def IMedium_refreshState(self, request):
        if isinstance(request, IMedium_refreshStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_refreshStateResultMsg.typecode)
        return response

    # op: IMedium_getSnapshotIds
    def IMedium_getSnapshotIds(self, request):
        if isinstance(request, IMedium_getSnapshotIdsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getSnapshotIdsResultMsg.typecode)
        return response

    # op: IMedium_lockRead
    def IMedium_lockRead(self, request):
        if isinstance(request, IMedium_lockReadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_lockReadResultMsg.typecode)
        return response

    # op: IMedium_unlockRead
    def IMedium_unlockRead(self, request):
        if isinstance(request, IMedium_unlockReadRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_unlockReadResultMsg.typecode)
        return response

    # op: IMedium_lockWrite
    def IMedium_lockWrite(self, request):
        if isinstance(request, IMedium_lockWriteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_lockWriteResultMsg.typecode)
        return response

    # op: IMedium_unlockWrite
    def IMedium_unlockWrite(self, request):
        if isinstance(request, IMedium_unlockWriteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_unlockWriteResultMsg.typecode)
        return response

    # op: IMedium_close
    def IMedium_close(self, request):
        if isinstance(request, IMedium_closeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_closeResultMsg.typecode)
        return response

    # op: IMedium_getProperty
    def IMedium_getProperty(self, request):
        if isinstance(request, IMedium_getPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getPropertyResultMsg.typecode)
        return response

    # op: IMedium_setProperty
    def IMedium_setProperty(self, request):
        if isinstance(request, IMedium_setPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setPropertyResultMsg.typecode)
        return response

    # op: IMedium_getProperties
    def IMedium_getProperties(self, request):
        if isinstance(request, IMedium_getPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_getPropertiesResultMsg.typecode)
        return response

    # op: IMedium_setProperties
    def IMedium_setProperties(self, request):
        if isinstance(request, IMedium_setPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_setPropertiesResultMsg.typecode)
        return response

    # op: IMedium_createBaseStorage
    def IMedium_createBaseStorage(self, request):
        if isinstance(request, IMedium_createBaseStorageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_createBaseStorageResultMsg.typecode)
        return response

    # op: IMedium_deleteStorage
    def IMedium_deleteStorage(self, request):
        if isinstance(request, IMedium_deleteStorageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_deleteStorageResultMsg.typecode)
        return response

    # op: IMedium_createDiffStorage
    def IMedium_createDiffStorage(self, request):
        if isinstance(request, IMedium_createDiffStorageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_createDiffStorageResultMsg.typecode)
        return response

    # op: IMedium_mergeTo
    def IMedium_mergeTo(self, request):
        if isinstance(request, IMedium_mergeToRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_mergeToResultMsg.typecode)
        return response

    # op: IMedium_cloneTo
    def IMedium_cloneTo(self, request):
        if isinstance(request, IMedium_cloneToRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_cloneToResultMsg.typecode)
        return response

    # op: IMedium_compact
    def IMedium_compact(self, request):
        if isinstance(request, IMedium_compactRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_compactResultMsg.typecode)
        return response

    # op: IMedium_resize
    def IMedium_resize(self, request):
        if isinstance(request, IMedium_resizeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_resizeResultMsg.typecode)
        return response

    # op: IMedium_reset
    def IMedium_reset(self, request):
        if isinstance(request, IMedium_resetRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMedium_resetResultMsg.typecode)
        return response

    # op: IMediumFormat_getId
    def IMediumFormat_getId(self, request):
        if isinstance(request, IMediumFormat_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_getIdResultMsg.typecode)
        return response

    # op: IMediumFormat_getName
    def IMediumFormat_getName(self, request):
        if isinstance(request, IMediumFormat_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_getNameResultMsg.typecode)
        return response

    # op: IMediumFormat_getCapabilities
    def IMediumFormat_getCapabilities(self, request):
        if isinstance(request, IMediumFormat_getCapabilitiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_getCapabilitiesResultMsg.typecode)
        return response

    # op: IMediumFormat_describeFileExtensions
    def IMediumFormat_describeFileExtensions(self, request):
        if isinstance(request, IMediumFormat_describeFileExtensionsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_describeFileExtensionsResultMsg.typecode)
        return response

    # op: IMediumFormat_describeProperties
    def IMediumFormat_describeProperties(self, request):
        if isinstance(request, IMediumFormat_describePropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumFormat_describePropertiesResultMsg.typecode)
        return response

    # op: IKeyboard_getEventSource
    def IKeyboard_getEventSource(self, request):
        if isinstance(request, IKeyboard_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_getEventSourceResultMsg.typecode)
        return response

    # op: IKeyboard_putScancode
    def IKeyboard_putScancode(self, request):
        if isinstance(request, IKeyboard_putScancodeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_putScancodeResultMsg.typecode)
        return response

    # op: IKeyboard_putScancodes
    def IKeyboard_putScancodes(self, request):
        if isinstance(request, IKeyboard_putScancodesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_putScancodesResultMsg.typecode)
        return response

    # op: IKeyboard_putCAD
    def IKeyboard_putCAD(self, request):
        if isinstance(request, IKeyboard_putCADRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboard_putCADResultMsg.typecode)
        return response

    # op: IMouse_getAbsoluteSupported
    def IMouse_getAbsoluteSupported(self, request):
        if isinstance(request, IMouse_getAbsoluteSupportedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getAbsoluteSupportedResultMsg.typecode)
        return response

    # op: IMouse_getRelativeSupported
    def IMouse_getRelativeSupported(self, request):
        if isinstance(request, IMouse_getRelativeSupportedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getRelativeSupportedResultMsg.typecode)
        return response

    # op: IMouse_getNeedsHostCursor
    def IMouse_getNeedsHostCursor(self, request):
        if isinstance(request, IMouse_getNeedsHostCursorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getNeedsHostCursorResultMsg.typecode)
        return response

    # op: IMouse_getEventSource
    def IMouse_getEventSource(self, request):
        if isinstance(request, IMouse_getEventSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_getEventSourceResultMsg.typecode)
        return response

    # op: IMouse_putMouseEvent
    def IMouse_putMouseEvent(self, request):
        if isinstance(request, IMouse_putMouseEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_putMouseEventResultMsg.typecode)
        return response

    # op: IMouse_putMouseEventAbsolute
    def IMouse_putMouseEventAbsolute(self, request):
        if isinstance(request, IMouse_putMouseEventAbsoluteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouse_putMouseEventAbsoluteResultMsg.typecode)
        return response

    # op: IDisplay_getScreenResolution
    def IDisplay_getScreenResolution(self, request):
        if isinstance(request, IDisplay_getScreenResolutionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_getScreenResolutionResultMsg.typecode)
        return response

    # op: IDisplay_setVideoModeHint
    def IDisplay_setVideoModeHint(self, request):
        if isinstance(request, IDisplay_setVideoModeHintRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_setVideoModeHintResultMsg.typecode)
        return response

    # op: IDisplay_setSeamlessMode
    def IDisplay_setSeamlessMode(self, request):
        if isinstance(request, IDisplay_setSeamlessModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_setSeamlessModeResultMsg.typecode)
        return response

    # op: IDisplay_takeScreenShotToArray
    def IDisplay_takeScreenShotToArray(self, request):
        if isinstance(request, IDisplay_takeScreenShotToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_takeScreenShotToArrayResultMsg.typecode)
        return response

    # op: IDisplay_takeScreenShotPNGToArray
    def IDisplay_takeScreenShotPNGToArray(self, request):
        if isinstance(request, IDisplay_takeScreenShotPNGToArrayRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_takeScreenShotPNGToArrayResultMsg.typecode)
        return response

    # op: IDisplay_invalidateAndUpdate
    def IDisplay_invalidateAndUpdate(self, request):
        if isinstance(request, IDisplay_invalidateAndUpdateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_invalidateAndUpdateResultMsg.typecode)
        return response

    # op: IDisplay_resizeCompleted
    def IDisplay_resizeCompleted(self, request):
        if isinstance(request, IDisplay_resizeCompletedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IDisplay_resizeCompletedResultMsg.typecode)
        return response

    # op: INetworkAdapter_getAdapterType
    def INetworkAdapter_getAdapterType(self, request):
        if isinstance(request, INetworkAdapter_getAdapterTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getAdapterTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_setAdapterType
    def INetworkAdapter_setAdapterType(self, request):
        if isinstance(request, INetworkAdapter_setAdapterTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setAdapterTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_getSlot
    def INetworkAdapter_getSlot(self, request):
        if isinstance(request, INetworkAdapter_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getSlotResultMsg.typecode)
        return response

    # op: INetworkAdapter_getEnabled
    def INetworkAdapter_getEnabled(self, request):
        if isinstance(request, INetworkAdapter_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_setEnabled
    def INetworkAdapter_setEnabled(self, request):
        if isinstance(request, INetworkAdapter_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_getMACAddress
    def INetworkAdapter_getMACAddress(self, request):
        if isinstance(request, INetworkAdapter_getMACAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getMACAddressResultMsg.typecode)
        return response

    # op: INetworkAdapter_setMACAddress
    def INetworkAdapter_setMACAddress(self, request):
        if isinstance(request, INetworkAdapter_setMACAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setMACAddressResultMsg.typecode)
        return response

    # op: INetworkAdapter_getAttachmentType
    def INetworkAdapter_getAttachmentType(self, request):
        if isinstance(request, INetworkAdapter_getAttachmentTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getAttachmentTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_setAttachmentType
    def INetworkAdapter_setAttachmentType(self, request):
        if isinstance(request, INetworkAdapter_setAttachmentTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setAttachmentTypeResultMsg.typecode)
        return response

    # op: INetworkAdapter_getBridgedInterface
    def INetworkAdapter_getBridgedInterface(self, request):
        if isinstance(request, INetworkAdapter_getBridgedInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getBridgedInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_setBridgedInterface
    def INetworkAdapter_setBridgedInterface(self, request):
        if isinstance(request, INetworkAdapter_setBridgedInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setBridgedInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_getHostOnlyInterface
    def INetworkAdapter_getHostOnlyInterface(self, request):
        if isinstance(request, INetworkAdapter_getHostOnlyInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getHostOnlyInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_setHostOnlyInterface
    def INetworkAdapter_setHostOnlyInterface(self, request):
        if isinstance(request, INetworkAdapter_setHostOnlyInterfaceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setHostOnlyInterfaceResultMsg.typecode)
        return response

    # op: INetworkAdapter_getInternalNetwork
    def INetworkAdapter_getInternalNetwork(self, request):
        if isinstance(request, INetworkAdapter_getInternalNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getInternalNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_setInternalNetwork
    def INetworkAdapter_setInternalNetwork(self, request):
        if isinstance(request, INetworkAdapter_setInternalNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setInternalNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_getNATNetwork
    def INetworkAdapter_getNATNetwork(self, request):
        if isinstance(request, INetworkAdapter_getNATNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getNATNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_setNATNetwork
    def INetworkAdapter_setNATNetwork(self, request):
        if isinstance(request, INetworkAdapter_setNATNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setNATNetworkResultMsg.typecode)
        return response

    # op: INetworkAdapter_getGenericDriver
    def INetworkAdapter_getGenericDriver(self, request):
        if isinstance(request, INetworkAdapter_getGenericDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getGenericDriverResultMsg.typecode)
        return response

    # op: INetworkAdapter_setGenericDriver
    def INetworkAdapter_setGenericDriver(self, request):
        if isinstance(request, INetworkAdapter_setGenericDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setGenericDriverResultMsg.typecode)
        return response

    # op: INetworkAdapter_getCableConnected
    def INetworkAdapter_getCableConnected(self, request):
        if isinstance(request, INetworkAdapter_getCableConnectedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getCableConnectedResultMsg.typecode)
        return response

    # op: INetworkAdapter_setCableConnected
    def INetworkAdapter_setCableConnected(self, request):
        if isinstance(request, INetworkAdapter_setCableConnectedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setCableConnectedResultMsg.typecode)
        return response

    # op: INetworkAdapter_getLineSpeed
    def INetworkAdapter_getLineSpeed(self, request):
        if isinstance(request, INetworkAdapter_getLineSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getLineSpeedResultMsg.typecode)
        return response

    # op: INetworkAdapter_setLineSpeed
    def INetworkAdapter_setLineSpeed(self, request):
        if isinstance(request, INetworkAdapter_setLineSpeedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setLineSpeedResultMsg.typecode)
        return response

    # op: INetworkAdapter_getPromiscModePolicy
    def INetworkAdapter_getPromiscModePolicy(self, request):
        if isinstance(request, INetworkAdapter_getPromiscModePolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getPromiscModePolicyResultMsg.typecode)
        return response

    # op: INetworkAdapter_setPromiscModePolicy
    def INetworkAdapter_setPromiscModePolicy(self, request):
        if isinstance(request, INetworkAdapter_setPromiscModePolicyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setPromiscModePolicyResultMsg.typecode)
        return response

    # op: INetworkAdapter_getTraceEnabled
    def INetworkAdapter_getTraceEnabled(self, request):
        if isinstance(request, INetworkAdapter_getTraceEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getTraceEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_setTraceEnabled
    def INetworkAdapter_setTraceEnabled(self, request):
        if isinstance(request, INetworkAdapter_setTraceEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setTraceEnabledResultMsg.typecode)
        return response

    # op: INetworkAdapter_getTraceFile
    def INetworkAdapter_getTraceFile(self, request):
        if isinstance(request, INetworkAdapter_getTraceFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getTraceFileResultMsg.typecode)
        return response

    # op: INetworkAdapter_setTraceFile
    def INetworkAdapter_setTraceFile(self, request):
        if isinstance(request, INetworkAdapter_setTraceFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setTraceFileResultMsg.typecode)
        return response

    # op: INetworkAdapter_getNatDriver
    def INetworkAdapter_getNatDriver(self, request):
        if isinstance(request, INetworkAdapter_getNatDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getNatDriverResultMsg.typecode)
        return response

    # op: INetworkAdapter_getBootPriority
    def INetworkAdapter_getBootPriority(self, request):
        if isinstance(request, INetworkAdapter_getBootPriorityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getBootPriorityResultMsg.typecode)
        return response

    # op: INetworkAdapter_setBootPriority
    def INetworkAdapter_setBootPriority(self, request):
        if isinstance(request, INetworkAdapter_setBootPriorityRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setBootPriorityResultMsg.typecode)
        return response

    # op: INetworkAdapter_getBandwidthGroup
    def INetworkAdapter_getBandwidthGroup(self, request):
        if isinstance(request, INetworkAdapter_getBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getBandwidthGroupResultMsg.typecode)
        return response

    # op: INetworkAdapter_setBandwidthGroup
    def INetworkAdapter_setBandwidthGroup(self, request):
        if isinstance(request, INetworkAdapter_setBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setBandwidthGroupResultMsg.typecode)
        return response

    # op: INetworkAdapter_getProperty
    def INetworkAdapter_getProperty(self, request):
        if isinstance(request, INetworkAdapter_getPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getPropertyResultMsg.typecode)
        return response

    # op: INetworkAdapter_setProperty
    def INetworkAdapter_setProperty(self, request):
        if isinstance(request, INetworkAdapter_setPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_setPropertyResultMsg.typecode)
        return response

    # op: INetworkAdapter_getProperties
    def INetworkAdapter_getProperties(self, request):
        if isinstance(request, INetworkAdapter_getPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapter_getPropertiesResultMsg.typecode)
        return response

    # op: ISerialPort_getSlot
    def ISerialPort_getSlot(self, request):
        if isinstance(request, ISerialPort_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getSlotResultMsg.typecode)
        return response

    # op: ISerialPort_getEnabled
    def ISerialPort_getEnabled(self, request):
        if isinstance(request, ISerialPort_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getEnabledResultMsg.typecode)
        return response

    # op: ISerialPort_setEnabled
    def ISerialPort_setEnabled(self, request):
        if isinstance(request, ISerialPort_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setEnabledResultMsg.typecode)
        return response

    # op: ISerialPort_getIOBase
    def ISerialPort_getIOBase(self, request):
        if isinstance(request, ISerialPort_getIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getIOBaseResultMsg.typecode)
        return response

    # op: ISerialPort_setIOBase
    def ISerialPort_setIOBase(self, request):
        if isinstance(request, ISerialPort_setIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setIOBaseResultMsg.typecode)
        return response

    # op: ISerialPort_getIRQ
    def ISerialPort_getIRQ(self, request):
        if isinstance(request, ISerialPort_getIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getIRQResultMsg.typecode)
        return response

    # op: ISerialPort_setIRQ
    def ISerialPort_setIRQ(self, request):
        if isinstance(request, ISerialPort_setIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setIRQResultMsg.typecode)
        return response

    # op: ISerialPort_getHostMode
    def ISerialPort_getHostMode(self, request):
        if isinstance(request, ISerialPort_getHostModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getHostModeResultMsg.typecode)
        return response

    # op: ISerialPort_setHostMode
    def ISerialPort_setHostMode(self, request):
        if isinstance(request, ISerialPort_setHostModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setHostModeResultMsg.typecode)
        return response

    # op: ISerialPort_getServer
    def ISerialPort_getServer(self, request):
        if isinstance(request, ISerialPort_getServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getServerResultMsg.typecode)
        return response

    # op: ISerialPort_setServer
    def ISerialPort_setServer(self, request):
        if isinstance(request, ISerialPort_setServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setServerResultMsg.typecode)
        return response

    # op: ISerialPort_getPath
    def ISerialPort_getPath(self, request):
        if isinstance(request, ISerialPort_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_getPathResultMsg.typecode)
        return response

    # op: ISerialPort_setPath
    def ISerialPort_setPath(self, request):
        if isinstance(request, ISerialPort_setPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPort_setPathResultMsg.typecode)
        return response

    # op: IParallelPort_getSlot
    def IParallelPort_getSlot(self, request):
        if isinstance(request, IParallelPort_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getSlotResultMsg.typecode)
        return response

    # op: IParallelPort_getEnabled
    def IParallelPort_getEnabled(self, request):
        if isinstance(request, IParallelPort_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getEnabledResultMsg.typecode)
        return response

    # op: IParallelPort_setEnabled
    def IParallelPort_setEnabled(self, request):
        if isinstance(request, IParallelPort_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setEnabledResultMsg.typecode)
        return response

    # op: IParallelPort_getIOBase
    def IParallelPort_getIOBase(self, request):
        if isinstance(request, IParallelPort_getIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getIOBaseResultMsg.typecode)
        return response

    # op: IParallelPort_setIOBase
    def IParallelPort_setIOBase(self, request):
        if isinstance(request, IParallelPort_setIOBaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setIOBaseResultMsg.typecode)
        return response

    # op: IParallelPort_getIRQ
    def IParallelPort_getIRQ(self, request):
        if isinstance(request, IParallelPort_getIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getIRQResultMsg.typecode)
        return response

    # op: IParallelPort_setIRQ
    def IParallelPort_setIRQ(self, request):
        if isinstance(request, IParallelPort_setIRQRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setIRQResultMsg.typecode)
        return response

    # op: IParallelPort_getPath
    def IParallelPort_getPath(self, request):
        if isinstance(request, IParallelPort_getPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_getPathResultMsg.typecode)
        return response

    # op: IParallelPort_setPath
    def IParallelPort_setPath(self, request):
        if isinstance(request, IParallelPort_setPathRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPort_setPathResultMsg.typecode)
        return response

    # op: IUSBController_getEnabled
    def IUSBController_getEnabled(self, request):
        if isinstance(request, IUSBController_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getEnabledResultMsg.typecode)
        return response

    # op: IUSBController_setEnabled
    def IUSBController_setEnabled(self, request):
        if isinstance(request, IUSBController_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_setEnabledResultMsg.typecode)
        return response

    # op: IUSBController_getEnabledEhci
    def IUSBController_getEnabledEhci(self, request):
        if isinstance(request, IUSBController_getEnabledEhciRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getEnabledEhciResultMsg.typecode)
        return response

    # op: IUSBController_setEnabledEhci
    def IUSBController_setEnabledEhci(self, request):
        if isinstance(request, IUSBController_setEnabledEhciRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_setEnabledEhciResultMsg.typecode)
        return response

    # op: IUSBController_getProxyAvailable
    def IUSBController_getProxyAvailable(self, request):
        if isinstance(request, IUSBController_getProxyAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getProxyAvailableResultMsg.typecode)
        return response

    # op: IUSBController_getUSBStandard
    def IUSBController_getUSBStandard(self, request):
        if isinstance(request, IUSBController_getUSBStandardRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getUSBStandardResultMsg.typecode)
        return response

    # op: IUSBController_getDeviceFilters
    def IUSBController_getDeviceFilters(self, request):
        if isinstance(request, IUSBController_getDeviceFiltersRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_getDeviceFiltersResultMsg.typecode)
        return response

    # op: IUSBController_createDeviceFilter
    def IUSBController_createDeviceFilter(self, request):
        if isinstance(request, IUSBController_createDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_createDeviceFilterResultMsg.typecode)
        return response

    # op: IUSBController_insertDeviceFilter
    def IUSBController_insertDeviceFilter(self, request):
        if isinstance(request, IUSBController_insertDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_insertDeviceFilterResultMsg.typecode)
        return response

    # op: IUSBController_removeDeviceFilter
    def IUSBController_removeDeviceFilter(self, request):
        if isinstance(request, IUSBController_removeDeviceFilterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBController_removeDeviceFilterResultMsg.typecode)
        return response

    # op: IUSBDevice_getId
    def IUSBDevice_getId(self, request):
        if isinstance(request, IUSBDevice_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getIdResultMsg.typecode)
        return response

    # op: IUSBDevice_getVendorId
    def IUSBDevice_getVendorId(self, request):
        if isinstance(request, IUSBDevice_getVendorIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getVendorIdResultMsg.typecode)
        return response

    # op: IUSBDevice_getProductId
    def IUSBDevice_getProductId(self, request):
        if isinstance(request, IUSBDevice_getProductIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getProductIdResultMsg.typecode)
        return response

    # op: IUSBDevice_getRevision
    def IUSBDevice_getRevision(self, request):
        if isinstance(request, IUSBDevice_getRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getRevisionResultMsg.typecode)
        return response

    # op: IUSBDevice_getManufacturer
    def IUSBDevice_getManufacturer(self, request):
        if isinstance(request, IUSBDevice_getManufacturerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getManufacturerResultMsg.typecode)
        return response

    # op: IUSBDevice_getProduct
    def IUSBDevice_getProduct(self, request):
        if isinstance(request, IUSBDevice_getProductRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getProductResultMsg.typecode)
        return response

    # op: IUSBDevice_getSerialNumber
    def IUSBDevice_getSerialNumber(self, request):
        if isinstance(request, IUSBDevice_getSerialNumberRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getSerialNumberResultMsg.typecode)
        return response

    # op: IUSBDevice_getAddress
    def IUSBDevice_getAddress(self, request):
        if isinstance(request, IUSBDevice_getAddressRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getAddressResultMsg.typecode)
        return response

    # op: IUSBDevice_getPort
    def IUSBDevice_getPort(self, request):
        if isinstance(request, IUSBDevice_getPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getPortResultMsg.typecode)
        return response

    # op: IUSBDevice_getVersion
    def IUSBDevice_getVersion(self, request):
        if isinstance(request, IUSBDevice_getVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getVersionResultMsg.typecode)
        return response

    # op: IUSBDevice_getPortVersion
    def IUSBDevice_getPortVersion(self, request):
        if isinstance(request, IUSBDevice_getPortVersionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getPortVersionResultMsg.typecode)
        return response

    # op: IUSBDevice_getRemote
    def IUSBDevice_getRemote(self, request):
        if isinstance(request, IUSBDevice_getRemoteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDevice_getRemoteResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getName
    def IUSBDeviceFilter_getName(self, request):
        if isinstance(request, IUSBDeviceFilter_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getNameResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setName
    def IUSBDeviceFilter_setName(self, request):
        if isinstance(request, IUSBDeviceFilter_setNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setNameResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getActive
    def IUSBDeviceFilter_getActive(self, request):
        if isinstance(request, IUSBDeviceFilter_getActiveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getActiveResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setActive
    def IUSBDeviceFilter_setActive(self, request):
        if isinstance(request, IUSBDeviceFilter_setActiveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setActiveResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getVendorId
    def IUSBDeviceFilter_getVendorId(self, request):
        if isinstance(request, IUSBDeviceFilter_getVendorIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getVendorIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setVendorId
    def IUSBDeviceFilter_setVendorId(self, request):
        if isinstance(request, IUSBDeviceFilter_setVendorIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setVendorIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getProductId
    def IUSBDeviceFilter_getProductId(self, request):
        if isinstance(request, IUSBDeviceFilter_getProductIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getProductIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setProductId
    def IUSBDeviceFilter_setProductId(self, request):
        if isinstance(request, IUSBDeviceFilter_setProductIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setProductIdResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getRevision
    def IUSBDeviceFilter_getRevision(self, request):
        if isinstance(request, IUSBDeviceFilter_getRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getRevisionResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setRevision
    def IUSBDeviceFilter_setRevision(self, request):
        if isinstance(request, IUSBDeviceFilter_setRevisionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setRevisionResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getManufacturer
    def IUSBDeviceFilter_getManufacturer(self, request):
        if isinstance(request, IUSBDeviceFilter_getManufacturerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getManufacturerResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setManufacturer
    def IUSBDeviceFilter_setManufacturer(self, request):
        if isinstance(request, IUSBDeviceFilter_setManufacturerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setManufacturerResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getProduct
    def IUSBDeviceFilter_getProduct(self, request):
        if isinstance(request, IUSBDeviceFilter_getProductRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getProductResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setProduct
    def IUSBDeviceFilter_setProduct(self, request):
        if isinstance(request, IUSBDeviceFilter_setProductRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setProductResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getSerialNumber
    def IUSBDeviceFilter_getSerialNumber(self, request):
        if isinstance(request, IUSBDeviceFilter_getSerialNumberRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getSerialNumberResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setSerialNumber
    def IUSBDeviceFilter_setSerialNumber(self, request):
        if isinstance(request, IUSBDeviceFilter_setSerialNumberRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setSerialNumberResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getPort
    def IUSBDeviceFilter_getPort(self, request):
        if isinstance(request, IUSBDeviceFilter_getPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getPortResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setPort
    def IUSBDeviceFilter_setPort(self, request):
        if isinstance(request, IUSBDeviceFilter_setPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setPortResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getRemote
    def IUSBDeviceFilter_getRemote(self, request):
        if isinstance(request, IUSBDeviceFilter_getRemoteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getRemoteResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setRemote
    def IUSBDeviceFilter_setRemote(self, request):
        if isinstance(request, IUSBDeviceFilter_setRemoteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setRemoteResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_getMaskedInterfaces
    def IUSBDeviceFilter_getMaskedInterfaces(self, request):
        if isinstance(request, IUSBDeviceFilter_getMaskedInterfacesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_getMaskedInterfacesResultMsg.typecode)
        return response

    # op: IUSBDeviceFilter_setMaskedInterfaces
    def IUSBDeviceFilter_setMaskedInterfaces(self, request):
        if isinstance(request, IUSBDeviceFilter_setMaskedInterfacesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceFilter_setMaskedInterfacesResultMsg.typecode)
        return response

    # op: IHostUSBDevice_getState
    def IHostUSBDevice_getState(self, request):
        if isinstance(request, IHostUSBDevice_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostUSBDevice_getStateResultMsg.typecode)
        return response

    # op: IHostUSBDeviceFilter_getAction
    def IHostUSBDeviceFilter_getAction(self, request):
        if isinstance(request, IHostUSBDeviceFilter_getActionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostUSBDeviceFilter_getActionResultMsg.typecode)
        return response

    # op: IHostUSBDeviceFilter_setAction
    def IHostUSBDeviceFilter_setAction(self, request):
        if isinstance(request, IHostUSBDeviceFilter_setActionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostUSBDeviceFilter_setActionResultMsg.typecode)
        return response

    # op: IAudioAdapter_getEnabled
    def IAudioAdapter_getEnabled(self, request):
        if isinstance(request, IAudioAdapter_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_getEnabledResultMsg.typecode)
        return response

    # op: IAudioAdapter_setEnabled
    def IAudioAdapter_setEnabled(self, request):
        if isinstance(request, IAudioAdapter_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_setEnabledResultMsg.typecode)
        return response

    # op: IAudioAdapter_getAudioController
    def IAudioAdapter_getAudioController(self, request):
        if isinstance(request, IAudioAdapter_getAudioControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_getAudioControllerResultMsg.typecode)
        return response

    # op: IAudioAdapter_setAudioController
    def IAudioAdapter_setAudioController(self, request):
        if isinstance(request, IAudioAdapter_setAudioControllerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_setAudioControllerResultMsg.typecode)
        return response

    # op: IAudioAdapter_getAudioDriver
    def IAudioAdapter_getAudioDriver(self, request):
        if isinstance(request, IAudioAdapter_getAudioDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_getAudioDriverResultMsg.typecode)
        return response

    # op: IAudioAdapter_setAudioDriver
    def IAudioAdapter_setAudioDriver(self, request):
        if isinstance(request, IAudioAdapter_setAudioDriverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IAudioAdapter_setAudioDriverResultMsg.typecode)
        return response

    # op: IVRDEServer_getEnabled
    def IVRDEServer_getEnabled(self, request):
        if isinstance(request, IVRDEServer_getEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getEnabledResultMsg.typecode)
        return response

    # op: IVRDEServer_setEnabled
    def IVRDEServer_setEnabled(self, request):
        if isinstance(request, IVRDEServer_setEnabledRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setEnabledResultMsg.typecode)
        return response

    # op: IVRDEServer_getAuthType
    def IVRDEServer_getAuthType(self, request):
        if isinstance(request, IVRDEServer_getAuthTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAuthTypeResultMsg.typecode)
        return response

    # op: IVRDEServer_setAuthType
    def IVRDEServer_setAuthType(self, request):
        if isinstance(request, IVRDEServer_setAuthTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAuthTypeResultMsg.typecode)
        return response

    # op: IVRDEServer_getAuthTimeout
    def IVRDEServer_getAuthTimeout(self, request):
        if isinstance(request, IVRDEServer_getAuthTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAuthTimeoutResultMsg.typecode)
        return response

    # op: IVRDEServer_setAuthTimeout
    def IVRDEServer_setAuthTimeout(self, request):
        if isinstance(request, IVRDEServer_setAuthTimeoutRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAuthTimeoutResultMsg.typecode)
        return response

    # op: IVRDEServer_getAllowMultiConnection
    def IVRDEServer_getAllowMultiConnection(self, request):
        if isinstance(request, IVRDEServer_getAllowMultiConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAllowMultiConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_setAllowMultiConnection
    def IVRDEServer_setAllowMultiConnection(self, request):
        if isinstance(request, IVRDEServer_setAllowMultiConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAllowMultiConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_getReuseSingleConnection
    def IVRDEServer_getReuseSingleConnection(self, request):
        if isinstance(request, IVRDEServer_getReuseSingleConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getReuseSingleConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_setReuseSingleConnection
    def IVRDEServer_setReuseSingleConnection(self, request):
        if isinstance(request, IVRDEServer_setReuseSingleConnectionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setReuseSingleConnectionResultMsg.typecode)
        return response

    # op: IVRDEServer_getVRDEExtPack
    def IVRDEServer_getVRDEExtPack(self, request):
        if isinstance(request, IVRDEServer_getVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getVRDEExtPackResultMsg.typecode)
        return response

    # op: IVRDEServer_setVRDEExtPack
    def IVRDEServer_setVRDEExtPack(self, request):
        if isinstance(request, IVRDEServer_setVRDEExtPackRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setVRDEExtPackResultMsg.typecode)
        return response

    # op: IVRDEServer_getAuthLibrary
    def IVRDEServer_getAuthLibrary(self, request):
        if isinstance(request, IVRDEServer_getAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getAuthLibraryResultMsg.typecode)
        return response

    # op: IVRDEServer_setAuthLibrary
    def IVRDEServer_setAuthLibrary(self, request):
        if isinstance(request, IVRDEServer_setAuthLibraryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setAuthLibraryResultMsg.typecode)
        return response

    # op: IVRDEServer_getVRDEProperties
    def IVRDEServer_getVRDEProperties(self, request):
        if isinstance(request, IVRDEServer_getVRDEPropertiesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getVRDEPropertiesResultMsg.typecode)
        return response

    # op: IVRDEServer_setVRDEProperty
    def IVRDEServer_setVRDEProperty(self, request):
        if isinstance(request, IVRDEServer_setVRDEPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_setVRDEPropertyResultMsg.typecode)
        return response

    # op: IVRDEServer_getVRDEProperty
    def IVRDEServer_getVRDEProperty(self, request):
        if isinstance(request, IVRDEServer_getVRDEPropertyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVRDEServer_getVRDEPropertyResultMsg.typecode)
        return response

    # op: ISession_getState
    def ISession_getState(self, request):
        if isinstance(request, ISession_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getStateResultMsg.typecode)
        return response

    # op: ISession_getType
    def ISession_getType(self, request):
        if isinstance(request, ISession_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getTypeResultMsg.typecode)
        return response

    # op: ISession_getMachine
    def ISession_getMachine(self, request):
        if isinstance(request, ISession_getMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getMachineResultMsg.typecode)
        return response

    # op: ISession_getConsole
    def ISession_getConsole(self, request):
        if isinstance(request, ISession_getConsoleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_getConsoleResultMsg.typecode)
        return response

    # op: ISession_unlockMachine
    def ISession_unlockMachine(self, request):
        if isinstance(request, ISession_unlockMachineRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISession_unlockMachineResultMsg.typecode)
        return response

    # op: IStorageController_getName
    def IStorageController_getName(self, request):
        if isinstance(request, IStorageController_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getNameResultMsg.typecode)
        return response

    # op: IStorageController_getMaxDevicesPerPortCount
    def IStorageController_getMaxDevicesPerPortCount(self, request):
        if isinstance(request, IStorageController_getMaxDevicesPerPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getMaxDevicesPerPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getMinPortCount
    def IStorageController_getMinPortCount(self, request):
        if isinstance(request, IStorageController_getMinPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getMinPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getMaxPortCount
    def IStorageController_getMaxPortCount(self, request):
        if isinstance(request, IStorageController_getMaxPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getMaxPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getInstance
    def IStorageController_getInstance(self, request):
        if isinstance(request, IStorageController_getInstanceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getInstanceResultMsg.typecode)
        return response

    # op: IStorageController_setInstance
    def IStorageController_setInstance(self, request):
        if isinstance(request, IStorageController_setInstanceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setInstanceResultMsg.typecode)
        return response

    # op: IStorageController_getPortCount
    def IStorageController_getPortCount(self, request):
        if isinstance(request, IStorageController_getPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getPortCountResultMsg.typecode)
        return response

    # op: IStorageController_setPortCount
    def IStorageController_setPortCount(self, request):
        if isinstance(request, IStorageController_setPortCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setPortCountResultMsg.typecode)
        return response

    # op: IStorageController_getBus
    def IStorageController_getBus(self, request):
        if isinstance(request, IStorageController_getBusRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getBusResultMsg.typecode)
        return response

    # op: IStorageController_getControllerType
    def IStorageController_getControllerType(self, request):
        if isinstance(request, IStorageController_getControllerTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getControllerTypeResultMsg.typecode)
        return response

    # op: IStorageController_setControllerType
    def IStorageController_setControllerType(self, request):
        if isinstance(request, IStorageController_setControllerTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setControllerTypeResultMsg.typecode)
        return response

    # op: IStorageController_getUseHostIOCache
    def IStorageController_getUseHostIOCache(self, request):
        if isinstance(request, IStorageController_getUseHostIOCacheRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getUseHostIOCacheResultMsg.typecode)
        return response

    # op: IStorageController_setUseHostIOCache
    def IStorageController_setUseHostIOCache(self, request):
        if isinstance(request, IStorageController_setUseHostIOCacheRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setUseHostIOCacheResultMsg.typecode)
        return response

    # op: IStorageController_getBootable
    def IStorageController_getBootable(self, request):
        if isinstance(request, IStorageController_getBootableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getBootableResultMsg.typecode)
        return response

    # op: IStorageController_getIDEEmulationPort
    def IStorageController_getIDEEmulationPort(self, request):
        if isinstance(request, IStorageController_getIDEEmulationPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_getIDEEmulationPortResultMsg.typecode)
        return response

    # op: IStorageController_setIDEEmulationPort
    def IStorageController_setIDEEmulationPort(self, request):
        if isinstance(request, IStorageController_setIDEEmulationPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageController_setIDEEmulationPortResultMsg.typecode)
        return response

    # op: IManagedObjectRef_getInterfaceName
    def IManagedObjectRef_getInterfaceName(self, request):
        if isinstance(request, IManagedObjectRef_getInterfaceNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IManagedObjectRef_getInterfaceNameResultMsg.typecode)
        return response

    # op: IManagedObjectRef_release
    def IManagedObjectRef_release(self, request):
        if isinstance(request, IManagedObjectRef_releaseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IManagedObjectRef_releaseResultMsg.typecode)
        return response

    # op: IWebsessionManager_logon
    def IWebsessionManager_logon(self, request):
        if isinstance(request, IWebsessionManager_logonRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IWebsessionManager_logonResultMsg.typecode)
        return response

    # op: IWebsessionManager_getSessionObject
    def IWebsessionManager_getSessionObject(self, request):
        if isinstance(request, IWebsessionManager_getSessionObjectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IWebsessionManager_getSessionObjectResultMsg.typecode)
        return response

    # op: IWebsessionManager_logoff
    def IWebsessionManager_logoff(self, request):
        if isinstance(request, IWebsessionManager_logoffRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IWebsessionManager_logoffResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getMetricName
    def IPerformanceMetric_getMetricName(self, request):
        if isinstance(request, IPerformanceMetric_getMetricNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getMetricNameResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getObject
    def IPerformanceMetric_getObject(self, request):
        if isinstance(request, IPerformanceMetric_getObjectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getObjectResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getDescription
    def IPerformanceMetric_getDescription(self, request):
        if isinstance(request, IPerformanceMetric_getDescriptionRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getDescriptionResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getPeriod
    def IPerformanceMetric_getPeriod(self, request):
        if isinstance(request, IPerformanceMetric_getPeriodRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getPeriodResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getCount
    def IPerformanceMetric_getCount(self, request):
        if isinstance(request, IPerformanceMetric_getCountRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getCountResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getUnit
    def IPerformanceMetric_getUnit(self, request):
        if isinstance(request, IPerformanceMetric_getUnitRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getUnitResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getMinimumValue
    def IPerformanceMetric_getMinimumValue(self, request):
        if isinstance(request, IPerformanceMetric_getMinimumValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getMinimumValueResultMsg.typecode)
        return response

    # op: IPerformanceMetric_getMaximumValue
    def IPerformanceMetric_getMaximumValue(self, request):
        if isinstance(request, IPerformanceMetric_getMaximumValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceMetric_getMaximumValueResultMsg.typecode)
        return response

    # op: IPerformanceCollector_getMetricNames
    def IPerformanceCollector_getMetricNames(self, request):
        if isinstance(request, IPerformanceCollector_getMetricNamesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_getMetricNamesResultMsg.typecode)
        return response

    # op: IPerformanceCollector_getMetrics
    def IPerformanceCollector_getMetrics(self, request):
        if isinstance(request, IPerformanceCollector_getMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_getMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_setupMetrics
    def IPerformanceCollector_setupMetrics(self, request):
        if isinstance(request, IPerformanceCollector_setupMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_setupMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_enableMetrics
    def IPerformanceCollector_enableMetrics(self, request):
        if isinstance(request, IPerformanceCollector_enableMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_enableMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_disableMetrics
    def IPerformanceCollector_disableMetrics(self, request):
        if isinstance(request, IPerformanceCollector_disableMetricsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_disableMetricsResultMsg.typecode)
        return response

    # op: IPerformanceCollector_queryMetricsData
    def IPerformanceCollector_queryMetricsData(self, request):
        if isinstance(request, IPerformanceCollector_queryMetricsDataRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IPerformanceCollector_queryMetricsDataResultMsg.typecode)
        return response

    # op: INATEngine_getNetwork
    def INATEngine_getNetwork(self, request):
        if isinstance(request, INATEngine_getNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getNetworkResultMsg.typecode)
        return response

    # op: INATEngine_setNetwork
    def INATEngine_setNetwork(self, request):
        if isinstance(request, INATEngine_setNetworkRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setNetworkResultMsg.typecode)
        return response

    # op: INATEngine_getHostIP
    def INATEngine_getHostIP(self, request):
        if isinstance(request, INATEngine_getHostIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getHostIPResultMsg.typecode)
        return response

    # op: INATEngine_setHostIP
    def INATEngine_setHostIP(self, request):
        if isinstance(request, INATEngine_setHostIPRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setHostIPResultMsg.typecode)
        return response

    # op: INATEngine_getTftpPrefix
    def INATEngine_getTftpPrefix(self, request):
        if isinstance(request, INATEngine_getTftpPrefixRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getTftpPrefixResultMsg.typecode)
        return response

    # op: INATEngine_setTftpPrefix
    def INATEngine_setTftpPrefix(self, request):
        if isinstance(request, INATEngine_setTftpPrefixRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setTftpPrefixResultMsg.typecode)
        return response

    # op: INATEngine_getTftpBootFile
    def INATEngine_getTftpBootFile(self, request):
        if isinstance(request, INATEngine_getTftpBootFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getTftpBootFileResultMsg.typecode)
        return response

    # op: INATEngine_setTftpBootFile
    def INATEngine_setTftpBootFile(self, request):
        if isinstance(request, INATEngine_setTftpBootFileRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setTftpBootFileResultMsg.typecode)
        return response

    # op: INATEngine_getTftpNextServer
    def INATEngine_getTftpNextServer(self, request):
        if isinstance(request, INATEngine_getTftpNextServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getTftpNextServerResultMsg.typecode)
        return response

    # op: INATEngine_setTftpNextServer
    def INATEngine_setTftpNextServer(self, request):
        if isinstance(request, INATEngine_setTftpNextServerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setTftpNextServerResultMsg.typecode)
        return response

    # op: INATEngine_getAliasMode
    def INATEngine_getAliasMode(self, request):
        if isinstance(request, INATEngine_getAliasModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getAliasModeResultMsg.typecode)
        return response

    # op: INATEngine_setAliasMode
    def INATEngine_setAliasMode(self, request):
        if isinstance(request, INATEngine_setAliasModeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setAliasModeResultMsg.typecode)
        return response

    # op: INATEngine_getDnsPassDomain
    def INATEngine_getDnsPassDomain(self, request):
        if isinstance(request, INATEngine_getDnsPassDomainRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getDnsPassDomainResultMsg.typecode)
        return response

    # op: INATEngine_setDnsPassDomain
    def INATEngine_setDnsPassDomain(self, request):
        if isinstance(request, INATEngine_setDnsPassDomainRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setDnsPassDomainResultMsg.typecode)
        return response

    # op: INATEngine_getDnsProxy
    def INATEngine_getDnsProxy(self, request):
        if isinstance(request, INATEngine_getDnsProxyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getDnsProxyResultMsg.typecode)
        return response

    # op: INATEngine_setDnsProxy
    def INATEngine_setDnsProxy(self, request):
        if isinstance(request, INATEngine_setDnsProxyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setDnsProxyResultMsg.typecode)
        return response

    # op: INATEngine_getDnsUseHostResolver
    def INATEngine_getDnsUseHostResolver(self, request):
        if isinstance(request, INATEngine_getDnsUseHostResolverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getDnsUseHostResolverResultMsg.typecode)
        return response

    # op: INATEngine_setDnsUseHostResolver
    def INATEngine_setDnsUseHostResolver(self, request):
        if isinstance(request, INATEngine_setDnsUseHostResolverRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setDnsUseHostResolverResultMsg.typecode)
        return response

    # op: INATEngine_getRedirects
    def INATEngine_getRedirects(self, request):
        if isinstance(request, INATEngine_getRedirectsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getRedirectsResultMsg.typecode)
        return response

    # op: INATEngine_setNetworkSettings
    def INATEngine_setNetworkSettings(self, request):
        if isinstance(request, INATEngine_setNetworkSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_setNetworkSettingsResultMsg.typecode)
        return response

    # op: INATEngine_getNetworkSettings
    def INATEngine_getNetworkSettings(self, request):
        if isinstance(request, INATEngine_getNetworkSettingsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_getNetworkSettingsResultMsg.typecode)
        return response

    # op: INATEngine_addRedirect
    def INATEngine_addRedirect(self, request):
        if isinstance(request, INATEngine_addRedirectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_addRedirectResultMsg.typecode)
        return response

    # op: INATEngine_removeRedirect
    def INATEngine_removeRedirect(self, request):
        if isinstance(request, INATEngine_removeRedirectRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATEngine_removeRedirectResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getName
    def IBandwidthGroup_getName(self, request):
        if isinstance(request, IBandwidthGroup_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getNameResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getType
    def IBandwidthGroup_getType(self, request):
        if isinstance(request, IBandwidthGroup_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getTypeResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getReference
    def IBandwidthGroup_getReference(self, request):
        if isinstance(request, IBandwidthGroup_getReferenceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getReferenceResultMsg.typecode)
        return response

    # op: IBandwidthGroup_getMaxMbPerSec
    def IBandwidthGroup_getMaxMbPerSec(self, request):
        if isinstance(request, IBandwidthGroup_getMaxMbPerSecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_getMaxMbPerSecResultMsg.typecode)
        return response

    # op: IBandwidthGroup_setMaxMbPerSec
    def IBandwidthGroup_setMaxMbPerSec(self, request):
        if isinstance(request, IBandwidthGroup_setMaxMbPerSecRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroup_setMaxMbPerSecResultMsg.typecode)
        return response

    # op: IBandwidthControl_getNumGroups
    def IBandwidthControl_getNumGroups(self, request):
        if isinstance(request, IBandwidthControl_getNumGroupsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_getNumGroupsResultMsg.typecode)
        return response

    # op: IBandwidthControl_createBandwidthGroup
    def IBandwidthControl_createBandwidthGroup(self, request):
        if isinstance(request, IBandwidthControl_createBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_createBandwidthGroupResultMsg.typecode)
        return response

    # op: IBandwidthControl_deleteBandwidthGroup
    def IBandwidthControl_deleteBandwidthGroup(self, request):
        if isinstance(request, IBandwidthControl_deleteBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_deleteBandwidthGroupResultMsg.typecode)
        return response

    # op: IBandwidthControl_getBandwidthGroup
    def IBandwidthControl_getBandwidthGroup(self, request):
        if isinstance(request, IBandwidthControl_getBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_getBandwidthGroupResultMsg.typecode)
        return response

    # op: IBandwidthControl_getAllBandwidthGroups
    def IBandwidthControl_getAllBandwidthGroups(self, request):
        if isinstance(request, IBandwidthControl_getAllBandwidthGroupsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthControl_getAllBandwidthGroupsResultMsg.typecode)
        return response

    # op: IEventSource_createListener
    def IEventSource_createListener(self, request):
        if isinstance(request, IEventSource_createListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_createListenerResultMsg.typecode)
        return response

    # op: IEventSource_createAggregator
    def IEventSource_createAggregator(self, request):
        if isinstance(request, IEventSource_createAggregatorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_createAggregatorResultMsg.typecode)
        return response

    # op: IEventSource_registerListener
    def IEventSource_registerListener(self, request):
        if isinstance(request, IEventSource_registerListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_registerListenerResultMsg.typecode)
        return response

    # op: IEventSource_unregisterListener
    def IEventSource_unregisterListener(self, request):
        if isinstance(request, IEventSource_unregisterListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_unregisterListenerResultMsg.typecode)
        return response

    # op: IEventSource_fireEvent
    def IEventSource_fireEvent(self, request):
        if isinstance(request, IEventSource_fireEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_fireEventResultMsg.typecode)
        return response

    # op: IEventSource_getEvent
    def IEventSource_getEvent(self, request):
        if isinstance(request, IEventSource_getEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_getEventResultMsg.typecode)
        return response

    # op: IEventSource_eventProcessed
    def IEventSource_eventProcessed(self, request):
        if isinstance(request, IEventSource_eventProcessedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSource_eventProcessedResultMsg.typecode)
        return response

    # op: IEventListener_handleEvent
    def IEventListener_handleEvent(self, request):
        if isinstance(request, IEventListener_handleEventRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventListener_handleEventResultMsg.typecode)
        return response

    # op: IEvent_getType
    def IEvent_getType(self, request):
        if isinstance(request, IEvent_getTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_getTypeResultMsg.typecode)
        return response

    # op: IEvent_getSource
    def IEvent_getSource(self, request):
        if isinstance(request, IEvent_getSourceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_getSourceResultMsg.typecode)
        return response

    # op: IEvent_getWaitable
    def IEvent_getWaitable(self, request):
        if isinstance(request, IEvent_getWaitableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_getWaitableResultMsg.typecode)
        return response

    # op: IEvent_setProcessed
    def IEvent_setProcessed(self, request):
        if isinstance(request, IEvent_setProcessedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_setProcessedResultMsg.typecode)
        return response

    # op: IEvent_waitProcessed
    def IEvent_waitProcessed(self, request):
        if isinstance(request, IEvent_waitProcessedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEvent_waitProcessedResultMsg.typecode)
        return response

    # op: IReusableEvent_getGeneration
    def IReusableEvent_getGeneration(self, request):
        if isinstance(request, IReusableEvent_getGenerationRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IReusableEvent_getGenerationResultMsg.typecode)
        return response

    # op: IReusableEvent_reuse
    def IReusableEvent_reuse(self, request):
        if isinstance(request, IReusableEvent_reuseRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IReusableEvent_reuseResultMsg.typecode)
        return response

    # op: IMachineEvent_getMachineId
    def IMachineEvent_getMachineId(self, request):
        if isinstance(request, IMachineEvent_getMachineIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineEvent_getMachineIdResultMsg.typecode)
        return response

    # op: IMachineStateChangedEvent_getState
    def IMachineStateChangedEvent_getState(self, request):
        if isinstance(request, IMachineStateChangedEvent_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineStateChangedEvent_getStateResultMsg.typecode)
        return response

    # op: IMachineDataChangedEvent_getTemporary
    def IMachineDataChangedEvent_getTemporary(self, request):
        if isinstance(request, IMachineDataChangedEvent_getTemporaryRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineDataChangedEvent_getTemporaryResultMsg.typecode)
        return response

    # op: IMediumRegisteredEvent_getMediumId
    def IMediumRegisteredEvent_getMediumId(self, request):
        if isinstance(request, IMediumRegisteredEvent_getMediumIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumRegisteredEvent_getMediumIdResultMsg.typecode)
        return response

    # op: IMediumRegisteredEvent_getMediumType
    def IMediumRegisteredEvent_getMediumType(self, request):
        if isinstance(request, IMediumRegisteredEvent_getMediumTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumRegisteredEvent_getMediumTypeResultMsg.typecode)
        return response

    # op: IMediumRegisteredEvent_getRegistered
    def IMediumRegisteredEvent_getRegistered(self, request):
        if isinstance(request, IMediumRegisteredEvent_getRegisteredRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumRegisteredEvent_getRegisteredResultMsg.typecode)
        return response

    # op: IMachineRegisteredEvent_getRegistered
    def IMachineRegisteredEvent_getRegistered(self, request):
        if isinstance(request, IMachineRegisteredEvent_getRegisteredRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMachineRegisteredEvent_getRegisteredResultMsg.typecode)
        return response

    # op: ISessionStateChangedEvent_getState
    def ISessionStateChangedEvent_getState(self, request):
        if isinstance(request, ISessionStateChangedEvent_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISessionStateChangedEvent_getStateResultMsg.typecode)
        return response

    # op: IGuestPropertyChangedEvent_getName
    def IGuestPropertyChangedEvent_getName(self, request):
        if isinstance(request, IGuestPropertyChangedEvent_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestPropertyChangedEvent_getNameResultMsg.typecode)
        return response

    # op: IGuestPropertyChangedEvent_getValue
    def IGuestPropertyChangedEvent_getValue(self, request):
        if isinstance(request, IGuestPropertyChangedEvent_getValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestPropertyChangedEvent_getValueResultMsg.typecode)
        return response

    # op: IGuestPropertyChangedEvent_getFlags
    def IGuestPropertyChangedEvent_getFlags(self, request):
        if isinstance(request, IGuestPropertyChangedEvent_getFlagsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestPropertyChangedEvent_getFlagsResultMsg.typecode)
        return response

    # op: ISnapshotEvent_getSnapshotId
    def ISnapshotEvent_getSnapshotId(self, request):
        if isinstance(request, ISnapshotEvent_getSnapshotIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISnapshotEvent_getSnapshotIdResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getVisible
    def IMousePointerShapeChangedEvent_getVisible(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getVisibleRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getVisibleResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getAlpha
    def IMousePointerShapeChangedEvent_getAlpha(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getAlphaRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getAlphaResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getXhot
    def IMousePointerShapeChangedEvent_getXhot(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getXhotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getXhotResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getYhot
    def IMousePointerShapeChangedEvent_getYhot(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getYhotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getYhotResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getWidth
    def IMousePointerShapeChangedEvent_getWidth(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getWidthRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getWidthResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getHeight
    def IMousePointerShapeChangedEvent_getHeight(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getHeightRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getHeightResultMsg.typecode)
        return response

    # op: IMousePointerShapeChangedEvent_getShape
    def IMousePointerShapeChangedEvent_getShape(self, request):
        if isinstance(request, IMousePointerShapeChangedEvent_getShapeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMousePointerShapeChangedEvent_getShapeResultMsg.typecode)
        return response

    # op: IMouseCapabilityChangedEvent_getSupportsAbsolute
    def IMouseCapabilityChangedEvent_getSupportsAbsolute(self, request):
        if isinstance(request, IMouseCapabilityChangedEvent_getSupportsAbsoluteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouseCapabilityChangedEvent_getSupportsAbsoluteResultMsg.typecode)
        return response

    # op: IMouseCapabilityChangedEvent_getSupportsRelative
    def IMouseCapabilityChangedEvent_getSupportsRelative(self, request):
        if isinstance(request, IMouseCapabilityChangedEvent_getSupportsRelativeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouseCapabilityChangedEvent_getSupportsRelativeResultMsg.typecode)
        return response

    # op: IMouseCapabilityChangedEvent_getNeedsHostCursor
    def IMouseCapabilityChangedEvent_getNeedsHostCursor(self, request):
        if isinstance(request, IMouseCapabilityChangedEvent_getNeedsHostCursorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMouseCapabilityChangedEvent_getNeedsHostCursorResultMsg.typecode)
        return response

    # op: IKeyboardLedsChangedEvent_getNumLock
    def IKeyboardLedsChangedEvent_getNumLock(self, request):
        if isinstance(request, IKeyboardLedsChangedEvent_getNumLockRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboardLedsChangedEvent_getNumLockResultMsg.typecode)
        return response

    # op: IKeyboardLedsChangedEvent_getCapsLock
    def IKeyboardLedsChangedEvent_getCapsLock(self, request):
        if isinstance(request, IKeyboardLedsChangedEvent_getCapsLockRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboardLedsChangedEvent_getCapsLockResultMsg.typecode)
        return response

    # op: IKeyboardLedsChangedEvent_getScrollLock
    def IKeyboardLedsChangedEvent_getScrollLock(self, request):
        if isinstance(request, IKeyboardLedsChangedEvent_getScrollLockRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IKeyboardLedsChangedEvent_getScrollLockResultMsg.typecode)
        return response

    # op: IStateChangedEvent_getState
    def IStateChangedEvent_getState(self, request):
        if isinstance(request, IStateChangedEvent_getStateRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStateChangedEvent_getStateResultMsg.typecode)
        return response

    # op: INetworkAdapterChangedEvent_getNetworkAdapter
    def INetworkAdapterChangedEvent_getNetworkAdapter(self, request):
        if isinstance(request, INetworkAdapterChangedEvent_getNetworkAdapterRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INetworkAdapterChangedEvent_getNetworkAdapterResultMsg.typecode)
        return response

    # op: ISerialPortChangedEvent_getSerialPort
    def ISerialPortChangedEvent_getSerialPort(self, request):
        if isinstance(request, ISerialPortChangedEvent_getSerialPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISerialPortChangedEvent_getSerialPortResultMsg.typecode)
        return response

    # op: IParallelPortChangedEvent_getParallelPort
    def IParallelPortChangedEvent_getParallelPort(self, request):
        if isinstance(request, IParallelPortChangedEvent_getParallelPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IParallelPortChangedEvent_getParallelPortResultMsg.typecode)
        return response

    # op: IMediumChangedEvent_getMediumAttachment
    def IMediumChangedEvent_getMediumAttachment(self, request):
        if isinstance(request, IMediumChangedEvent_getMediumAttachmentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IMediumChangedEvent_getMediumAttachmentResultMsg.typecode)
        return response

    # op: ICPUChangedEvent_getCpu
    def ICPUChangedEvent_getCpu(self, request):
        if isinstance(request, ICPUChangedEvent_getCpuRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ICPUChangedEvent_getCpuResultMsg.typecode)
        return response

    # op: ICPUChangedEvent_getAdd
    def ICPUChangedEvent_getAdd(self, request):
        if isinstance(request, ICPUChangedEvent_getAddRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ICPUChangedEvent_getAddResultMsg.typecode)
        return response

    # op: ICPUExecutionCapChangedEvent_getExecutionCap
    def ICPUExecutionCapChangedEvent_getExecutionCap(self, request):
        if isinstance(request, ICPUExecutionCapChangedEvent_getExecutionCapRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ICPUExecutionCapChangedEvent_getExecutionCapResultMsg.typecode)
        return response

    # op: IGuestKeyboardEvent_getScancodes
    def IGuestKeyboardEvent_getScancodes(self, request):
        if isinstance(request, IGuestKeyboardEvent_getScancodesRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestKeyboardEvent_getScancodesResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getAbsolute
    def IGuestMouseEvent_getAbsolute(self, request):
        if isinstance(request, IGuestMouseEvent_getAbsoluteRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getAbsoluteResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getX
    def IGuestMouseEvent_getX(self, request):
        if isinstance(request, IGuestMouseEvent_getXRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getXResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getY
    def IGuestMouseEvent_getY(self, request):
        if isinstance(request, IGuestMouseEvent_getYRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getYResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getZ
    def IGuestMouseEvent_getZ(self, request):
        if isinstance(request, IGuestMouseEvent_getZRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getZResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getW
    def IGuestMouseEvent_getW(self, request):
        if isinstance(request, IGuestMouseEvent_getWRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getWResultMsg.typecode)
        return response

    # op: IGuestMouseEvent_getButtons
    def IGuestMouseEvent_getButtons(self, request):
        if isinstance(request, IGuestMouseEvent_getButtonsRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMouseEvent_getButtonsResultMsg.typecode)
        return response

    # op: IUSBDeviceStateChangedEvent_getDevice
    def IUSBDeviceStateChangedEvent_getDevice(self, request):
        if isinstance(request, IUSBDeviceStateChangedEvent_getDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceStateChangedEvent_getDeviceResultMsg.typecode)
        return response

    # op: IUSBDeviceStateChangedEvent_getAttached
    def IUSBDeviceStateChangedEvent_getAttached(self, request):
        if isinstance(request, IUSBDeviceStateChangedEvent_getAttachedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceStateChangedEvent_getAttachedResultMsg.typecode)
        return response

    # op: IUSBDeviceStateChangedEvent_getError
    def IUSBDeviceStateChangedEvent_getError(self, request):
        if isinstance(request, IUSBDeviceStateChangedEvent_getErrorRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IUSBDeviceStateChangedEvent_getErrorResultMsg.typecode)
        return response

    # op: ISharedFolderChangedEvent_getScope
    def ISharedFolderChangedEvent_getScope(self, request):
        if isinstance(request, ISharedFolderChangedEvent_getScopeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(ISharedFolderChangedEvent_getScopeResultMsg.typecode)
        return response

    # op: IRuntimeErrorEvent_getFatal
    def IRuntimeErrorEvent_getFatal(self, request):
        if isinstance(request, IRuntimeErrorEvent_getFatalRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IRuntimeErrorEvent_getFatalResultMsg.typecode)
        return response

    # op: IRuntimeErrorEvent_getId
    def IRuntimeErrorEvent_getId(self, request):
        if isinstance(request, IRuntimeErrorEvent_getIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IRuntimeErrorEvent_getIdResultMsg.typecode)
        return response

    # op: IRuntimeErrorEvent_getMessage
    def IRuntimeErrorEvent_getMessage(self, request):
        if isinstance(request, IRuntimeErrorEvent_getMessageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IRuntimeErrorEvent_getMessageResultMsg.typecode)
        return response

    # op: IEventSourceChangedEvent_getListener
    def IEventSourceChangedEvent_getListener(self, request):
        if isinstance(request, IEventSourceChangedEvent_getListenerRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSourceChangedEvent_getListenerResultMsg.typecode)
        return response

    # op: IEventSourceChangedEvent_getAdd
    def IEventSourceChangedEvent_getAdd(self, request):
        if isinstance(request, IEventSourceChangedEvent_getAddRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IEventSourceChangedEvent_getAddResultMsg.typecode)
        return response

    # op: IExtraDataChangedEvent_getMachineId
    def IExtraDataChangedEvent_getMachineId(self, request):
        if isinstance(request, IExtraDataChangedEvent_getMachineIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataChangedEvent_getMachineIdResultMsg.typecode)
        return response

    # op: IExtraDataChangedEvent_getKey
    def IExtraDataChangedEvent_getKey(self, request):
        if isinstance(request, IExtraDataChangedEvent_getKeyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataChangedEvent_getKeyResultMsg.typecode)
        return response

    # op: IExtraDataChangedEvent_getValue
    def IExtraDataChangedEvent_getValue(self, request):
        if isinstance(request, IExtraDataChangedEvent_getValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataChangedEvent_getValueResultMsg.typecode)
        return response

    # op: IVetoEvent_addVeto
    def IVetoEvent_addVeto(self, request):
        if isinstance(request, IVetoEvent_addVetoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVetoEvent_addVetoResultMsg.typecode)
        return response

    # op: IVetoEvent_isVetoed
    def IVetoEvent_isVetoed(self, request):
        if isinstance(request, IVetoEvent_isVetoedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVetoEvent_isVetoedResultMsg.typecode)
        return response

    # op: IVetoEvent_getVetos
    def IVetoEvent_getVetos(self, request):
        if isinstance(request, IVetoEvent_getVetosRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVetoEvent_getVetosResultMsg.typecode)
        return response

    # op: IExtraDataCanChangeEvent_getMachineId
    def IExtraDataCanChangeEvent_getMachineId(self, request):
        if isinstance(request, IExtraDataCanChangeEvent_getMachineIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataCanChangeEvent_getMachineIdResultMsg.typecode)
        return response

    # op: IExtraDataCanChangeEvent_getKey
    def IExtraDataCanChangeEvent_getKey(self, request):
        if isinstance(request, IExtraDataCanChangeEvent_getKeyRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataCanChangeEvent_getKeyResultMsg.typecode)
        return response

    # op: IExtraDataCanChangeEvent_getValue
    def IExtraDataCanChangeEvent_getValue(self, request):
        if isinstance(request, IExtraDataCanChangeEvent_getValueRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IExtraDataCanChangeEvent_getValueResultMsg.typecode)
        return response

    # op: IShowWindowEvent_getWinId
    def IShowWindowEvent_getWinId(self, request):
        if isinstance(request, IShowWindowEvent_getWinIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IShowWindowEvent_getWinIdResultMsg.typecode)
        return response

    # op: IShowWindowEvent_setWinId
    def IShowWindowEvent_setWinId(self, request):
        if isinstance(request, IShowWindowEvent_setWinIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IShowWindowEvent_setWinIdResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getSlot
    def INATRedirectEvent_getSlot(self, request):
        if isinstance(request, INATRedirectEvent_getSlotRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getSlotResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getRemove
    def INATRedirectEvent_getRemove(self, request):
        if isinstance(request, INATRedirectEvent_getRemoveRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getRemoveResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getName
    def INATRedirectEvent_getName(self, request):
        if isinstance(request, INATRedirectEvent_getNameRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getNameResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getProto
    def INATRedirectEvent_getProto(self, request):
        if isinstance(request, INATRedirectEvent_getProtoRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getProtoResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getHostIp
    def INATRedirectEvent_getHostIp(self, request):
        if isinstance(request, INATRedirectEvent_getHostIpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getHostIpResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getHostPort
    def INATRedirectEvent_getHostPort(self, request):
        if isinstance(request, INATRedirectEvent_getHostPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getHostPortResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getGuestIp
    def INATRedirectEvent_getGuestIp(self, request):
        if isinstance(request, INATRedirectEvent_getGuestIpRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getGuestIpResultMsg.typecode)
        return response

    # op: INATRedirectEvent_getGuestPort
    def INATRedirectEvent_getGuestPort(self, request):
        if isinstance(request, INATRedirectEvent_getGuestPortRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(INATRedirectEvent_getGuestPortResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getPlugged
    def IHostPciDevicePlugEvent_getPlugged(self, request):
        if isinstance(request, IHostPciDevicePlugEvent_getPluggedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getPluggedResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getSuccess
    def IHostPciDevicePlugEvent_getSuccess(self, request):
        if isinstance(request, IHostPciDevicePlugEvent_getSuccessRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getSuccessResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getAttachment
    def IHostPciDevicePlugEvent_getAttachment(self, request):
        if isinstance(request, IHostPciDevicePlugEvent_getAttachmentRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getAttachmentResultMsg.typecode)
        return response

    # op: IHostPciDevicePlugEvent_getMessage
    def IHostPciDevicePlugEvent_getMessage(self, request):
        if isinstance(request, IHostPciDevicePlugEvent_getMessageRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IHostPciDevicePlugEvent_getMessageResultMsg.typecode)
        return response

    # op: IVBoxSVCAvailabilityChangedEvent_getAvailable
    def IVBoxSVCAvailabilityChangedEvent_getAvailable(self, request):
        if isinstance(request, IVBoxSVCAvailabilityChangedEvent_getAvailableRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IVBoxSVCAvailabilityChangedEvent_getAvailableResultMsg.typecode)
        return response

    # op: IBandwidthGroupChangedEvent_getBandwidthGroup
    def IBandwidthGroupChangedEvent_getBandwidthGroup(self, request):
        if isinstance(request, IBandwidthGroupChangedEvent_getBandwidthGroupRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IBandwidthGroupChangedEvent_getBandwidthGroupResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getChangeType
    def IGuestMonitorChangedEvent_getChangeType(self, request):
        if isinstance(request, IGuestMonitorChangedEvent_getChangeTypeRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getChangeTypeResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getScreenId
    def IGuestMonitorChangedEvent_getScreenId(self, request):
        if isinstance(request, IGuestMonitorChangedEvent_getScreenIdRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getScreenIdResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getOriginX
    def IGuestMonitorChangedEvent_getOriginX(self, request):
        if isinstance(request, IGuestMonitorChangedEvent_getOriginXRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getOriginXResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getOriginY
    def IGuestMonitorChangedEvent_getOriginY(self, request):
        if isinstance(request, IGuestMonitorChangedEvent_getOriginYRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getOriginYResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getWidth
    def IGuestMonitorChangedEvent_getWidth(self, request):
        if isinstance(request, IGuestMonitorChangedEvent_getWidthRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getWidthResultMsg.typecode)
        return response

    # op: IGuestMonitorChangedEvent_getHeight
    def IGuestMonitorChangedEvent_getHeight(self, request):
        if isinstance(request, IGuestMonitorChangedEvent_getHeightRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IGuestMonitorChangedEvent_getHeightResultMsg.typecode)
        return response

    # op: IStorageDeviceChangedEvent_getStorageDevice
    def IStorageDeviceChangedEvent_getStorageDevice(self, request):
        if isinstance(request, IStorageDeviceChangedEvent_getStorageDeviceRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageDeviceChangedEvent_getStorageDeviceResultMsg.typecode)
        return response

    # op: IStorageDeviceChangedEvent_getRemoved
    def IStorageDeviceChangedEvent_getRemoved(self, request):
        if isinstance(request, IStorageDeviceChangedEvent_getRemovedRequestMsg) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(IStorageDeviceChangedEvent_getRemovedResultMsg.typecode)
        return response

IVirtualBoxErrorInfo_getResultCodeRequestMsg = ns0.IVirtualBoxErrorInfo_getResultCode_Dec().pyclass

IVirtualBoxErrorInfo_getResultCodeResultMsg = ns0.IVirtualBoxErrorInfo_getResultCodeResponse_Dec().pyclass

IVirtualBoxErrorInfo_getInterfaceIDRequestMsg = ns0.IVirtualBoxErrorInfo_getInterfaceID_Dec().pyclass

IVirtualBoxErrorInfo_getInterfaceIDResultMsg = ns0.IVirtualBoxErrorInfo_getInterfaceIDResponse_Dec().pyclass

IVirtualBoxErrorInfo_getComponentRequestMsg = ns0.IVirtualBoxErrorInfo_getComponent_Dec().pyclass

IVirtualBoxErrorInfo_getComponentResultMsg = ns0.IVirtualBoxErrorInfo_getComponentResponse_Dec().pyclass

IVirtualBoxErrorInfo_getTextRequestMsg = ns0.IVirtualBoxErrorInfo_getText_Dec().pyclass

IVirtualBoxErrorInfo_getTextResultMsg = ns0.IVirtualBoxErrorInfo_getTextResponse_Dec().pyclass

IVirtualBoxErrorInfo_getNextRequestMsg = ns0.IVirtualBoxErrorInfo_getNext_Dec().pyclass

IVirtualBoxErrorInfo_getNextResultMsg = ns0.IVirtualBoxErrorInfo_getNextResponse_Dec().pyclass

IDHCPServer_getEnabledRequestMsg = ns0.IDHCPServer_getEnabled_Dec().pyclass

IDHCPServer_getEnabledResultMsg = ns0.IDHCPServer_getEnabledResponse_Dec().pyclass

IDHCPServer_setEnabledRequestMsg = ns0.IDHCPServer_setEnabled_Dec().pyclass

IDHCPServer_setEnabledResultMsg = ns0.IDHCPServer_setEnabledResponse_Dec().pyclass

IDHCPServer_getIPAddressRequestMsg = ns0.IDHCPServer_getIPAddress_Dec().pyclass

IDHCPServer_getIPAddressResultMsg = ns0.IDHCPServer_getIPAddressResponse_Dec().pyclass

IDHCPServer_getNetworkMaskRequestMsg = ns0.IDHCPServer_getNetworkMask_Dec().pyclass

IDHCPServer_getNetworkMaskResultMsg = ns0.IDHCPServer_getNetworkMaskResponse_Dec().pyclass

IDHCPServer_getNetworkNameRequestMsg = ns0.IDHCPServer_getNetworkName_Dec().pyclass

IDHCPServer_getNetworkNameResultMsg = ns0.IDHCPServer_getNetworkNameResponse_Dec().pyclass

IDHCPServer_getLowerIPRequestMsg = ns0.IDHCPServer_getLowerIP_Dec().pyclass

IDHCPServer_getLowerIPResultMsg = ns0.IDHCPServer_getLowerIPResponse_Dec().pyclass

IDHCPServer_getUpperIPRequestMsg = ns0.IDHCPServer_getUpperIP_Dec().pyclass

IDHCPServer_getUpperIPResultMsg = ns0.IDHCPServer_getUpperIPResponse_Dec().pyclass

IDHCPServer_setConfigurationRequestMsg = ns0.IDHCPServer_setConfiguration_Dec().pyclass

IDHCPServer_setConfigurationResultMsg = ns0.IDHCPServer_setConfigurationResponse_Dec().pyclass

IDHCPServer_startRequestMsg = ns0.IDHCPServer_start_Dec().pyclass

IDHCPServer_startResultMsg = ns0.IDHCPServer_startResponse_Dec().pyclass

IDHCPServer_stopRequestMsg = ns0.IDHCPServer_stop_Dec().pyclass

IDHCPServer_stopResultMsg = ns0.IDHCPServer_stopResponse_Dec().pyclass

IVirtualBox_getVersionRequestMsg = ns0.IVirtualBox_getVersion_Dec().pyclass

IVirtualBox_getVersionResultMsg = ns0.IVirtualBox_getVersionResponse_Dec().pyclass

IVirtualBox_getRevisionRequestMsg = ns0.IVirtualBox_getRevision_Dec().pyclass

IVirtualBox_getRevisionResultMsg = ns0.IVirtualBox_getRevisionResponse_Dec().pyclass

IVirtualBox_getPackageTypeRequestMsg = ns0.IVirtualBox_getPackageType_Dec().pyclass

IVirtualBox_getPackageTypeResultMsg = ns0.IVirtualBox_getPackageTypeResponse_Dec().pyclass

IVirtualBox_getAPIVersionRequestMsg = ns0.IVirtualBox_getAPIVersion_Dec().pyclass

IVirtualBox_getAPIVersionResultMsg = ns0.IVirtualBox_getAPIVersionResponse_Dec().pyclass

IVirtualBox_getHomeFolderRequestMsg = ns0.IVirtualBox_getHomeFolder_Dec().pyclass

IVirtualBox_getHomeFolderResultMsg = ns0.IVirtualBox_getHomeFolderResponse_Dec().pyclass

IVirtualBox_getSettingsFilePathRequestMsg = ns0.IVirtualBox_getSettingsFilePath_Dec().pyclass

IVirtualBox_getSettingsFilePathResultMsg = ns0.IVirtualBox_getSettingsFilePathResponse_Dec().pyclass

IVirtualBox_getHostRequestMsg = ns0.IVirtualBox_getHost_Dec().pyclass

IVirtualBox_getHostResultMsg = ns0.IVirtualBox_getHostResponse_Dec().pyclass

IVirtualBox_getSystemPropertiesRequestMsg = ns0.IVirtualBox_getSystemProperties_Dec().pyclass

IVirtualBox_getSystemPropertiesResultMsg = ns0.IVirtualBox_getSystemPropertiesResponse_Dec().pyclass

IVirtualBox_getMachinesRequestMsg = ns0.IVirtualBox_getMachines_Dec().pyclass

IVirtualBox_getMachinesResultMsg = ns0.IVirtualBox_getMachinesResponse_Dec().pyclass

IVirtualBox_getHardDisksRequestMsg = ns0.IVirtualBox_getHardDisks_Dec().pyclass

IVirtualBox_getHardDisksResultMsg = ns0.IVirtualBox_getHardDisksResponse_Dec().pyclass

IVirtualBox_getDVDImagesRequestMsg = ns0.IVirtualBox_getDVDImages_Dec().pyclass

IVirtualBox_getDVDImagesResultMsg = ns0.IVirtualBox_getDVDImagesResponse_Dec().pyclass

IVirtualBox_getFloppyImagesRequestMsg = ns0.IVirtualBox_getFloppyImages_Dec().pyclass

IVirtualBox_getFloppyImagesResultMsg = ns0.IVirtualBox_getFloppyImagesResponse_Dec().pyclass

IVirtualBox_getProgressOperationsRequestMsg = ns0.IVirtualBox_getProgressOperations_Dec().pyclass

IVirtualBox_getProgressOperationsResultMsg = ns0.IVirtualBox_getProgressOperationsResponse_Dec().pyclass

IVirtualBox_getGuestOSTypesRequestMsg = ns0.IVirtualBox_getGuestOSTypes_Dec().pyclass

IVirtualBox_getGuestOSTypesResultMsg = ns0.IVirtualBox_getGuestOSTypesResponse_Dec().pyclass

IVirtualBox_getSharedFoldersRequestMsg = ns0.IVirtualBox_getSharedFolders_Dec().pyclass

IVirtualBox_getSharedFoldersResultMsg = ns0.IVirtualBox_getSharedFoldersResponse_Dec().pyclass

IVirtualBox_getPerformanceCollectorRequestMsg = ns0.IVirtualBox_getPerformanceCollector_Dec().pyclass

IVirtualBox_getPerformanceCollectorResultMsg = ns0.IVirtualBox_getPerformanceCollectorResponse_Dec().pyclass

IVirtualBox_getDHCPServersRequestMsg = ns0.IVirtualBox_getDHCPServers_Dec().pyclass

IVirtualBox_getDHCPServersResultMsg = ns0.IVirtualBox_getDHCPServersResponse_Dec().pyclass

IVirtualBox_getEventSourceRequestMsg = ns0.IVirtualBox_getEventSource_Dec().pyclass

IVirtualBox_getEventSourceResultMsg = ns0.IVirtualBox_getEventSourceResponse_Dec().pyclass

IVirtualBox_getInternalNetworksRequestMsg = ns0.IVirtualBox_getInternalNetworks_Dec().pyclass

IVirtualBox_getInternalNetworksResultMsg = ns0.IVirtualBox_getInternalNetworksResponse_Dec().pyclass

IVirtualBox_getGenericNetworkDriversRequestMsg = ns0.IVirtualBox_getGenericNetworkDrivers_Dec().pyclass

IVirtualBox_getGenericNetworkDriversResultMsg = ns0.IVirtualBox_getGenericNetworkDriversResponse_Dec().pyclass

IVirtualBox_composeMachineFilenameRequestMsg = ns0.IVirtualBox_composeMachineFilename_Dec().pyclass

IVirtualBox_composeMachineFilenameResultMsg = ns0.IVirtualBox_composeMachineFilenameResponse_Dec().pyclass

IVirtualBox_createMachineRequestMsg = ns0.IVirtualBox_createMachine_Dec().pyclass

IVirtualBox_createMachineResultMsg = ns0.IVirtualBox_createMachineResponse_Dec().pyclass

IVirtualBox_openMachineRequestMsg = ns0.IVirtualBox_openMachine_Dec().pyclass

IVirtualBox_openMachineResultMsg = ns0.IVirtualBox_openMachineResponse_Dec().pyclass

IVirtualBox_registerMachineRequestMsg = ns0.IVirtualBox_registerMachine_Dec().pyclass

IVirtualBox_registerMachineResultMsg = ns0.IVirtualBox_registerMachineResponse_Dec().pyclass

IVirtualBox_findMachineRequestMsg = ns0.IVirtualBox_findMachine_Dec().pyclass

IVirtualBox_findMachineResultMsg = ns0.IVirtualBox_findMachineResponse_Dec().pyclass

IVirtualBox_createApplianceRequestMsg = ns0.IVirtualBox_createAppliance_Dec().pyclass

IVirtualBox_createApplianceResultMsg = ns0.IVirtualBox_createApplianceResponse_Dec().pyclass

IVirtualBox_createHardDiskRequestMsg = ns0.IVirtualBox_createHardDisk_Dec().pyclass

IVirtualBox_createHardDiskResultMsg = ns0.IVirtualBox_createHardDiskResponse_Dec().pyclass

IVirtualBox_openMediumRequestMsg = ns0.IVirtualBox_openMedium_Dec().pyclass

IVirtualBox_openMediumResultMsg = ns0.IVirtualBox_openMediumResponse_Dec().pyclass

IVirtualBox_findMediumRequestMsg = ns0.IVirtualBox_findMedium_Dec().pyclass

IVirtualBox_findMediumResultMsg = ns0.IVirtualBox_findMediumResponse_Dec().pyclass

IVirtualBox_getGuestOSTypeRequestMsg = ns0.IVirtualBox_getGuestOSType_Dec().pyclass

IVirtualBox_getGuestOSTypeResultMsg = ns0.IVirtualBox_getGuestOSTypeResponse_Dec().pyclass

IVirtualBox_createSharedFolderRequestMsg = ns0.IVirtualBox_createSharedFolder_Dec().pyclass

IVirtualBox_createSharedFolderResultMsg = ns0.IVirtualBox_createSharedFolderResponse_Dec().pyclass

IVirtualBox_removeSharedFolderRequestMsg = ns0.IVirtualBox_removeSharedFolder_Dec().pyclass

IVirtualBox_removeSharedFolderResultMsg = ns0.IVirtualBox_removeSharedFolderResponse_Dec().pyclass

IVirtualBox_getExtraDataKeysRequestMsg = ns0.IVirtualBox_getExtraDataKeys_Dec().pyclass

IVirtualBox_getExtraDataKeysResultMsg = ns0.IVirtualBox_getExtraDataKeysResponse_Dec().pyclass

IVirtualBox_getExtraDataRequestMsg = ns0.IVirtualBox_getExtraData_Dec().pyclass

IVirtualBox_getExtraDataResultMsg = ns0.IVirtualBox_getExtraDataResponse_Dec().pyclass

IVirtualBox_setExtraDataRequestMsg = ns0.IVirtualBox_setExtraData_Dec().pyclass

IVirtualBox_setExtraDataResultMsg = ns0.IVirtualBox_setExtraDataResponse_Dec().pyclass

IVirtualBox_createDHCPServerRequestMsg = ns0.IVirtualBox_createDHCPServer_Dec().pyclass

IVirtualBox_createDHCPServerResultMsg = ns0.IVirtualBox_createDHCPServerResponse_Dec().pyclass

IVirtualBox_findDHCPServerByNetworkNameRequestMsg = ns0.IVirtualBox_findDHCPServerByNetworkName_Dec().pyclass

IVirtualBox_findDHCPServerByNetworkNameResultMsg = ns0.IVirtualBox_findDHCPServerByNetworkNameResponse_Dec().pyclass

IVirtualBox_removeDHCPServerRequestMsg = ns0.IVirtualBox_removeDHCPServer_Dec().pyclass

IVirtualBox_removeDHCPServerResultMsg = ns0.IVirtualBox_removeDHCPServerResponse_Dec().pyclass

IVirtualBox_checkFirmwarePresentRequestMsg = ns0.IVirtualBox_checkFirmwarePresent_Dec().pyclass

IVirtualBox_checkFirmwarePresentResultMsg = ns0.IVirtualBox_checkFirmwarePresentResponse_Dec().pyclass

IVFSExplorer_getPathRequestMsg = ns0.IVFSExplorer_getPath_Dec().pyclass

IVFSExplorer_getPathResultMsg = ns0.IVFSExplorer_getPathResponse_Dec().pyclass

IVFSExplorer_getTypeRequestMsg = ns0.IVFSExplorer_getType_Dec().pyclass

IVFSExplorer_getTypeResultMsg = ns0.IVFSExplorer_getTypeResponse_Dec().pyclass

IVFSExplorer_updateRequestMsg = ns0.IVFSExplorer_update_Dec().pyclass

IVFSExplorer_updateResultMsg = ns0.IVFSExplorer_updateResponse_Dec().pyclass

IVFSExplorer_cdRequestMsg = ns0.IVFSExplorer_cd_Dec().pyclass

IVFSExplorer_cdResultMsg = ns0.IVFSExplorer_cdResponse_Dec().pyclass

IVFSExplorer_cdUpRequestMsg = ns0.IVFSExplorer_cdUp_Dec().pyclass

IVFSExplorer_cdUpResultMsg = ns0.IVFSExplorer_cdUpResponse_Dec().pyclass

IVFSExplorer_entryListRequestMsg = ns0.IVFSExplorer_entryList_Dec().pyclass

IVFSExplorer_entryListResultMsg = ns0.IVFSExplorer_entryListResponse_Dec().pyclass

IVFSExplorer_existsRequestMsg = ns0.IVFSExplorer_exists_Dec().pyclass

IVFSExplorer_existsResultMsg = ns0.IVFSExplorer_existsResponse_Dec().pyclass

IVFSExplorer_removeRequestMsg = ns0.IVFSExplorer_remove_Dec().pyclass

IVFSExplorer_removeResultMsg = ns0.IVFSExplorer_removeResponse_Dec().pyclass

IAppliance_getPathRequestMsg = ns0.IAppliance_getPath_Dec().pyclass

IAppliance_getPathResultMsg = ns0.IAppliance_getPathResponse_Dec().pyclass

IAppliance_getDisksRequestMsg = ns0.IAppliance_getDisks_Dec().pyclass

IAppliance_getDisksResultMsg = ns0.IAppliance_getDisksResponse_Dec().pyclass

IAppliance_getVirtualSystemDescriptionsRequestMsg = ns0.IAppliance_getVirtualSystemDescriptions_Dec().pyclass

IAppliance_getVirtualSystemDescriptionsResultMsg = ns0.IAppliance_getVirtualSystemDescriptionsResponse_Dec().pyclass

IAppliance_getMachinesRequestMsg = ns0.IAppliance_getMachines_Dec().pyclass

IAppliance_getMachinesResultMsg = ns0.IAppliance_getMachinesResponse_Dec().pyclass

IAppliance_readRequestMsg = ns0.IAppliance_read_Dec().pyclass

IAppliance_readResultMsg = ns0.IAppliance_readResponse_Dec().pyclass

IAppliance_interpretRequestMsg = ns0.IAppliance_interpret_Dec().pyclass

IAppliance_interpretResultMsg = ns0.IAppliance_interpretResponse_Dec().pyclass

IAppliance_importMachinesRequestMsg = ns0.IAppliance_importMachines_Dec().pyclass

IAppliance_importMachinesResultMsg = ns0.IAppliance_importMachinesResponse_Dec().pyclass

IAppliance_createVFSExplorerRequestMsg = ns0.IAppliance_createVFSExplorer_Dec().pyclass

IAppliance_createVFSExplorerResultMsg = ns0.IAppliance_createVFSExplorerResponse_Dec().pyclass

IAppliance_writeRequestMsg = ns0.IAppliance_write_Dec().pyclass

IAppliance_writeResultMsg = ns0.IAppliance_writeResponse_Dec().pyclass

IAppliance_getWarningsRequestMsg = ns0.IAppliance_getWarnings_Dec().pyclass

IAppliance_getWarningsResultMsg = ns0.IAppliance_getWarningsResponse_Dec().pyclass

IVirtualSystemDescription_getCountRequestMsg = ns0.IVirtualSystemDescription_getCount_Dec().pyclass

IVirtualSystemDescription_getCountResultMsg = ns0.IVirtualSystemDescription_getCountResponse_Dec().pyclass

IVirtualSystemDescription_getDescriptionRequestMsg = ns0.IVirtualSystemDescription_getDescription_Dec().pyclass

IVirtualSystemDescription_getDescriptionResultMsg = ns0.IVirtualSystemDescription_getDescriptionResponse_Dec().pyclass

IVirtualSystemDescription_getDescriptionByTypeRequestMsg = ns0.IVirtualSystemDescription_getDescriptionByType_Dec().pyclass

IVirtualSystemDescription_getDescriptionByTypeResultMsg = ns0.IVirtualSystemDescription_getDescriptionByTypeResponse_Dec().pyclass

IVirtualSystemDescription_getValuesByTypeRequestMsg = ns0.IVirtualSystemDescription_getValuesByType_Dec().pyclass

IVirtualSystemDescription_getValuesByTypeResultMsg = ns0.IVirtualSystemDescription_getValuesByTypeResponse_Dec().pyclass

IVirtualSystemDescription_setFinalValuesRequestMsg = ns0.IVirtualSystemDescription_setFinalValues_Dec().pyclass

IVirtualSystemDescription_setFinalValuesResultMsg = ns0.IVirtualSystemDescription_setFinalValuesResponse_Dec().pyclass

IVirtualSystemDescription_addDescriptionRequestMsg = ns0.IVirtualSystemDescription_addDescription_Dec().pyclass

IVirtualSystemDescription_addDescriptionResultMsg = ns0.IVirtualSystemDescription_addDescriptionResponse_Dec().pyclass

IBIOSSettings_getLogoFadeInRequestMsg = ns0.IBIOSSettings_getLogoFadeIn_Dec().pyclass

IBIOSSettings_getLogoFadeInResultMsg = ns0.IBIOSSettings_getLogoFadeInResponse_Dec().pyclass

IBIOSSettings_setLogoFadeInRequestMsg = ns0.IBIOSSettings_setLogoFadeIn_Dec().pyclass

IBIOSSettings_setLogoFadeInResultMsg = ns0.IBIOSSettings_setLogoFadeInResponse_Dec().pyclass

IBIOSSettings_getLogoFadeOutRequestMsg = ns0.IBIOSSettings_getLogoFadeOut_Dec().pyclass

IBIOSSettings_getLogoFadeOutResultMsg = ns0.IBIOSSettings_getLogoFadeOutResponse_Dec().pyclass

IBIOSSettings_setLogoFadeOutRequestMsg = ns0.IBIOSSettings_setLogoFadeOut_Dec().pyclass

IBIOSSettings_setLogoFadeOutResultMsg = ns0.IBIOSSettings_setLogoFadeOutResponse_Dec().pyclass

IBIOSSettings_getLogoDisplayTimeRequestMsg = ns0.IBIOSSettings_getLogoDisplayTime_Dec().pyclass

IBIOSSettings_getLogoDisplayTimeResultMsg = ns0.IBIOSSettings_getLogoDisplayTimeResponse_Dec().pyclass

IBIOSSettings_setLogoDisplayTimeRequestMsg = ns0.IBIOSSettings_setLogoDisplayTime_Dec().pyclass

IBIOSSettings_setLogoDisplayTimeResultMsg = ns0.IBIOSSettings_setLogoDisplayTimeResponse_Dec().pyclass

IBIOSSettings_getLogoImagePathRequestMsg = ns0.IBIOSSettings_getLogoImagePath_Dec().pyclass

IBIOSSettings_getLogoImagePathResultMsg = ns0.IBIOSSettings_getLogoImagePathResponse_Dec().pyclass

IBIOSSettings_setLogoImagePathRequestMsg = ns0.IBIOSSettings_setLogoImagePath_Dec().pyclass

IBIOSSettings_setLogoImagePathResultMsg = ns0.IBIOSSettings_setLogoImagePathResponse_Dec().pyclass

IBIOSSettings_getBootMenuModeRequestMsg = ns0.IBIOSSettings_getBootMenuMode_Dec().pyclass

IBIOSSettings_getBootMenuModeResultMsg = ns0.IBIOSSettings_getBootMenuModeResponse_Dec().pyclass

IBIOSSettings_setBootMenuModeRequestMsg = ns0.IBIOSSettings_setBootMenuMode_Dec().pyclass

IBIOSSettings_setBootMenuModeResultMsg = ns0.IBIOSSettings_setBootMenuModeResponse_Dec().pyclass

IBIOSSettings_getACPIEnabledRequestMsg = ns0.IBIOSSettings_getACPIEnabled_Dec().pyclass

IBIOSSettings_getACPIEnabledResultMsg = ns0.IBIOSSettings_getACPIEnabledResponse_Dec().pyclass

IBIOSSettings_setACPIEnabledRequestMsg = ns0.IBIOSSettings_setACPIEnabled_Dec().pyclass

IBIOSSettings_setACPIEnabledResultMsg = ns0.IBIOSSettings_setACPIEnabledResponse_Dec().pyclass

IBIOSSettings_getIOAPICEnabledRequestMsg = ns0.IBIOSSettings_getIOAPICEnabled_Dec().pyclass

IBIOSSettings_getIOAPICEnabledResultMsg = ns0.IBIOSSettings_getIOAPICEnabledResponse_Dec().pyclass

IBIOSSettings_setIOAPICEnabledRequestMsg = ns0.IBIOSSettings_setIOAPICEnabled_Dec().pyclass

IBIOSSettings_setIOAPICEnabledResultMsg = ns0.IBIOSSettings_setIOAPICEnabledResponse_Dec().pyclass

IBIOSSettings_getTimeOffsetRequestMsg = ns0.IBIOSSettings_getTimeOffset_Dec().pyclass

IBIOSSettings_getTimeOffsetResultMsg = ns0.IBIOSSettings_getTimeOffsetResponse_Dec().pyclass

IBIOSSettings_setTimeOffsetRequestMsg = ns0.IBIOSSettings_setTimeOffset_Dec().pyclass

IBIOSSettings_setTimeOffsetResultMsg = ns0.IBIOSSettings_setTimeOffsetResponse_Dec().pyclass

IBIOSSettings_getPXEDebugEnabledRequestMsg = ns0.IBIOSSettings_getPXEDebugEnabled_Dec().pyclass

IBIOSSettings_getPXEDebugEnabledResultMsg = ns0.IBIOSSettings_getPXEDebugEnabledResponse_Dec().pyclass

IBIOSSettings_setPXEDebugEnabledRequestMsg = ns0.IBIOSSettings_setPXEDebugEnabled_Dec().pyclass

IBIOSSettings_setPXEDebugEnabledResultMsg = ns0.IBIOSSettings_setPXEDebugEnabledResponse_Dec().pyclass

IMachine_getParentRequestMsg = ns0.IMachine_getParent_Dec().pyclass

IMachine_getParentResultMsg = ns0.IMachine_getParentResponse_Dec().pyclass

IMachine_getAccessibleRequestMsg = ns0.IMachine_getAccessible_Dec().pyclass

IMachine_getAccessibleResultMsg = ns0.IMachine_getAccessibleResponse_Dec().pyclass

IMachine_getAccessErrorRequestMsg = ns0.IMachine_getAccessError_Dec().pyclass

IMachine_getAccessErrorResultMsg = ns0.IMachine_getAccessErrorResponse_Dec().pyclass

IMachine_getNameRequestMsg = ns0.IMachine_getName_Dec().pyclass

IMachine_getNameResultMsg = ns0.IMachine_getNameResponse_Dec().pyclass

IMachine_setNameRequestMsg = ns0.IMachine_setName_Dec().pyclass

IMachine_setNameResultMsg = ns0.IMachine_setNameResponse_Dec().pyclass

IMachine_getDescriptionRequestMsg = ns0.IMachine_getDescription_Dec().pyclass

IMachine_getDescriptionResultMsg = ns0.IMachine_getDescriptionResponse_Dec().pyclass

IMachine_setDescriptionRequestMsg = ns0.IMachine_setDescription_Dec().pyclass

IMachine_setDescriptionResultMsg = ns0.IMachine_setDescriptionResponse_Dec().pyclass

IMachine_getIdRequestMsg = ns0.IMachine_getId_Dec().pyclass

IMachine_getIdResultMsg = ns0.IMachine_getIdResponse_Dec().pyclass

IMachine_getOSTypeIdRequestMsg = ns0.IMachine_getOSTypeId_Dec().pyclass

IMachine_getOSTypeIdResultMsg = ns0.IMachine_getOSTypeIdResponse_Dec().pyclass

IMachine_setOSTypeIdRequestMsg = ns0.IMachine_setOSTypeId_Dec().pyclass

IMachine_setOSTypeIdResultMsg = ns0.IMachine_setOSTypeIdResponse_Dec().pyclass

IMachine_getHardwareVersionRequestMsg = ns0.IMachine_getHardwareVersion_Dec().pyclass

IMachine_getHardwareVersionResultMsg = ns0.IMachine_getHardwareVersionResponse_Dec().pyclass

IMachine_setHardwareVersionRequestMsg = ns0.IMachine_setHardwareVersion_Dec().pyclass

IMachine_setHardwareVersionResultMsg = ns0.IMachine_setHardwareVersionResponse_Dec().pyclass

IMachine_getHardwareUUIDRequestMsg = ns0.IMachine_getHardwareUUID_Dec().pyclass

IMachine_getHardwareUUIDResultMsg = ns0.IMachine_getHardwareUUIDResponse_Dec().pyclass

IMachine_setHardwareUUIDRequestMsg = ns0.IMachine_setHardwareUUID_Dec().pyclass

IMachine_setHardwareUUIDResultMsg = ns0.IMachine_setHardwareUUIDResponse_Dec().pyclass

IMachine_getCPUCountRequestMsg = ns0.IMachine_getCPUCount_Dec().pyclass

IMachine_getCPUCountResultMsg = ns0.IMachine_getCPUCountResponse_Dec().pyclass

IMachine_setCPUCountRequestMsg = ns0.IMachine_setCPUCount_Dec().pyclass

IMachine_setCPUCountResultMsg = ns0.IMachine_setCPUCountResponse_Dec().pyclass

IMachine_getCPUHotPlugEnabledRequestMsg = ns0.IMachine_getCPUHotPlugEnabled_Dec().pyclass

IMachine_getCPUHotPlugEnabledResultMsg = ns0.IMachine_getCPUHotPlugEnabledResponse_Dec().pyclass

IMachine_setCPUHotPlugEnabledRequestMsg = ns0.IMachine_setCPUHotPlugEnabled_Dec().pyclass

IMachine_setCPUHotPlugEnabledResultMsg = ns0.IMachine_setCPUHotPlugEnabledResponse_Dec().pyclass

IMachine_getCPUExecutionCapRequestMsg = ns0.IMachine_getCPUExecutionCap_Dec().pyclass

IMachine_getCPUExecutionCapResultMsg = ns0.IMachine_getCPUExecutionCapResponse_Dec().pyclass

IMachine_setCPUExecutionCapRequestMsg = ns0.IMachine_setCPUExecutionCap_Dec().pyclass

IMachine_setCPUExecutionCapResultMsg = ns0.IMachine_setCPUExecutionCapResponse_Dec().pyclass

IMachine_getMemorySizeRequestMsg = ns0.IMachine_getMemorySize_Dec().pyclass

IMachine_getMemorySizeResultMsg = ns0.IMachine_getMemorySizeResponse_Dec().pyclass

IMachine_setMemorySizeRequestMsg = ns0.IMachine_setMemorySize_Dec().pyclass

IMachine_setMemorySizeResultMsg = ns0.IMachine_setMemorySizeResponse_Dec().pyclass

IMachine_getMemoryBalloonSizeRequestMsg = ns0.IMachine_getMemoryBalloonSize_Dec().pyclass

IMachine_getMemoryBalloonSizeResultMsg = ns0.IMachine_getMemoryBalloonSizeResponse_Dec().pyclass

IMachine_setMemoryBalloonSizeRequestMsg = ns0.IMachine_setMemoryBalloonSize_Dec().pyclass

IMachine_setMemoryBalloonSizeResultMsg = ns0.IMachine_setMemoryBalloonSizeResponse_Dec().pyclass

IMachine_getPageFusionEnabledRequestMsg = ns0.IMachine_getPageFusionEnabled_Dec().pyclass

IMachine_getPageFusionEnabledResultMsg = ns0.IMachine_getPageFusionEnabledResponse_Dec().pyclass

IMachine_setPageFusionEnabledRequestMsg = ns0.IMachine_setPageFusionEnabled_Dec().pyclass

IMachine_setPageFusionEnabledResultMsg = ns0.IMachine_setPageFusionEnabledResponse_Dec().pyclass

IMachine_getVRAMSizeRequestMsg = ns0.IMachine_getVRAMSize_Dec().pyclass

IMachine_getVRAMSizeResultMsg = ns0.IMachine_getVRAMSizeResponse_Dec().pyclass

IMachine_setVRAMSizeRequestMsg = ns0.IMachine_setVRAMSize_Dec().pyclass

IMachine_setVRAMSizeResultMsg = ns0.IMachine_setVRAMSizeResponse_Dec().pyclass

IMachine_getAccelerate3DEnabledRequestMsg = ns0.IMachine_getAccelerate3DEnabled_Dec().pyclass

IMachine_getAccelerate3DEnabledResultMsg = ns0.IMachine_getAccelerate3DEnabledResponse_Dec().pyclass

IMachine_setAccelerate3DEnabledRequestMsg = ns0.IMachine_setAccelerate3DEnabled_Dec().pyclass

IMachine_setAccelerate3DEnabledResultMsg = ns0.IMachine_setAccelerate3DEnabledResponse_Dec().pyclass

IMachine_getAccelerate2DVideoEnabledRequestMsg = ns0.IMachine_getAccelerate2DVideoEnabled_Dec().pyclass

IMachine_getAccelerate2DVideoEnabledResultMsg = ns0.IMachine_getAccelerate2DVideoEnabledResponse_Dec().pyclass

IMachine_setAccelerate2DVideoEnabledRequestMsg = ns0.IMachine_setAccelerate2DVideoEnabled_Dec().pyclass

IMachine_setAccelerate2DVideoEnabledResultMsg = ns0.IMachine_setAccelerate2DVideoEnabledResponse_Dec().pyclass

IMachine_getMonitorCountRequestMsg = ns0.IMachine_getMonitorCount_Dec().pyclass

IMachine_getMonitorCountResultMsg = ns0.IMachine_getMonitorCountResponse_Dec().pyclass

IMachine_setMonitorCountRequestMsg = ns0.IMachine_setMonitorCount_Dec().pyclass

IMachine_setMonitorCountResultMsg = ns0.IMachine_setMonitorCountResponse_Dec().pyclass

IMachine_getBIOSSettingsRequestMsg = ns0.IMachine_getBIOSSettings_Dec().pyclass

IMachine_getBIOSSettingsResultMsg = ns0.IMachine_getBIOSSettingsResponse_Dec().pyclass

IMachine_getFirmwareTypeRequestMsg = ns0.IMachine_getFirmwareType_Dec().pyclass

IMachine_getFirmwareTypeResultMsg = ns0.IMachine_getFirmwareTypeResponse_Dec().pyclass

IMachine_setFirmwareTypeRequestMsg = ns0.IMachine_setFirmwareType_Dec().pyclass

IMachine_setFirmwareTypeResultMsg = ns0.IMachine_setFirmwareTypeResponse_Dec().pyclass

IMachine_getPointingHidTypeRequestMsg = ns0.IMachine_getPointingHidType_Dec().pyclass

IMachine_getPointingHidTypeResultMsg = ns0.IMachine_getPointingHidTypeResponse_Dec().pyclass

IMachine_setPointingHidTypeRequestMsg = ns0.IMachine_setPointingHidType_Dec().pyclass

IMachine_setPointingHidTypeResultMsg = ns0.IMachine_setPointingHidTypeResponse_Dec().pyclass

IMachine_getKeyboardHidTypeRequestMsg = ns0.IMachine_getKeyboardHidType_Dec().pyclass

IMachine_getKeyboardHidTypeResultMsg = ns0.IMachine_getKeyboardHidTypeResponse_Dec().pyclass

IMachine_setKeyboardHidTypeRequestMsg = ns0.IMachine_setKeyboardHidType_Dec().pyclass

IMachine_setKeyboardHidTypeResultMsg = ns0.IMachine_setKeyboardHidTypeResponse_Dec().pyclass

IMachine_getHpetEnabledRequestMsg = ns0.IMachine_getHpetEnabled_Dec().pyclass

IMachine_getHpetEnabledResultMsg = ns0.IMachine_getHpetEnabledResponse_Dec().pyclass

IMachine_setHpetEnabledRequestMsg = ns0.IMachine_setHpetEnabled_Dec().pyclass

IMachine_setHpetEnabledResultMsg = ns0.IMachine_setHpetEnabledResponse_Dec().pyclass

IMachine_getChipsetTypeRequestMsg = ns0.IMachine_getChipsetType_Dec().pyclass

IMachine_getChipsetTypeResultMsg = ns0.IMachine_getChipsetTypeResponse_Dec().pyclass

IMachine_setChipsetTypeRequestMsg = ns0.IMachine_setChipsetType_Dec().pyclass

IMachine_setChipsetTypeResultMsg = ns0.IMachine_setChipsetTypeResponse_Dec().pyclass

IMachine_getSnapshotFolderRequestMsg = ns0.IMachine_getSnapshotFolder_Dec().pyclass

IMachine_getSnapshotFolderResultMsg = ns0.IMachine_getSnapshotFolderResponse_Dec().pyclass

IMachine_setSnapshotFolderRequestMsg = ns0.IMachine_setSnapshotFolder_Dec().pyclass

IMachine_setSnapshotFolderResultMsg = ns0.IMachine_setSnapshotFolderResponse_Dec().pyclass

IMachine_getVRDEServerRequestMsg = ns0.IMachine_getVRDEServer_Dec().pyclass

IMachine_getVRDEServerResultMsg = ns0.IMachine_getVRDEServerResponse_Dec().pyclass

IMachine_getEmulatedUSBWebcameraEnabledRequestMsg = ns0.IMachine_getEmulatedUSBWebcameraEnabled_Dec().pyclass

IMachine_getEmulatedUSBWebcameraEnabledResultMsg = ns0.IMachine_getEmulatedUSBWebcameraEnabledResponse_Dec().pyclass

IMachine_setEmulatedUSBWebcameraEnabledRequestMsg = ns0.IMachine_setEmulatedUSBWebcameraEnabled_Dec().pyclass

IMachine_setEmulatedUSBWebcameraEnabledResultMsg = ns0.IMachine_setEmulatedUSBWebcameraEnabledResponse_Dec().pyclass

IMachine_getEmulatedUSBCardReaderEnabledRequestMsg = ns0.IMachine_getEmulatedUSBCardReaderEnabled_Dec().pyclass

IMachine_getEmulatedUSBCardReaderEnabledResultMsg = ns0.IMachine_getEmulatedUSBCardReaderEnabledResponse_Dec().pyclass

IMachine_setEmulatedUSBCardReaderEnabledRequestMsg = ns0.IMachine_setEmulatedUSBCardReaderEnabled_Dec().pyclass

IMachine_setEmulatedUSBCardReaderEnabledResultMsg = ns0.IMachine_setEmulatedUSBCardReaderEnabledResponse_Dec().pyclass

IMachine_getMediumAttachmentsRequestMsg = ns0.IMachine_getMediumAttachments_Dec().pyclass

IMachine_getMediumAttachmentsResultMsg = ns0.IMachine_getMediumAttachmentsResponse_Dec().pyclass

IMachine_getUSBControllerRequestMsg = ns0.IMachine_getUSBController_Dec().pyclass

IMachine_getUSBControllerResultMsg = ns0.IMachine_getUSBControllerResponse_Dec().pyclass

IMachine_getAudioAdapterRequestMsg = ns0.IMachine_getAudioAdapter_Dec().pyclass

IMachine_getAudioAdapterResultMsg = ns0.IMachine_getAudioAdapterResponse_Dec().pyclass

IMachine_getStorageControllersRequestMsg = ns0.IMachine_getStorageControllers_Dec().pyclass

IMachine_getStorageControllersResultMsg = ns0.IMachine_getStorageControllersResponse_Dec().pyclass

IMachine_getSettingsFilePathRequestMsg = ns0.IMachine_getSettingsFilePath_Dec().pyclass

IMachine_getSettingsFilePathResultMsg = ns0.IMachine_getSettingsFilePathResponse_Dec().pyclass

IMachine_getSettingsModifiedRequestMsg = ns0.IMachine_getSettingsModified_Dec().pyclass

IMachine_getSettingsModifiedResultMsg = ns0.IMachine_getSettingsModifiedResponse_Dec().pyclass

IMachine_getSessionStateRequestMsg = ns0.IMachine_getSessionState_Dec().pyclass

IMachine_getSessionStateResultMsg = ns0.IMachine_getSessionStateResponse_Dec().pyclass

IMachine_getSessionTypeRequestMsg = ns0.IMachine_getSessionType_Dec().pyclass

IMachine_getSessionTypeResultMsg = ns0.IMachine_getSessionTypeResponse_Dec().pyclass

IMachine_getSessionPidRequestMsg = ns0.IMachine_getSessionPid_Dec().pyclass

IMachine_getSessionPidResultMsg = ns0.IMachine_getSessionPidResponse_Dec().pyclass

IMachine_getStateRequestMsg = ns0.IMachine_getState_Dec().pyclass

IMachine_getStateResultMsg = ns0.IMachine_getStateResponse_Dec().pyclass

IMachine_getLastStateChangeRequestMsg = ns0.IMachine_getLastStateChange_Dec().pyclass

IMachine_getLastStateChangeResultMsg = ns0.IMachine_getLastStateChangeResponse_Dec().pyclass

IMachine_getStateFilePathRequestMsg = ns0.IMachine_getStateFilePath_Dec().pyclass

IMachine_getStateFilePathResultMsg = ns0.IMachine_getStateFilePathResponse_Dec().pyclass

IMachine_getLogFolderRequestMsg = ns0.IMachine_getLogFolder_Dec().pyclass

IMachine_getLogFolderResultMsg = ns0.IMachine_getLogFolderResponse_Dec().pyclass

IMachine_getCurrentSnapshotRequestMsg = ns0.IMachine_getCurrentSnapshot_Dec().pyclass

IMachine_getCurrentSnapshotResultMsg = ns0.IMachine_getCurrentSnapshotResponse_Dec().pyclass

IMachine_getSnapshotCountRequestMsg = ns0.IMachine_getSnapshotCount_Dec().pyclass

IMachine_getSnapshotCountResultMsg = ns0.IMachine_getSnapshotCountResponse_Dec().pyclass

IMachine_getCurrentStateModifiedRequestMsg = ns0.IMachine_getCurrentStateModified_Dec().pyclass

IMachine_getCurrentStateModifiedResultMsg = ns0.IMachine_getCurrentStateModifiedResponse_Dec().pyclass

IMachine_getSharedFoldersRequestMsg = ns0.IMachine_getSharedFolders_Dec().pyclass

IMachine_getSharedFoldersResultMsg = ns0.IMachine_getSharedFoldersResponse_Dec().pyclass

IMachine_getClipboardModeRequestMsg = ns0.IMachine_getClipboardMode_Dec().pyclass

IMachine_getClipboardModeResultMsg = ns0.IMachine_getClipboardModeResponse_Dec().pyclass

IMachine_setClipboardModeRequestMsg = ns0.IMachine_setClipboardMode_Dec().pyclass

IMachine_setClipboardModeResultMsg = ns0.IMachine_setClipboardModeResponse_Dec().pyclass

IMachine_getGuestPropertyNotificationPatternsRequestMsg = ns0.IMachine_getGuestPropertyNotificationPatterns_Dec().pyclass

IMachine_getGuestPropertyNotificationPatternsResultMsg = ns0.IMachine_getGuestPropertyNotificationPatternsResponse_Dec().pyclass

IMachine_setGuestPropertyNotificationPatternsRequestMsg = ns0.IMachine_setGuestPropertyNotificationPatterns_Dec().pyclass

IMachine_setGuestPropertyNotificationPatternsResultMsg = ns0.IMachine_setGuestPropertyNotificationPatternsResponse_Dec().pyclass

IMachine_getTeleporterEnabledRequestMsg = ns0.IMachine_getTeleporterEnabled_Dec().pyclass

IMachine_getTeleporterEnabledResultMsg = ns0.IMachine_getTeleporterEnabledResponse_Dec().pyclass

IMachine_setTeleporterEnabledRequestMsg = ns0.IMachine_setTeleporterEnabled_Dec().pyclass

IMachine_setTeleporterEnabledResultMsg = ns0.IMachine_setTeleporterEnabledResponse_Dec().pyclass

IMachine_getTeleporterPortRequestMsg = ns0.IMachine_getTeleporterPort_Dec().pyclass

IMachine_getTeleporterPortResultMsg = ns0.IMachine_getTeleporterPortResponse_Dec().pyclass

IMachine_setTeleporterPortRequestMsg = ns0.IMachine_setTeleporterPort_Dec().pyclass

IMachine_setTeleporterPortResultMsg = ns0.IMachine_setTeleporterPortResponse_Dec().pyclass

IMachine_getTeleporterAddressRequestMsg = ns0.IMachine_getTeleporterAddress_Dec().pyclass

IMachine_getTeleporterAddressResultMsg = ns0.IMachine_getTeleporterAddressResponse_Dec().pyclass

IMachine_setTeleporterAddressRequestMsg = ns0.IMachine_setTeleporterAddress_Dec().pyclass

IMachine_setTeleporterAddressResultMsg = ns0.IMachine_setTeleporterAddressResponse_Dec().pyclass

IMachine_getTeleporterPasswordRequestMsg = ns0.IMachine_getTeleporterPassword_Dec().pyclass

IMachine_getTeleporterPasswordResultMsg = ns0.IMachine_getTeleporterPasswordResponse_Dec().pyclass

IMachine_setTeleporterPasswordRequestMsg = ns0.IMachine_setTeleporterPassword_Dec().pyclass

IMachine_setTeleporterPasswordResultMsg = ns0.IMachine_setTeleporterPasswordResponse_Dec().pyclass

IMachine_getFaultToleranceStateRequestMsg = ns0.IMachine_getFaultToleranceState_Dec().pyclass

IMachine_getFaultToleranceStateResultMsg = ns0.IMachine_getFaultToleranceStateResponse_Dec().pyclass

IMachine_setFaultToleranceStateRequestMsg = ns0.IMachine_setFaultToleranceState_Dec().pyclass

IMachine_setFaultToleranceStateResultMsg = ns0.IMachine_setFaultToleranceStateResponse_Dec().pyclass

IMachine_getFaultTolerancePortRequestMsg = ns0.IMachine_getFaultTolerancePort_Dec().pyclass

IMachine_getFaultTolerancePortResultMsg = ns0.IMachine_getFaultTolerancePortResponse_Dec().pyclass

IMachine_setFaultTolerancePortRequestMsg = ns0.IMachine_setFaultTolerancePort_Dec().pyclass

IMachine_setFaultTolerancePortResultMsg = ns0.IMachine_setFaultTolerancePortResponse_Dec().pyclass

IMachine_getFaultToleranceAddressRequestMsg = ns0.IMachine_getFaultToleranceAddress_Dec().pyclass

IMachine_getFaultToleranceAddressResultMsg = ns0.IMachine_getFaultToleranceAddressResponse_Dec().pyclass

IMachine_setFaultToleranceAddressRequestMsg = ns0.IMachine_setFaultToleranceAddress_Dec().pyclass

IMachine_setFaultToleranceAddressResultMsg = ns0.IMachine_setFaultToleranceAddressResponse_Dec().pyclass

IMachine_getFaultTolerancePasswordRequestMsg = ns0.IMachine_getFaultTolerancePassword_Dec().pyclass

IMachine_getFaultTolerancePasswordResultMsg = ns0.IMachine_getFaultTolerancePasswordResponse_Dec().pyclass

IMachine_setFaultTolerancePasswordRequestMsg = ns0.IMachine_setFaultTolerancePassword_Dec().pyclass

IMachine_setFaultTolerancePasswordResultMsg = ns0.IMachine_setFaultTolerancePasswordResponse_Dec().pyclass

IMachine_getFaultToleranceSyncIntervalRequestMsg = ns0.IMachine_getFaultToleranceSyncInterval_Dec().pyclass

IMachine_getFaultToleranceSyncIntervalResultMsg = ns0.IMachine_getFaultToleranceSyncIntervalResponse_Dec().pyclass

IMachine_setFaultToleranceSyncIntervalRequestMsg = ns0.IMachine_setFaultToleranceSyncInterval_Dec().pyclass

IMachine_setFaultToleranceSyncIntervalResultMsg = ns0.IMachine_setFaultToleranceSyncIntervalResponse_Dec().pyclass

IMachine_getRTCUseUTCRequestMsg = ns0.IMachine_getRTCUseUTC_Dec().pyclass

IMachine_getRTCUseUTCResultMsg = ns0.IMachine_getRTCUseUTCResponse_Dec().pyclass

IMachine_setRTCUseUTCRequestMsg = ns0.IMachine_setRTCUseUTC_Dec().pyclass

IMachine_setRTCUseUTCResultMsg = ns0.IMachine_setRTCUseUTCResponse_Dec().pyclass

IMachine_getIoCacheEnabledRequestMsg = ns0.IMachine_getIoCacheEnabled_Dec().pyclass

IMachine_getIoCacheEnabledResultMsg = ns0.IMachine_getIoCacheEnabledResponse_Dec().pyclass

IMachine_setIoCacheEnabledRequestMsg = ns0.IMachine_setIoCacheEnabled_Dec().pyclass

IMachine_setIoCacheEnabledResultMsg = ns0.IMachine_setIoCacheEnabledResponse_Dec().pyclass

IMachine_getIoCacheSizeRequestMsg = ns0.IMachine_getIoCacheSize_Dec().pyclass

IMachine_getIoCacheSizeResultMsg = ns0.IMachine_getIoCacheSizeResponse_Dec().pyclass

IMachine_setIoCacheSizeRequestMsg = ns0.IMachine_setIoCacheSize_Dec().pyclass

IMachine_setIoCacheSizeResultMsg = ns0.IMachine_setIoCacheSizeResponse_Dec().pyclass

IMachine_getBandwidthControlRequestMsg = ns0.IMachine_getBandwidthControl_Dec().pyclass

IMachine_getBandwidthControlResultMsg = ns0.IMachine_getBandwidthControlResponse_Dec().pyclass

IMachine_getPciDeviceAssignmentsRequestMsg = ns0.IMachine_getPciDeviceAssignments_Dec().pyclass

IMachine_getPciDeviceAssignmentsResultMsg = ns0.IMachine_getPciDeviceAssignmentsResponse_Dec().pyclass

IMachine_lockMachineRequestMsg = ns0.IMachine_lockMachine_Dec().pyclass

IMachine_lockMachineResultMsg = ns0.IMachine_lockMachineResponse_Dec().pyclass

IMachine_launchVMProcessRequestMsg = ns0.IMachine_launchVMProcess_Dec().pyclass

IMachine_launchVMProcessResultMsg = ns0.IMachine_launchVMProcessResponse_Dec().pyclass

IMachine_setBootOrderRequestMsg = ns0.IMachine_setBootOrder_Dec().pyclass

IMachine_setBootOrderResultMsg = ns0.IMachine_setBootOrderResponse_Dec().pyclass

IMachine_getBootOrderRequestMsg = ns0.IMachine_getBootOrder_Dec().pyclass

IMachine_getBootOrderResultMsg = ns0.IMachine_getBootOrderResponse_Dec().pyclass

IMachine_attachDeviceRequestMsg = ns0.IMachine_attachDevice_Dec().pyclass

IMachine_attachDeviceResultMsg = ns0.IMachine_attachDeviceResponse_Dec().pyclass

IMachine_detachDeviceRequestMsg = ns0.IMachine_detachDevice_Dec().pyclass

IMachine_detachDeviceResultMsg = ns0.IMachine_detachDeviceResponse_Dec().pyclass

IMachine_passthroughDeviceRequestMsg = ns0.IMachine_passthroughDevice_Dec().pyclass

IMachine_passthroughDeviceResultMsg = ns0.IMachine_passthroughDeviceResponse_Dec().pyclass

IMachine_temporaryEjectDeviceRequestMsg = ns0.IMachine_temporaryEjectDevice_Dec().pyclass

IMachine_temporaryEjectDeviceResultMsg = ns0.IMachine_temporaryEjectDeviceResponse_Dec().pyclass

IMachine_nonRotationalDeviceRequestMsg = ns0.IMachine_nonRotationalDevice_Dec().pyclass

IMachine_nonRotationalDeviceResultMsg = ns0.IMachine_nonRotationalDeviceResponse_Dec().pyclass

IMachine_setBandwidthGroupForDeviceRequestMsg = ns0.IMachine_setBandwidthGroupForDevice_Dec().pyclass

IMachine_setBandwidthGroupForDeviceResultMsg = ns0.IMachine_setBandwidthGroupForDeviceResponse_Dec().pyclass

IMachine_mountMediumRequestMsg = ns0.IMachine_mountMedium_Dec().pyclass

IMachine_mountMediumResultMsg = ns0.IMachine_mountMediumResponse_Dec().pyclass

IMachine_getMediumRequestMsg = ns0.IMachine_getMedium_Dec().pyclass

IMachine_getMediumResultMsg = ns0.IMachine_getMediumResponse_Dec().pyclass

IMachine_getMediumAttachmentsOfControllerRequestMsg = ns0.IMachine_getMediumAttachmentsOfController_Dec().pyclass

IMachine_getMediumAttachmentsOfControllerResultMsg = ns0.IMachine_getMediumAttachmentsOfControllerResponse_Dec().pyclass

IMachine_getMediumAttachmentRequestMsg = ns0.IMachine_getMediumAttachment_Dec().pyclass

IMachine_getMediumAttachmentResultMsg = ns0.IMachine_getMediumAttachmentResponse_Dec().pyclass

IMachine_attachHostPciDeviceRequestMsg = ns0.IMachine_attachHostPciDevice_Dec().pyclass

IMachine_attachHostPciDeviceResultMsg = ns0.IMachine_attachHostPciDeviceResponse_Dec().pyclass

IMachine_detachHostPciDeviceRequestMsg = ns0.IMachine_detachHostPciDevice_Dec().pyclass

IMachine_detachHostPciDeviceResultMsg = ns0.IMachine_detachHostPciDeviceResponse_Dec().pyclass

IMachine_getNetworkAdapterRequestMsg = ns0.IMachine_getNetworkAdapter_Dec().pyclass

IMachine_getNetworkAdapterResultMsg = ns0.IMachine_getNetworkAdapterResponse_Dec().pyclass

IMachine_addStorageControllerRequestMsg = ns0.IMachine_addStorageController_Dec().pyclass

IMachine_addStorageControllerResultMsg = ns0.IMachine_addStorageControllerResponse_Dec().pyclass

IMachine_getStorageControllerByNameRequestMsg = ns0.IMachine_getStorageControllerByName_Dec().pyclass

IMachine_getStorageControllerByNameResultMsg = ns0.IMachine_getStorageControllerByNameResponse_Dec().pyclass

IMachine_getStorageControllerByInstanceRequestMsg = ns0.IMachine_getStorageControllerByInstance_Dec().pyclass

IMachine_getStorageControllerByInstanceResultMsg = ns0.IMachine_getStorageControllerByInstanceResponse_Dec().pyclass

IMachine_removeStorageControllerRequestMsg = ns0.IMachine_removeStorageController_Dec().pyclass

IMachine_removeStorageControllerResultMsg = ns0.IMachine_removeStorageControllerResponse_Dec().pyclass

IMachine_setStorageControllerBootableRequestMsg = ns0.IMachine_setStorageControllerBootable_Dec().pyclass

IMachine_setStorageControllerBootableResultMsg = ns0.IMachine_setStorageControllerBootableResponse_Dec().pyclass

IMachine_getSerialPortRequestMsg = ns0.IMachine_getSerialPort_Dec().pyclass

IMachine_getSerialPortResultMsg = ns0.IMachine_getSerialPortResponse_Dec().pyclass

IMachine_getParallelPortRequestMsg = ns0.IMachine_getParallelPort_Dec().pyclass

IMachine_getParallelPortResultMsg = ns0.IMachine_getParallelPortResponse_Dec().pyclass

IMachine_getExtraDataKeysRequestMsg = ns0.IMachine_getExtraDataKeys_Dec().pyclass

IMachine_getExtraDataKeysResultMsg = ns0.IMachine_getExtraDataKeysResponse_Dec().pyclass

IMachine_getExtraDataRequestMsg = ns0.IMachine_getExtraData_Dec().pyclass

IMachine_getExtraDataResultMsg = ns0.IMachine_getExtraDataResponse_Dec().pyclass

IMachine_setExtraDataRequestMsg = ns0.IMachine_setExtraData_Dec().pyclass

IMachine_setExtraDataResultMsg = ns0.IMachine_setExtraDataResponse_Dec().pyclass

IMachine_getCPUPropertyRequestMsg = ns0.IMachine_getCPUProperty_Dec().pyclass

IMachine_getCPUPropertyResultMsg = ns0.IMachine_getCPUPropertyResponse_Dec().pyclass

IMachine_setCPUPropertyRequestMsg = ns0.IMachine_setCPUProperty_Dec().pyclass

IMachine_setCPUPropertyResultMsg = ns0.IMachine_setCPUPropertyResponse_Dec().pyclass

IMachine_getCPUIDLeafRequestMsg = ns0.IMachine_getCPUIDLeaf_Dec().pyclass

IMachine_getCPUIDLeafResultMsg = ns0.IMachine_getCPUIDLeafResponse_Dec().pyclass

IMachine_setCPUIDLeafRequestMsg = ns0.IMachine_setCPUIDLeaf_Dec().pyclass

IMachine_setCPUIDLeafResultMsg = ns0.IMachine_setCPUIDLeafResponse_Dec().pyclass

IMachine_removeCPUIDLeafRequestMsg = ns0.IMachine_removeCPUIDLeaf_Dec().pyclass

IMachine_removeCPUIDLeafResultMsg = ns0.IMachine_removeCPUIDLeafResponse_Dec().pyclass

IMachine_removeAllCPUIDLeavesRequestMsg = ns0.IMachine_removeAllCPUIDLeaves_Dec().pyclass

IMachine_removeAllCPUIDLeavesResultMsg = ns0.IMachine_removeAllCPUIDLeavesResponse_Dec().pyclass

IMachine_getHWVirtExPropertyRequestMsg = ns0.IMachine_getHWVirtExProperty_Dec().pyclass

IMachine_getHWVirtExPropertyResultMsg = ns0.IMachine_getHWVirtExPropertyResponse_Dec().pyclass

IMachine_setHWVirtExPropertyRequestMsg = ns0.IMachine_setHWVirtExProperty_Dec().pyclass

IMachine_setHWVirtExPropertyResultMsg = ns0.IMachine_setHWVirtExPropertyResponse_Dec().pyclass

IMachine_saveSettingsRequestMsg = ns0.IMachine_saveSettings_Dec().pyclass

IMachine_saveSettingsResultMsg = ns0.IMachine_saveSettingsResponse_Dec().pyclass

IMachine_discardSettingsRequestMsg = ns0.IMachine_discardSettings_Dec().pyclass

IMachine_discardSettingsResultMsg = ns0.IMachine_discardSettingsResponse_Dec().pyclass

IMachine_unregisterRequestMsg = ns0.IMachine_unregister_Dec().pyclass

IMachine_unregisterResultMsg = ns0.IMachine_unregisterResponse_Dec().pyclass

IMachine_deleteRequestMsg = ns0.IMachine_delete_Dec().pyclass

IMachine_deleteResultMsg = ns0.IMachine_deleteResponse_Dec().pyclass

IMachine_exportRequestMsg = ns0.IMachine_export_Dec().pyclass

IMachine_exportResultMsg = ns0.IMachine_exportResponse_Dec().pyclass

IMachine_findSnapshotRequestMsg = ns0.IMachine_findSnapshot_Dec().pyclass

IMachine_findSnapshotResultMsg = ns0.IMachine_findSnapshotResponse_Dec().pyclass

IMachine_createSharedFolderRequestMsg = ns0.IMachine_createSharedFolder_Dec().pyclass

IMachine_createSharedFolderResultMsg = ns0.IMachine_createSharedFolderResponse_Dec().pyclass

IMachine_removeSharedFolderRequestMsg = ns0.IMachine_removeSharedFolder_Dec().pyclass

IMachine_removeSharedFolderResultMsg = ns0.IMachine_removeSharedFolderResponse_Dec().pyclass

IMachine_canShowConsoleWindowRequestMsg = ns0.IMachine_canShowConsoleWindow_Dec().pyclass

IMachine_canShowConsoleWindowResultMsg = ns0.IMachine_canShowConsoleWindowResponse_Dec().pyclass

IMachine_showConsoleWindowRequestMsg = ns0.IMachine_showConsoleWindow_Dec().pyclass

IMachine_showConsoleWindowResultMsg = ns0.IMachine_showConsoleWindowResponse_Dec().pyclass

IMachine_getGuestPropertyRequestMsg = ns0.IMachine_getGuestProperty_Dec().pyclass

IMachine_getGuestPropertyResultMsg = ns0.IMachine_getGuestPropertyResponse_Dec().pyclass

IMachine_getGuestPropertyValueRequestMsg = ns0.IMachine_getGuestPropertyValue_Dec().pyclass

IMachine_getGuestPropertyValueResultMsg = ns0.IMachine_getGuestPropertyValueResponse_Dec().pyclass

IMachine_getGuestPropertyTimestampRequestMsg = ns0.IMachine_getGuestPropertyTimestamp_Dec().pyclass

IMachine_getGuestPropertyTimestampResultMsg = ns0.IMachine_getGuestPropertyTimestampResponse_Dec().pyclass

IMachine_setGuestPropertyRequestMsg = ns0.IMachine_setGuestProperty_Dec().pyclass

IMachine_setGuestPropertyResultMsg = ns0.IMachine_setGuestPropertyResponse_Dec().pyclass

IMachine_setGuestPropertyValueRequestMsg = ns0.IMachine_setGuestPropertyValue_Dec().pyclass

IMachine_setGuestPropertyValueResultMsg = ns0.IMachine_setGuestPropertyValueResponse_Dec().pyclass

IMachine_enumerateGuestPropertiesRequestMsg = ns0.IMachine_enumerateGuestProperties_Dec().pyclass

IMachine_enumerateGuestPropertiesResultMsg = ns0.IMachine_enumerateGuestPropertiesResponse_Dec().pyclass

IMachine_querySavedGuestSizeRequestMsg = ns0.IMachine_querySavedGuestSize_Dec().pyclass

IMachine_querySavedGuestSizeResultMsg = ns0.IMachine_querySavedGuestSizeResponse_Dec().pyclass

IMachine_querySavedThumbnailSizeRequestMsg = ns0.IMachine_querySavedThumbnailSize_Dec().pyclass

IMachine_querySavedThumbnailSizeResultMsg = ns0.IMachine_querySavedThumbnailSizeResponse_Dec().pyclass

IMachine_readSavedThumbnailToArrayRequestMsg = ns0.IMachine_readSavedThumbnailToArray_Dec().pyclass

IMachine_readSavedThumbnailToArrayResultMsg = ns0.IMachine_readSavedThumbnailToArrayResponse_Dec().pyclass

IMachine_readSavedThumbnailPNGToArrayRequestMsg = ns0.IMachine_readSavedThumbnailPNGToArray_Dec().pyclass

IMachine_readSavedThumbnailPNGToArrayResultMsg = ns0.IMachine_readSavedThumbnailPNGToArrayResponse_Dec().pyclass

IMachine_querySavedScreenshotPNGSizeRequestMsg = ns0.IMachine_querySavedScreenshotPNGSize_Dec().pyclass

IMachine_querySavedScreenshotPNGSizeResultMsg = ns0.IMachine_querySavedScreenshotPNGSizeResponse_Dec().pyclass

IMachine_readSavedScreenshotPNGToArrayRequestMsg = ns0.IMachine_readSavedScreenshotPNGToArray_Dec().pyclass

IMachine_readSavedScreenshotPNGToArrayResultMsg = ns0.IMachine_readSavedScreenshotPNGToArrayResponse_Dec().pyclass

IMachine_hotPlugCPURequestMsg = ns0.IMachine_hotPlugCPU_Dec().pyclass

IMachine_hotPlugCPUResultMsg = ns0.IMachine_hotPlugCPUResponse_Dec().pyclass

IMachine_hotUnplugCPURequestMsg = ns0.IMachine_hotUnplugCPU_Dec().pyclass

IMachine_hotUnplugCPUResultMsg = ns0.IMachine_hotUnplugCPUResponse_Dec().pyclass

IMachine_getCPUStatusRequestMsg = ns0.IMachine_getCPUStatus_Dec().pyclass

IMachine_getCPUStatusResultMsg = ns0.IMachine_getCPUStatusResponse_Dec().pyclass

IMachine_queryLogFilenameRequestMsg = ns0.IMachine_queryLogFilename_Dec().pyclass

IMachine_queryLogFilenameResultMsg = ns0.IMachine_queryLogFilenameResponse_Dec().pyclass

IMachine_readLogRequestMsg = ns0.IMachine_readLog_Dec().pyclass

IMachine_readLogResultMsg = ns0.IMachine_readLogResponse_Dec().pyclass

IMachine_cloneToRequestMsg = ns0.IMachine_cloneTo_Dec().pyclass

IMachine_cloneToResultMsg = ns0.IMachine_cloneToResponse_Dec().pyclass

IConsole_getMachineRequestMsg = ns0.IConsole_getMachine_Dec().pyclass

IConsole_getMachineResultMsg = ns0.IConsole_getMachineResponse_Dec().pyclass

IConsole_getStateRequestMsg = ns0.IConsole_getState_Dec().pyclass

IConsole_getStateResultMsg = ns0.IConsole_getStateResponse_Dec().pyclass

IConsole_getGuestRequestMsg = ns0.IConsole_getGuest_Dec().pyclass

IConsole_getGuestResultMsg = ns0.IConsole_getGuestResponse_Dec().pyclass

IConsole_getKeyboardRequestMsg = ns0.IConsole_getKeyboard_Dec().pyclass

IConsole_getKeyboardResultMsg = ns0.IConsole_getKeyboardResponse_Dec().pyclass

IConsole_getMouseRequestMsg = ns0.IConsole_getMouse_Dec().pyclass

IConsole_getMouseResultMsg = ns0.IConsole_getMouseResponse_Dec().pyclass

IConsole_getDisplayRequestMsg = ns0.IConsole_getDisplay_Dec().pyclass

IConsole_getDisplayResultMsg = ns0.IConsole_getDisplayResponse_Dec().pyclass

IConsole_getUSBDevicesRequestMsg = ns0.IConsole_getUSBDevices_Dec().pyclass

IConsole_getUSBDevicesResultMsg = ns0.IConsole_getUSBDevicesResponse_Dec().pyclass

IConsole_getRemoteUSBDevicesRequestMsg = ns0.IConsole_getRemoteUSBDevices_Dec().pyclass

IConsole_getRemoteUSBDevicesResultMsg = ns0.IConsole_getRemoteUSBDevicesResponse_Dec().pyclass

IConsole_getSharedFoldersRequestMsg = ns0.IConsole_getSharedFolders_Dec().pyclass

IConsole_getSharedFoldersResultMsg = ns0.IConsole_getSharedFoldersResponse_Dec().pyclass

IConsole_getVRDEServerInfoRequestMsg = ns0.IConsole_getVRDEServerInfo_Dec().pyclass

IConsole_getVRDEServerInfoResultMsg = ns0.IConsole_getVRDEServerInfoResponse_Dec().pyclass

IConsole_getEventSourceRequestMsg = ns0.IConsole_getEventSource_Dec().pyclass

IConsole_getEventSourceResultMsg = ns0.IConsole_getEventSourceResponse_Dec().pyclass

IConsole_getAttachedPciDevicesRequestMsg = ns0.IConsole_getAttachedPciDevices_Dec().pyclass

IConsole_getAttachedPciDevicesResultMsg = ns0.IConsole_getAttachedPciDevicesResponse_Dec().pyclass

IConsole_getUseHostClipboardRequestMsg = ns0.IConsole_getUseHostClipboard_Dec().pyclass

IConsole_getUseHostClipboardResultMsg = ns0.IConsole_getUseHostClipboardResponse_Dec().pyclass

IConsole_setUseHostClipboardRequestMsg = ns0.IConsole_setUseHostClipboard_Dec().pyclass

IConsole_setUseHostClipboardResultMsg = ns0.IConsole_setUseHostClipboardResponse_Dec().pyclass

IConsole_powerUpRequestMsg = ns0.IConsole_powerUp_Dec().pyclass

IConsole_powerUpResultMsg = ns0.IConsole_powerUpResponse_Dec().pyclass

IConsole_powerUpPausedRequestMsg = ns0.IConsole_powerUpPaused_Dec().pyclass

IConsole_powerUpPausedResultMsg = ns0.IConsole_powerUpPausedResponse_Dec().pyclass

IConsole_powerDownRequestMsg = ns0.IConsole_powerDown_Dec().pyclass

IConsole_powerDownResultMsg = ns0.IConsole_powerDownResponse_Dec().pyclass

IConsole_resetRequestMsg = ns0.IConsole_reset_Dec().pyclass

IConsole_resetResultMsg = ns0.IConsole_resetResponse_Dec().pyclass

IConsole_pauseRequestMsg = ns0.IConsole_pause_Dec().pyclass

IConsole_pauseResultMsg = ns0.IConsole_pauseResponse_Dec().pyclass

IConsole_resumeRequestMsg = ns0.IConsole_resume_Dec().pyclass

IConsole_resumeResultMsg = ns0.IConsole_resumeResponse_Dec().pyclass

IConsole_powerButtonRequestMsg = ns0.IConsole_powerButton_Dec().pyclass

IConsole_powerButtonResultMsg = ns0.IConsole_powerButtonResponse_Dec().pyclass

IConsole_sleepButtonRequestMsg = ns0.IConsole_sleepButton_Dec().pyclass

IConsole_sleepButtonResultMsg = ns0.IConsole_sleepButtonResponse_Dec().pyclass

IConsole_getPowerButtonHandledRequestMsg = ns0.IConsole_getPowerButtonHandled_Dec().pyclass

IConsole_getPowerButtonHandledResultMsg = ns0.IConsole_getPowerButtonHandledResponse_Dec().pyclass

IConsole_getGuestEnteredACPIModeRequestMsg = ns0.IConsole_getGuestEnteredACPIMode_Dec().pyclass

IConsole_getGuestEnteredACPIModeResultMsg = ns0.IConsole_getGuestEnteredACPIModeResponse_Dec().pyclass

IConsole_saveStateRequestMsg = ns0.IConsole_saveState_Dec().pyclass

IConsole_saveStateResultMsg = ns0.IConsole_saveStateResponse_Dec().pyclass

IConsole_adoptSavedStateRequestMsg = ns0.IConsole_adoptSavedState_Dec().pyclass

IConsole_adoptSavedStateResultMsg = ns0.IConsole_adoptSavedStateResponse_Dec().pyclass

IConsole_discardSavedStateRequestMsg = ns0.IConsole_discardSavedState_Dec().pyclass

IConsole_discardSavedStateResultMsg = ns0.IConsole_discardSavedStateResponse_Dec().pyclass

IConsole_getDeviceActivityRequestMsg = ns0.IConsole_getDeviceActivity_Dec().pyclass

IConsole_getDeviceActivityResultMsg = ns0.IConsole_getDeviceActivityResponse_Dec().pyclass

IConsole_attachUSBDeviceRequestMsg = ns0.IConsole_attachUSBDevice_Dec().pyclass

IConsole_attachUSBDeviceResultMsg = ns0.IConsole_attachUSBDeviceResponse_Dec().pyclass

IConsole_detachUSBDeviceRequestMsg = ns0.IConsole_detachUSBDevice_Dec().pyclass

IConsole_detachUSBDeviceResultMsg = ns0.IConsole_detachUSBDeviceResponse_Dec().pyclass

IConsole_findUSBDeviceByAddressRequestMsg = ns0.IConsole_findUSBDeviceByAddress_Dec().pyclass

IConsole_findUSBDeviceByAddressResultMsg = ns0.IConsole_findUSBDeviceByAddressResponse_Dec().pyclass

IConsole_findUSBDeviceByIdRequestMsg = ns0.IConsole_findUSBDeviceById_Dec().pyclass

IConsole_findUSBDeviceByIdResultMsg = ns0.IConsole_findUSBDeviceByIdResponse_Dec().pyclass

IConsole_createSharedFolderRequestMsg = ns0.IConsole_createSharedFolder_Dec().pyclass

IConsole_createSharedFolderResultMsg = ns0.IConsole_createSharedFolderResponse_Dec().pyclass

IConsole_removeSharedFolderRequestMsg = ns0.IConsole_removeSharedFolder_Dec().pyclass

IConsole_removeSharedFolderResultMsg = ns0.IConsole_removeSharedFolderResponse_Dec().pyclass

IConsole_takeSnapshotRequestMsg = ns0.IConsole_takeSnapshot_Dec().pyclass

IConsole_takeSnapshotResultMsg = ns0.IConsole_takeSnapshotResponse_Dec().pyclass

IConsole_deleteSnapshotRequestMsg = ns0.IConsole_deleteSnapshot_Dec().pyclass

IConsole_deleteSnapshotResultMsg = ns0.IConsole_deleteSnapshotResponse_Dec().pyclass

IConsole_deleteSnapshotAndAllChildrenRequestMsg = ns0.IConsole_deleteSnapshotAndAllChildren_Dec().pyclass

IConsole_deleteSnapshotAndAllChildrenResultMsg = ns0.IConsole_deleteSnapshotAndAllChildrenResponse_Dec().pyclass

IConsole_deleteSnapshotRangeRequestMsg = ns0.IConsole_deleteSnapshotRange_Dec().pyclass

IConsole_deleteSnapshotRangeResultMsg = ns0.IConsole_deleteSnapshotRangeResponse_Dec().pyclass

IConsole_restoreSnapshotRequestMsg = ns0.IConsole_restoreSnapshot_Dec().pyclass

IConsole_restoreSnapshotResultMsg = ns0.IConsole_restoreSnapshotResponse_Dec().pyclass

IConsole_teleportRequestMsg = ns0.IConsole_teleport_Dec().pyclass

IConsole_teleportResultMsg = ns0.IConsole_teleportResponse_Dec().pyclass

IHostNetworkInterface_getNameRequestMsg = ns0.IHostNetworkInterface_getName_Dec().pyclass

IHostNetworkInterface_getNameResultMsg = ns0.IHostNetworkInterface_getNameResponse_Dec().pyclass

IHostNetworkInterface_getIdRequestMsg = ns0.IHostNetworkInterface_getId_Dec().pyclass

IHostNetworkInterface_getIdResultMsg = ns0.IHostNetworkInterface_getIdResponse_Dec().pyclass

IHostNetworkInterface_getNetworkNameRequestMsg = ns0.IHostNetworkInterface_getNetworkName_Dec().pyclass

IHostNetworkInterface_getNetworkNameResultMsg = ns0.IHostNetworkInterface_getNetworkNameResponse_Dec().pyclass

IHostNetworkInterface_getDhcpEnabledRequestMsg = ns0.IHostNetworkInterface_getDhcpEnabled_Dec().pyclass

IHostNetworkInterface_getDhcpEnabledResultMsg = ns0.IHostNetworkInterface_getDhcpEnabledResponse_Dec().pyclass

IHostNetworkInterface_getIPAddressRequestMsg = ns0.IHostNetworkInterface_getIPAddress_Dec().pyclass

IHostNetworkInterface_getIPAddressResultMsg = ns0.IHostNetworkInterface_getIPAddressResponse_Dec().pyclass

IHostNetworkInterface_getNetworkMaskRequestMsg = ns0.IHostNetworkInterface_getNetworkMask_Dec().pyclass

IHostNetworkInterface_getNetworkMaskResultMsg = ns0.IHostNetworkInterface_getNetworkMaskResponse_Dec().pyclass

IHostNetworkInterface_getIPV6SupportedRequestMsg = ns0.IHostNetworkInterface_getIPV6Supported_Dec().pyclass

IHostNetworkInterface_getIPV6SupportedResultMsg = ns0.IHostNetworkInterface_getIPV6SupportedResponse_Dec().pyclass

IHostNetworkInterface_getIPV6AddressRequestMsg = ns0.IHostNetworkInterface_getIPV6Address_Dec().pyclass

IHostNetworkInterface_getIPV6AddressResultMsg = ns0.IHostNetworkInterface_getIPV6AddressResponse_Dec().pyclass

IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthRequestMsg = ns0.IHostNetworkInterface_getIPV6NetworkMaskPrefixLength_Dec().pyclass

IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResultMsg = ns0.IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse_Dec().pyclass

IHostNetworkInterface_getHardwareAddressRequestMsg = ns0.IHostNetworkInterface_getHardwareAddress_Dec().pyclass

IHostNetworkInterface_getHardwareAddressResultMsg = ns0.IHostNetworkInterface_getHardwareAddressResponse_Dec().pyclass

IHostNetworkInterface_getMediumTypeRequestMsg = ns0.IHostNetworkInterface_getMediumType_Dec().pyclass

IHostNetworkInterface_getMediumTypeResultMsg = ns0.IHostNetworkInterface_getMediumTypeResponse_Dec().pyclass

IHostNetworkInterface_getStatusRequestMsg = ns0.IHostNetworkInterface_getStatus_Dec().pyclass

IHostNetworkInterface_getStatusResultMsg = ns0.IHostNetworkInterface_getStatusResponse_Dec().pyclass

IHostNetworkInterface_getInterfaceTypeRequestMsg = ns0.IHostNetworkInterface_getInterfaceType_Dec().pyclass

IHostNetworkInterface_getInterfaceTypeResultMsg = ns0.IHostNetworkInterface_getInterfaceTypeResponse_Dec().pyclass

IHostNetworkInterface_enableStaticIpConfigRequestMsg = ns0.IHostNetworkInterface_enableStaticIpConfig_Dec().pyclass

IHostNetworkInterface_enableStaticIpConfigResultMsg = ns0.IHostNetworkInterface_enableStaticIpConfigResponse_Dec().pyclass

IHostNetworkInterface_enableStaticIpConfigV6RequestMsg = ns0.IHostNetworkInterface_enableStaticIpConfigV6_Dec().pyclass

IHostNetworkInterface_enableStaticIpConfigV6ResultMsg = ns0.IHostNetworkInterface_enableStaticIpConfigV6Response_Dec().pyclass

IHostNetworkInterface_enableDynamicIpConfigRequestMsg = ns0.IHostNetworkInterface_enableDynamicIpConfig_Dec().pyclass

IHostNetworkInterface_enableDynamicIpConfigResultMsg = ns0.IHostNetworkInterface_enableDynamicIpConfigResponse_Dec().pyclass

IHostNetworkInterface_dhcpRediscoverRequestMsg = ns0.IHostNetworkInterface_dhcpRediscover_Dec().pyclass

IHostNetworkInterface_dhcpRediscoverResultMsg = ns0.IHostNetworkInterface_dhcpRediscoverResponse_Dec().pyclass

IHost_getDVDDrivesRequestMsg = ns0.IHost_getDVDDrives_Dec().pyclass

IHost_getDVDDrivesResultMsg = ns0.IHost_getDVDDrivesResponse_Dec().pyclass

IHost_getFloppyDrivesRequestMsg = ns0.IHost_getFloppyDrives_Dec().pyclass

IHost_getFloppyDrivesResultMsg = ns0.IHost_getFloppyDrivesResponse_Dec().pyclass

IHost_getUSBDevicesRequestMsg = ns0.IHost_getUSBDevices_Dec().pyclass

IHost_getUSBDevicesResultMsg = ns0.IHost_getUSBDevicesResponse_Dec().pyclass

IHost_getUSBDeviceFiltersRequestMsg = ns0.IHost_getUSBDeviceFilters_Dec().pyclass

IHost_getUSBDeviceFiltersResultMsg = ns0.IHost_getUSBDeviceFiltersResponse_Dec().pyclass

IHost_getNetworkInterfacesRequestMsg = ns0.IHost_getNetworkInterfaces_Dec().pyclass

IHost_getNetworkInterfacesResultMsg = ns0.IHost_getNetworkInterfacesResponse_Dec().pyclass

IHost_getProcessorCountRequestMsg = ns0.IHost_getProcessorCount_Dec().pyclass

IHost_getProcessorCountResultMsg = ns0.IHost_getProcessorCountResponse_Dec().pyclass

IHost_getProcessorOnlineCountRequestMsg = ns0.IHost_getProcessorOnlineCount_Dec().pyclass

IHost_getProcessorOnlineCountResultMsg = ns0.IHost_getProcessorOnlineCountResponse_Dec().pyclass

IHost_getProcessorCoreCountRequestMsg = ns0.IHost_getProcessorCoreCount_Dec().pyclass

IHost_getProcessorCoreCountResultMsg = ns0.IHost_getProcessorCoreCountResponse_Dec().pyclass

IHost_getMemorySizeRequestMsg = ns0.IHost_getMemorySize_Dec().pyclass

IHost_getMemorySizeResultMsg = ns0.IHost_getMemorySizeResponse_Dec().pyclass

IHost_getMemoryAvailableRequestMsg = ns0.IHost_getMemoryAvailable_Dec().pyclass

IHost_getMemoryAvailableResultMsg = ns0.IHost_getMemoryAvailableResponse_Dec().pyclass

IHost_getOperatingSystemRequestMsg = ns0.IHost_getOperatingSystem_Dec().pyclass

IHost_getOperatingSystemResultMsg = ns0.IHost_getOperatingSystemResponse_Dec().pyclass

IHost_getOSVersionRequestMsg = ns0.IHost_getOSVersion_Dec().pyclass

IHost_getOSVersionResultMsg = ns0.IHost_getOSVersionResponse_Dec().pyclass

IHost_getUTCTimeRequestMsg = ns0.IHost_getUTCTime_Dec().pyclass

IHost_getUTCTimeResultMsg = ns0.IHost_getUTCTimeResponse_Dec().pyclass

IHost_getAcceleration3DAvailableRequestMsg = ns0.IHost_getAcceleration3DAvailable_Dec().pyclass

IHost_getAcceleration3DAvailableResultMsg = ns0.IHost_getAcceleration3DAvailableResponse_Dec().pyclass

IHost_getProcessorSpeedRequestMsg = ns0.IHost_getProcessorSpeed_Dec().pyclass

IHost_getProcessorSpeedResultMsg = ns0.IHost_getProcessorSpeedResponse_Dec().pyclass

IHost_getProcessorFeatureRequestMsg = ns0.IHost_getProcessorFeature_Dec().pyclass

IHost_getProcessorFeatureResultMsg = ns0.IHost_getProcessorFeatureResponse_Dec().pyclass

IHost_getProcessorDescriptionRequestMsg = ns0.IHost_getProcessorDescription_Dec().pyclass

IHost_getProcessorDescriptionResultMsg = ns0.IHost_getProcessorDescriptionResponse_Dec().pyclass

IHost_getProcessorCPUIDLeafRequestMsg = ns0.IHost_getProcessorCPUIDLeaf_Dec().pyclass

IHost_getProcessorCPUIDLeafResultMsg = ns0.IHost_getProcessorCPUIDLeafResponse_Dec().pyclass

IHost_createHostOnlyNetworkInterfaceRequestMsg = ns0.IHost_createHostOnlyNetworkInterface_Dec().pyclass

IHost_createHostOnlyNetworkInterfaceResultMsg = ns0.IHost_createHostOnlyNetworkInterfaceResponse_Dec().pyclass

IHost_removeHostOnlyNetworkInterfaceRequestMsg = ns0.IHost_removeHostOnlyNetworkInterface_Dec().pyclass

IHost_removeHostOnlyNetworkInterfaceResultMsg = ns0.IHost_removeHostOnlyNetworkInterfaceResponse_Dec().pyclass

IHost_createUSBDeviceFilterRequestMsg = ns0.IHost_createUSBDeviceFilter_Dec().pyclass

IHost_createUSBDeviceFilterResultMsg = ns0.IHost_createUSBDeviceFilterResponse_Dec().pyclass

IHost_insertUSBDeviceFilterRequestMsg = ns0.IHost_insertUSBDeviceFilter_Dec().pyclass

IHost_insertUSBDeviceFilterResultMsg = ns0.IHost_insertUSBDeviceFilterResponse_Dec().pyclass

IHost_removeUSBDeviceFilterRequestMsg = ns0.IHost_removeUSBDeviceFilter_Dec().pyclass

IHost_removeUSBDeviceFilterResultMsg = ns0.IHost_removeUSBDeviceFilterResponse_Dec().pyclass

IHost_findHostDVDDriveRequestMsg = ns0.IHost_findHostDVDDrive_Dec().pyclass

IHost_findHostDVDDriveResultMsg = ns0.IHost_findHostDVDDriveResponse_Dec().pyclass

IHost_findHostFloppyDriveRequestMsg = ns0.IHost_findHostFloppyDrive_Dec().pyclass

IHost_findHostFloppyDriveResultMsg = ns0.IHost_findHostFloppyDriveResponse_Dec().pyclass

IHost_findHostNetworkInterfaceByNameRequestMsg = ns0.IHost_findHostNetworkInterfaceByName_Dec().pyclass

IHost_findHostNetworkInterfaceByNameResultMsg = ns0.IHost_findHostNetworkInterfaceByNameResponse_Dec().pyclass

IHost_findHostNetworkInterfaceByIdRequestMsg = ns0.IHost_findHostNetworkInterfaceById_Dec().pyclass

IHost_findHostNetworkInterfaceByIdResultMsg = ns0.IHost_findHostNetworkInterfaceByIdResponse_Dec().pyclass

IHost_findHostNetworkInterfacesOfTypeRequestMsg = ns0.IHost_findHostNetworkInterfacesOfType_Dec().pyclass

IHost_findHostNetworkInterfacesOfTypeResultMsg = ns0.IHost_findHostNetworkInterfacesOfTypeResponse_Dec().pyclass

IHost_findUSBDeviceByIdRequestMsg = ns0.IHost_findUSBDeviceById_Dec().pyclass

IHost_findUSBDeviceByIdResultMsg = ns0.IHost_findUSBDeviceByIdResponse_Dec().pyclass

IHost_findUSBDeviceByAddressRequestMsg = ns0.IHost_findUSBDeviceByAddress_Dec().pyclass

IHost_findUSBDeviceByAddressResultMsg = ns0.IHost_findUSBDeviceByAddressResponse_Dec().pyclass

IHost_generateMACAddressRequestMsg = ns0.IHost_generateMACAddress_Dec().pyclass

IHost_generateMACAddressResultMsg = ns0.IHost_generateMACAddressResponse_Dec().pyclass

ISystemProperties_getMinGuestRAMRequestMsg = ns0.ISystemProperties_getMinGuestRAM_Dec().pyclass

ISystemProperties_getMinGuestRAMResultMsg = ns0.ISystemProperties_getMinGuestRAMResponse_Dec().pyclass

ISystemProperties_getMaxGuestRAMRequestMsg = ns0.ISystemProperties_getMaxGuestRAM_Dec().pyclass

ISystemProperties_getMaxGuestRAMResultMsg = ns0.ISystemProperties_getMaxGuestRAMResponse_Dec().pyclass

ISystemProperties_getMinGuestVRAMRequestMsg = ns0.ISystemProperties_getMinGuestVRAM_Dec().pyclass

ISystemProperties_getMinGuestVRAMResultMsg = ns0.ISystemProperties_getMinGuestVRAMResponse_Dec().pyclass

ISystemProperties_getMaxGuestVRAMRequestMsg = ns0.ISystemProperties_getMaxGuestVRAM_Dec().pyclass

ISystemProperties_getMaxGuestVRAMResultMsg = ns0.ISystemProperties_getMaxGuestVRAMResponse_Dec().pyclass

ISystemProperties_getMinGuestCPUCountRequestMsg = ns0.ISystemProperties_getMinGuestCPUCount_Dec().pyclass

ISystemProperties_getMinGuestCPUCountResultMsg = ns0.ISystemProperties_getMinGuestCPUCountResponse_Dec().pyclass

ISystemProperties_getMaxGuestCPUCountRequestMsg = ns0.ISystemProperties_getMaxGuestCPUCount_Dec().pyclass

ISystemProperties_getMaxGuestCPUCountResultMsg = ns0.ISystemProperties_getMaxGuestCPUCountResponse_Dec().pyclass

ISystemProperties_getMaxGuestMonitorsRequestMsg = ns0.ISystemProperties_getMaxGuestMonitors_Dec().pyclass

ISystemProperties_getMaxGuestMonitorsResultMsg = ns0.ISystemProperties_getMaxGuestMonitorsResponse_Dec().pyclass

ISystemProperties_getInfoVDSizeRequestMsg = ns0.ISystemProperties_getInfoVDSize_Dec().pyclass

ISystemProperties_getInfoVDSizeResultMsg = ns0.ISystemProperties_getInfoVDSizeResponse_Dec().pyclass

ISystemProperties_getSerialPortCountRequestMsg = ns0.ISystemProperties_getSerialPortCount_Dec().pyclass

ISystemProperties_getSerialPortCountResultMsg = ns0.ISystemProperties_getSerialPortCountResponse_Dec().pyclass

ISystemProperties_getParallelPortCountRequestMsg = ns0.ISystemProperties_getParallelPortCount_Dec().pyclass

ISystemProperties_getParallelPortCountResultMsg = ns0.ISystemProperties_getParallelPortCountResponse_Dec().pyclass

ISystemProperties_getMaxBootPositionRequestMsg = ns0.ISystemProperties_getMaxBootPosition_Dec().pyclass

ISystemProperties_getMaxBootPositionResultMsg = ns0.ISystemProperties_getMaxBootPositionResponse_Dec().pyclass

ISystemProperties_getDefaultMachineFolderRequestMsg = ns0.ISystemProperties_getDefaultMachineFolder_Dec().pyclass

ISystemProperties_getDefaultMachineFolderResultMsg = ns0.ISystemProperties_getDefaultMachineFolderResponse_Dec().pyclass

ISystemProperties_setDefaultMachineFolderRequestMsg = ns0.ISystemProperties_setDefaultMachineFolder_Dec().pyclass

ISystemProperties_setDefaultMachineFolderResultMsg = ns0.ISystemProperties_setDefaultMachineFolderResponse_Dec().pyclass

ISystemProperties_getMediumFormatsRequestMsg = ns0.ISystemProperties_getMediumFormats_Dec().pyclass

ISystemProperties_getMediumFormatsResultMsg = ns0.ISystemProperties_getMediumFormatsResponse_Dec().pyclass

ISystemProperties_getDefaultHardDiskFormatRequestMsg = ns0.ISystemProperties_getDefaultHardDiskFormat_Dec().pyclass

ISystemProperties_getDefaultHardDiskFormatResultMsg = ns0.ISystemProperties_getDefaultHardDiskFormatResponse_Dec().pyclass

ISystemProperties_setDefaultHardDiskFormatRequestMsg = ns0.ISystemProperties_setDefaultHardDiskFormat_Dec().pyclass

ISystemProperties_setDefaultHardDiskFormatResultMsg = ns0.ISystemProperties_setDefaultHardDiskFormatResponse_Dec().pyclass

ISystemProperties_getFreeDiskSpaceWarningRequestMsg = ns0.ISystemProperties_getFreeDiskSpaceWarning_Dec().pyclass

ISystemProperties_getFreeDiskSpaceWarningResultMsg = ns0.ISystemProperties_getFreeDiskSpaceWarningResponse_Dec().pyclass

ISystemProperties_setFreeDiskSpaceWarningRequestMsg = ns0.ISystemProperties_setFreeDiskSpaceWarning_Dec().pyclass

ISystemProperties_setFreeDiskSpaceWarningResultMsg = ns0.ISystemProperties_setFreeDiskSpaceWarningResponse_Dec().pyclass

ISystemProperties_getFreeDiskSpacePercentWarningRequestMsg = ns0.ISystemProperties_getFreeDiskSpacePercentWarning_Dec().pyclass

ISystemProperties_getFreeDiskSpacePercentWarningResultMsg = ns0.ISystemProperties_getFreeDiskSpacePercentWarningResponse_Dec().pyclass

ISystemProperties_setFreeDiskSpacePercentWarningRequestMsg = ns0.ISystemProperties_setFreeDiskSpacePercentWarning_Dec().pyclass

ISystemProperties_setFreeDiskSpacePercentWarningResultMsg = ns0.ISystemProperties_setFreeDiskSpacePercentWarningResponse_Dec().pyclass

ISystemProperties_getFreeDiskSpaceErrorRequestMsg = ns0.ISystemProperties_getFreeDiskSpaceError_Dec().pyclass

ISystemProperties_getFreeDiskSpaceErrorResultMsg = ns0.ISystemProperties_getFreeDiskSpaceErrorResponse_Dec().pyclass

ISystemProperties_setFreeDiskSpaceErrorRequestMsg = ns0.ISystemProperties_setFreeDiskSpaceError_Dec().pyclass

ISystemProperties_setFreeDiskSpaceErrorResultMsg = ns0.ISystemProperties_setFreeDiskSpaceErrorResponse_Dec().pyclass

ISystemProperties_getFreeDiskSpacePercentErrorRequestMsg = ns0.ISystemProperties_getFreeDiskSpacePercentError_Dec().pyclass

ISystemProperties_getFreeDiskSpacePercentErrorResultMsg = ns0.ISystemProperties_getFreeDiskSpacePercentErrorResponse_Dec().pyclass

ISystemProperties_setFreeDiskSpacePercentErrorRequestMsg = ns0.ISystemProperties_setFreeDiskSpacePercentError_Dec().pyclass

ISystemProperties_setFreeDiskSpacePercentErrorResultMsg = ns0.ISystemProperties_setFreeDiskSpacePercentErrorResponse_Dec().pyclass

ISystemProperties_getVRDEAuthLibraryRequestMsg = ns0.ISystemProperties_getVRDEAuthLibrary_Dec().pyclass

ISystemProperties_getVRDEAuthLibraryResultMsg = ns0.ISystemProperties_getVRDEAuthLibraryResponse_Dec().pyclass

ISystemProperties_setVRDEAuthLibraryRequestMsg = ns0.ISystemProperties_setVRDEAuthLibrary_Dec().pyclass

ISystemProperties_setVRDEAuthLibraryResultMsg = ns0.ISystemProperties_setVRDEAuthLibraryResponse_Dec().pyclass

ISystemProperties_getWebServiceAuthLibraryRequestMsg = ns0.ISystemProperties_getWebServiceAuthLibrary_Dec().pyclass

ISystemProperties_getWebServiceAuthLibraryResultMsg = ns0.ISystemProperties_getWebServiceAuthLibraryResponse_Dec().pyclass

ISystemProperties_setWebServiceAuthLibraryRequestMsg = ns0.ISystemProperties_setWebServiceAuthLibrary_Dec().pyclass

ISystemProperties_setWebServiceAuthLibraryResultMsg = ns0.ISystemProperties_setWebServiceAuthLibraryResponse_Dec().pyclass

ISystemProperties_getDefaultVRDEExtPackRequestMsg = ns0.ISystemProperties_getDefaultVRDEExtPack_Dec().pyclass

ISystemProperties_getDefaultVRDEExtPackResultMsg = ns0.ISystemProperties_getDefaultVRDEExtPackResponse_Dec().pyclass

ISystemProperties_setDefaultVRDEExtPackRequestMsg = ns0.ISystemProperties_setDefaultVRDEExtPack_Dec().pyclass

ISystemProperties_setDefaultVRDEExtPackResultMsg = ns0.ISystemProperties_setDefaultVRDEExtPackResponse_Dec().pyclass

ISystemProperties_getLogHistoryCountRequestMsg = ns0.ISystemProperties_getLogHistoryCount_Dec().pyclass

ISystemProperties_getLogHistoryCountResultMsg = ns0.ISystemProperties_getLogHistoryCountResponse_Dec().pyclass

ISystemProperties_setLogHistoryCountRequestMsg = ns0.ISystemProperties_setLogHistoryCount_Dec().pyclass

ISystemProperties_setLogHistoryCountResultMsg = ns0.ISystemProperties_setLogHistoryCountResponse_Dec().pyclass

ISystemProperties_getDefaultAudioDriverRequestMsg = ns0.ISystemProperties_getDefaultAudioDriver_Dec().pyclass

ISystemProperties_getDefaultAudioDriverResultMsg = ns0.ISystemProperties_getDefaultAudioDriverResponse_Dec().pyclass

ISystemProperties_getMaxNetworkAdaptersRequestMsg = ns0.ISystemProperties_getMaxNetworkAdapters_Dec().pyclass

ISystemProperties_getMaxNetworkAdaptersResultMsg = ns0.ISystemProperties_getMaxNetworkAdaptersResponse_Dec().pyclass

ISystemProperties_getMaxNetworkAdaptersOfTypeRequestMsg = ns0.ISystemProperties_getMaxNetworkAdaptersOfType_Dec().pyclass

ISystemProperties_getMaxNetworkAdaptersOfTypeResultMsg = ns0.ISystemProperties_getMaxNetworkAdaptersOfTypeResponse_Dec().pyclass

ISystemProperties_getMaxDevicesPerPortForStorageBusRequestMsg = ns0.ISystemProperties_getMaxDevicesPerPortForStorageBus_Dec().pyclass

ISystemProperties_getMaxDevicesPerPortForStorageBusResultMsg = ns0.ISystemProperties_getMaxDevicesPerPortForStorageBusResponse_Dec().pyclass

ISystemProperties_getMinPortCountForStorageBusRequestMsg = ns0.ISystemProperties_getMinPortCountForStorageBus_Dec().pyclass

ISystemProperties_getMinPortCountForStorageBusResultMsg = ns0.ISystemProperties_getMinPortCountForStorageBusResponse_Dec().pyclass

ISystemProperties_getMaxPortCountForStorageBusRequestMsg = ns0.ISystemProperties_getMaxPortCountForStorageBus_Dec().pyclass

ISystemProperties_getMaxPortCountForStorageBusResultMsg = ns0.ISystemProperties_getMaxPortCountForStorageBusResponse_Dec().pyclass

ISystemProperties_getMaxInstancesOfStorageBusRequestMsg = ns0.ISystemProperties_getMaxInstancesOfStorageBus_Dec().pyclass

ISystemProperties_getMaxInstancesOfStorageBusResultMsg = ns0.ISystemProperties_getMaxInstancesOfStorageBusResponse_Dec().pyclass

ISystemProperties_getDeviceTypesForStorageBusRequestMsg = ns0.ISystemProperties_getDeviceTypesForStorageBus_Dec().pyclass

ISystemProperties_getDeviceTypesForStorageBusResultMsg = ns0.ISystemProperties_getDeviceTypesForStorageBusResponse_Dec().pyclass

ISystemProperties_getDefaultIoCacheSettingForStorageControllerRequestMsg = ns0.ISystemProperties_getDefaultIoCacheSettingForStorageController_Dec().pyclass

ISystemProperties_getDefaultIoCacheSettingForStorageControllerResultMsg = ns0.ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse_Dec().pyclass

IGuest_getOSTypeIdRequestMsg = ns0.IGuest_getOSTypeId_Dec().pyclass

IGuest_getOSTypeIdResultMsg = ns0.IGuest_getOSTypeIdResponse_Dec().pyclass

IGuest_getAdditionsRunLevelRequestMsg = ns0.IGuest_getAdditionsRunLevel_Dec().pyclass

IGuest_getAdditionsRunLevelResultMsg = ns0.IGuest_getAdditionsRunLevelResponse_Dec().pyclass

IGuest_getAdditionsVersionRequestMsg = ns0.IGuest_getAdditionsVersion_Dec().pyclass

IGuest_getAdditionsVersionResultMsg = ns0.IGuest_getAdditionsVersionResponse_Dec().pyclass

IGuest_getFacilitiesRequestMsg = ns0.IGuest_getFacilities_Dec().pyclass

IGuest_getFacilitiesResultMsg = ns0.IGuest_getFacilitiesResponse_Dec().pyclass

IGuest_getMemoryBalloonSizeRequestMsg = ns0.IGuest_getMemoryBalloonSize_Dec().pyclass

IGuest_getMemoryBalloonSizeResultMsg = ns0.IGuest_getMemoryBalloonSizeResponse_Dec().pyclass

IGuest_setMemoryBalloonSizeRequestMsg = ns0.IGuest_setMemoryBalloonSize_Dec().pyclass

IGuest_setMemoryBalloonSizeResultMsg = ns0.IGuest_setMemoryBalloonSizeResponse_Dec().pyclass

IGuest_getStatisticsUpdateIntervalRequestMsg = ns0.IGuest_getStatisticsUpdateInterval_Dec().pyclass

IGuest_getStatisticsUpdateIntervalResultMsg = ns0.IGuest_getStatisticsUpdateIntervalResponse_Dec().pyclass

IGuest_setStatisticsUpdateIntervalRequestMsg = ns0.IGuest_setStatisticsUpdateInterval_Dec().pyclass

IGuest_setStatisticsUpdateIntervalResultMsg = ns0.IGuest_setStatisticsUpdateIntervalResponse_Dec().pyclass

IGuest_internalGetStatisticsRequestMsg = ns0.IGuest_internalGetStatistics_Dec().pyclass

IGuest_internalGetStatisticsResultMsg = ns0.IGuest_internalGetStatisticsResponse_Dec().pyclass

IGuest_getFacilityStatusRequestMsg = ns0.IGuest_getFacilityStatus_Dec().pyclass

IGuest_getFacilityStatusResultMsg = ns0.IGuest_getFacilityStatusResponse_Dec().pyclass

IGuest_getAdditionsStatusRequestMsg = ns0.IGuest_getAdditionsStatus_Dec().pyclass

IGuest_getAdditionsStatusResultMsg = ns0.IGuest_getAdditionsStatusResponse_Dec().pyclass

IGuest_setCredentialsRequestMsg = ns0.IGuest_setCredentials_Dec().pyclass

IGuest_setCredentialsResultMsg = ns0.IGuest_setCredentialsResponse_Dec().pyclass

IGuest_executeProcessRequestMsg = ns0.IGuest_executeProcess_Dec().pyclass

IGuest_executeProcessResultMsg = ns0.IGuest_executeProcessResponse_Dec().pyclass

IGuest_getProcessOutputRequestMsg = ns0.IGuest_getProcessOutput_Dec().pyclass

IGuest_getProcessOutputResultMsg = ns0.IGuest_getProcessOutputResponse_Dec().pyclass

IGuest_getProcessStatusRequestMsg = ns0.IGuest_getProcessStatus_Dec().pyclass

IGuest_getProcessStatusResultMsg = ns0.IGuest_getProcessStatusResponse_Dec().pyclass

IGuest_copyFromGuestRequestMsg = ns0.IGuest_copyFromGuest_Dec().pyclass

IGuest_copyFromGuestResultMsg = ns0.IGuest_copyFromGuestResponse_Dec().pyclass

IGuest_copyToGuestRequestMsg = ns0.IGuest_copyToGuest_Dec().pyclass

IGuest_copyToGuestResultMsg = ns0.IGuest_copyToGuestResponse_Dec().pyclass

IGuest_directoryCloseRequestMsg = ns0.IGuest_directoryClose_Dec().pyclass

IGuest_directoryCloseResultMsg = ns0.IGuest_directoryCloseResponse_Dec().pyclass

IGuest_directoryCreateRequestMsg = ns0.IGuest_directoryCreate_Dec().pyclass

IGuest_directoryCreateResultMsg = ns0.IGuest_directoryCreateResponse_Dec().pyclass

IGuest_directoryOpenRequestMsg = ns0.IGuest_directoryOpen_Dec().pyclass

IGuest_directoryOpenResultMsg = ns0.IGuest_directoryOpenResponse_Dec().pyclass

IGuest_directoryReadRequestMsg = ns0.IGuest_directoryRead_Dec().pyclass

IGuest_directoryReadResultMsg = ns0.IGuest_directoryReadResponse_Dec().pyclass

IGuest_fileExistsRequestMsg = ns0.IGuest_fileExists_Dec().pyclass

IGuest_fileExistsResultMsg = ns0.IGuest_fileExistsResponse_Dec().pyclass

IGuest_fileQuerySizeRequestMsg = ns0.IGuest_fileQuerySize_Dec().pyclass

IGuest_fileQuerySizeResultMsg = ns0.IGuest_fileQuerySizeResponse_Dec().pyclass

IGuest_setProcessInputRequestMsg = ns0.IGuest_setProcessInput_Dec().pyclass

IGuest_setProcessInputResultMsg = ns0.IGuest_setProcessInputResponse_Dec().pyclass

IGuest_updateGuestAdditionsRequestMsg = ns0.IGuest_updateGuestAdditions_Dec().pyclass

IGuest_updateGuestAdditionsResultMsg = ns0.IGuest_updateGuestAdditionsResponse_Dec().pyclass

IProgress_getIdRequestMsg = ns0.IProgress_getId_Dec().pyclass

IProgress_getIdResultMsg = ns0.IProgress_getIdResponse_Dec().pyclass

IProgress_getDescriptionRequestMsg = ns0.IProgress_getDescription_Dec().pyclass

IProgress_getDescriptionResultMsg = ns0.IProgress_getDescriptionResponse_Dec().pyclass

IProgress_getInitiatorRequestMsg = ns0.IProgress_getInitiator_Dec().pyclass

IProgress_getInitiatorResultMsg = ns0.IProgress_getInitiatorResponse_Dec().pyclass

IProgress_getCancelableRequestMsg = ns0.IProgress_getCancelable_Dec().pyclass

IProgress_getCancelableResultMsg = ns0.IProgress_getCancelableResponse_Dec().pyclass

IProgress_getPercentRequestMsg = ns0.IProgress_getPercent_Dec().pyclass

IProgress_getPercentResultMsg = ns0.IProgress_getPercentResponse_Dec().pyclass

IProgress_getTimeRemainingRequestMsg = ns0.IProgress_getTimeRemaining_Dec().pyclass

IProgress_getTimeRemainingResultMsg = ns0.IProgress_getTimeRemainingResponse_Dec().pyclass

IProgress_getCompletedRequestMsg = ns0.IProgress_getCompleted_Dec().pyclass

IProgress_getCompletedResultMsg = ns0.IProgress_getCompletedResponse_Dec().pyclass

IProgress_getCanceledRequestMsg = ns0.IProgress_getCanceled_Dec().pyclass

IProgress_getCanceledResultMsg = ns0.IProgress_getCanceledResponse_Dec().pyclass

IProgress_getResultCodeRequestMsg = ns0.IProgress_getResultCode_Dec().pyclass

IProgress_getResultCodeResultMsg = ns0.IProgress_getResultCodeResponse_Dec().pyclass

IProgress_getErrorInfoRequestMsg = ns0.IProgress_getErrorInfo_Dec().pyclass

IProgress_getErrorInfoResultMsg = ns0.IProgress_getErrorInfoResponse_Dec().pyclass

IProgress_getOperationCountRequestMsg = ns0.IProgress_getOperationCount_Dec().pyclass

IProgress_getOperationCountResultMsg = ns0.IProgress_getOperationCountResponse_Dec().pyclass

IProgress_getOperationRequestMsg = ns0.IProgress_getOperation_Dec().pyclass

IProgress_getOperationResultMsg = ns0.IProgress_getOperationResponse_Dec().pyclass

IProgress_getOperationDescriptionRequestMsg = ns0.IProgress_getOperationDescription_Dec().pyclass

IProgress_getOperationDescriptionResultMsg = ns0.IProgress_getOperationDescriptionResponse_Dec().pyclass

IProgress_getOperationPercentRequestMsg = ns0.IProgress_getOperationPercent_Dec().pyclass

IProgress_getOperationPercentResultMsg = ns0.IProgress_getOperationPercentResponse_Dec().pyclass

IProgress_getOperationWeightRequestMsg = ns0.IProgress_getOperationWeight_Dec().pyclass

IProgress_getOperationWeightResultMsg = ns0.IProgress_getOperationWeightResponse_Dec().pyclass

IProgress_getTimeoutRequestMsg = ns0.IProgress_getTimeout_Dec().pyclass

IProgress_getTimeoutResultMsg = ns0.IProgress_getTimeoutResponse_Dec().pyclass

IProgress_setTimeoutRequestMsg = ns0.IProgress_setTimeout_Dec().pyclass

IProgress_setTimeoutResultMsg = ns0.IProgress_setTimeoutResponse_Dec().pyclass

IProgress_setCurrentOperationProgressRequestMsg = ns0.IProgress_setCurrentOperationProgress_Dec().pyclass

IProgress_setCurrentOperationProgressResultMsg = ns0.IProgress_setCurrentOperationProgressResponse_Dec().pyclass

IProgress_setNextOperationRequestMsg = ns0.IProgress_setNextOperation_Dec().pyclass

IProgress_setNextOperationResultMsg = ns0.IProgress_setNextOperationResponse_Dec().pyclass

IProgress_waitForCompletionRequestMsg = ns0.IProgress_waitForCompletion_Dec().pyclass

IProgress_waitForCompletionResultMsg = ns0.IProgress_waitForCompletionResponse_Dec().pyclass

IProgress_waitForOperationCompletionRequestMsg = ns0.IProgress_waitForOperationCompletion_Dec().pyclass

IProgress_waitForOperationCompletionResultMsg = ns0.IProgress_waitForOperationCompletionResponse_Dec().pyclass

IProgress_waitForAsyncProgressCompletionRequestMsg = ns0.IProgress_waitForAsyncProgressCompletion_Dec().pyclass

IProgress_waitForAsyncProgressCompletionResultMsg = ns0.IProgress_waitForAsyncProgressCompletionResponse_Dec().pyclass

IProgress_cancelRequestMsg = ns0.IProgress_cancel_Dec().pyclass

IProgress_cancelResultMsg = ns0.IProgress_cancelResponse_Dec().pyclass

ISnapshot_getIdRequestMsg = ns0.ISnapshot_getId_Dec().pyclass

ISnapshot_getIdResultMsg = ns0.ISnapshot_getIdResponse_Dec().pyclass

ISnapshot_getNameRequestMsg = ns0.ISnapshot_getName_Dec().pyclass

ISnapshot_getNameResultMsg = ns0.ISnapshot_getNameResponse_Dec().pyclass

ISnapshot_setNameRequestMsg = ns0.ISnapshot_setName_Dec().pyclass

ISnapshot_setNameResultMsg = ns0.ISnapshot_setNameResponse_Dec().pyclass

ISnapshot_getDescriptionRequestMsg = ns0.ISnapshot_getDescription_Dec().pyclass

ISnapshot_getDescriptionResultMsg = ns0.ISnapshot_getDescriptionResponse_Dec().pyclass

ISnapshot_setDescriptionRequestMsg = ns0.ISnapshot_setDescription_Dec().pyclass

ISnapshot_setDescriptionResultMsg = ns0.ISnapshot_setDescriptionResponse_Dec().pyclass

ISnapshot_getTimeStampRequestMsg = ns0.ISnapshot_getTimeStamp_Dec().pyclass

ISnapshot_getTimeStampResultMsg = ns0.ISnapshot_getTimeStampResponse_Dec().pyclass

ISnapshot_getOnlineRequestMsg = ns0.ISnapshot_getOnline_Dec().pyclass

ISnapshot_getOnlineResultMsg = ns0.ISnapshot_getOnlineResponse_Dec().pyclass

ISnapshot_getMachineRequestMsg = ns0.ISnapshot_getMachine_Dec().pyclass

ISnapshot_getMachineResultMsg = ns0.ISnapshot_getMachineResponse_Dec().pyclass

ISnapshot_getParentRequestMsg = ns0.ISnapshot_getParent_Dec().pyclass

ISnapshot_getParentResultMsg = ns0.ISnapshot_getParentResponse_Dec().pyclass

ISnapshot_getChildrenRequestMsg = ns0.ISnapshot_getChildren_Dec().pyclass

ISnapshot_getChildrenResultMsg = ns0.ISnapshot_getChildrenResponse_Dec().pyclass

ISnapshot_getChildrenCountRequestMsg = ns0.ISnapshot_getChildrenCount_Dec().pyclass

ISnapshot_getChildrenCountResultMsg = ns0.ISnapshot_getChildrenCountResponse_Dec().pyclass

IMedium_getIdRequestMsg = ns0.IMedium_getId_Dec().pyclass

IMedium_getIdResultMsg = ns0.IMedium_getIdResponse_Dec().pyclass

IMedium_getDescriptionRequestMsg = ns0.IMedium_getDescription_Dec().pyclass

IMedium_getDescriptionResultMsg = ns0.IMedium_getDescriptionResponse_Dec().pyclass

IMedium_setDescriptionRequestMsg = ns0.IMedium_setDescription_Dec().pyclass

IMedium_setDescriptionResultMsg = ns0.IMedium_setDescriptionResponse_Dec().pyclass

IMedium_getStateRequestMsg = ns0.IMedium_getState_Dec().pyclass

IMedium_getStateResultMsg = ns0.IMedium_getStateResponse_Dec().pyclass

IMedium_getVariantRequestMsg = ns0.IMedium_getVariant_Dec().pyclass

IMedium_getVariantResultMsg = ns0.IMedium_getVariantResponse_Dec().pyclass

IMedium_getLocationRequestMsg = ns0.IMedium_getLocation_Dec().pyclass

IMedium_getLocationResultMsg = ns0.IMedium_getLocationResponse_Dec().pyclass

IMedium_setLocationRequestMsg = ns0.IMedium_setLocation_Dec().pyclass

IMedium_setLocationResultMsg = ns0.IMedium_setLocationResponse_Dec().pyclass

IMedium_getNameRequestMsg = ns0.IMedium_getName_Dec().pyclass

IMedium_getNameResultMsg = ns0.IMedium_getNameResponse_Dec().pyclass

IMedium_getDeviceTypeRequestMsg = ns0.IMedium_getDeviceType_Dec().pyclass

IMedium_getDeviceTypeResultMsg = ns0.IMedium_getDeviceTypeResponse_Dec().pyclass

IMedium_getHostDriveRequestMsg = ns0.IMedium_getHostDrive_Dec().pyclass

IMedium_getHostDriveResultMsg = ns0.IMedium_getHostDriveResponse_Dec().pyclass

IMedium_getSizeRequestMsg = ns0.IMedium_getSize_Dec().pyclass

IMedium_getSizeResultMsg = ns0.IMedium_getSizeResponse_Dec().pyclass

IMedium_getFormatRequestMsg = ns0.IMedium_getFormat_Dec().pyclass

IMedium_getFormatResultMsg = ns0.IMedium_getFormatResponse_Dec().pyclass

IMedium_getMediumFormatRequestMsg = ns0.IMedium_getMediumFormat_Dec().pyclass

IMedium_getMediumFormatResultMsg = ns0.IMedium_getMediumFormatResponse_Dec().pyclass

IMedium_getTypeRequestMsg = ns0.IMedium_getType_Dec().pyclass

IMedium_getTypeResultMsg = ns0.IMedium_getTypeResponse_Dec().pyclass

IMedium_setTypeRequestMsg = ns0.IMedium_setType_Dec().pyclass

IMedium_setTypeResultMsg = ns0.IMedium_setTypeResponse_Dec().pyclass

IMedium_getAllowedTypesRequestMsg = ns0.IMedium_getAllowedTypes_Dec().pyclass

IMedium_getAllowedTypesResultMsg = ns0.IMedium_getAllowedTypesResponse_Dec().pyclass

IMedium_getParentRequestMsg = ns0.IMedium_getParent_Dec().pyclass

IMedium_getParentResultMsg = ns0.IMedium_getParentResponse_Dec().pyclass

IMedium_getChildrenRequestMsg = ns0.IMedium_getChildren_Dec().pyclass

IMedium_getChildrenResultMsg = ns0.IMedium_getChildrenResponse_Dec().pyclass

IMedium_getBaseRequestMsg = ns0.IMedium_getBase_Dec().pyclass

IMedium_getBaseResultMsg = ns0.IMedium_getBaseResponse_Dec().pyclass

IMedium_getReadOnlyRequestMsg = ns0.IMedium_getReadOnly_Dec().pyclass

IMedium_getReadOnlyResultMsg = ns0.IMedium_getReadOnlyResponse_Dec().pyclass

IMedium_getLogicalSizeRequestMsg = ns0.IMedium_getLogicalSize_Dec().pyclass

IMedium_getLogicalSizeResultMsg = ns0.IMedium_getLogicalSizeResponse_Dec().pyclass

IMedium_getAutoResetRequestMsg = ns0.IMedium_getAutoReset_Dec().pyclass

IMedium_getAutoResetResultMsg = ns0.IMedium_getAutoResetResponse_Dec().pyclass

IMedium_setAutoResetRequestMsg = ns0.IMedium_setAutoReset_Dec().pyclass

IMedium_setAutoResetResultMsg = ns0.IMedium_setAutoResetResponse_Dec().pyclass

IMedium_getLastAccessErrorRequestMsg = ns0.IMedium_getLastAccessError_Dec().pyclass

IMedium_getLastAccessErrorResultMsg = ns0.IMedium_getLastAccessErrorResponse_Dec().pyclass

IMedium_getMachineIdsRequestMsg = ns0.IMedium_getMachineIds_Dec().pyclass

IMedium_getMachineIdsResultMsg = ns0.IMedium_getMachineIdsResponse_Dec().pyclass

IMedium_setIDsRequestMsg = ns0.IMedium_setIDs_Dec().pyclass

IMedium_setIDsResultMsg = ns0.IMedium_setIDsResponse_Dec().pyclass

IMedium_refreshStateRequestMsg = ns0.IMedium_refreshState_Dec().pyclass

IMedium_refreshStateResultMsg = ns0.IMedium_refreshStateResponse_Dec().pyclass

IMedium_getSnapshotIdsRequestMsg = ns0.IMedium_getSnapshotIds_Dec().pyclass

IMedium_getSnapshotIdsResultMsg = ns0.IMedium_getSnapshotIdsResponse_Dec().pyclass

IMedium_lockReadRequestMsg = ns0.IMedium_lockRead_Dec().pyclass

IMedium_lockReadResultMsg = ns0.IMedium_lockReadResponse_Dec().pyclass

IMedium_unlockReadRequestMsg = ns0.IMedium_unlockRead_Dec().pyclass

IMedium_unlockReadResultMsg = ns0.IMedium_unlockReadResponse_Dec().pyclass

IMedium_lockWriteRequestMsg = ns0.IMedium_lockWrite_Dec().pyclass

IMedium_lockWriteResultMsg = ns0.IMedium_lockWriteResponse_Dec().pyclass

IMedium_unlockWriteRequestMsg = ns0.IMedium_unlockWrite_Dec().pyclass

IMedium_unlockWriteResultMsg = ns0.IMedium_unlockWriteResponse_Dec().pyclass

IMedium_closeRequestMsg = ns0.IMedium_close_Dec().pyclass

IMedium_closeResultMsg = ns0.IMedium_closeResponse_Dec().pyclass

IMedium_getPropertyRequestMsg = ns0.IMedium_getProperty_Dec().pyclass

IMedium_getPropertyResultMsg = ns0.IMedium_getPropertyResponse_Dec().pyclass

IMedium_setPropertyRequestMsg = ns0.IMedium_setProperty_Dec().pyclass

IMedium_setPropertyResultMsg = ns0.IMedium_setPropertyResponse_Dec().pyclass

IMedium_getPropertiesRequestMsg = ns0.IMedium_getProperties_Dec().pyclass

IMedium_getPropertiesResultMsg = ns0.IMedium_getPropertiesResponse_Dec().pyclass

IMedium_setPropertiesRequestMsg = ns0.IMedium_setProperties_Dec().pyclass

IMedium_setPropertiesResultMsg = ns0.IMedium_setPropertiesResponse_Dec().pyclass

IMedium_createBaseStorageRequestMsg = ns0.IMedium_createBaseStorage_Dec().pyclass

IMedium_createBaseStorageResultMsg = ns0.IMedium_createBaseStorageResponse_Dec().pyclass

IMedium_deleteStorageRequestMsg = ns0.IMedium_deleteStorage_Dec().pyclass

IMedium_deleteStorageResultMsg = ns0.IMedium_deleteStorageResponse_Dec().pyclass

IMedium_createDiffStorageRequestMsg = ns0.IMedium_createDiffStorage_Dec().pyclass

IMedium_createDiffStorageResultMsg = ns0.IMedium_createDiffStorageResponse_Dec().pyclass

IMedium_mergeToRequestMsg = ns0.IMedium_mergeTo_Dec().pyclass

IMedium_mergeToResultMsg = ns0.IMedium_mergeToResponse_Dec().pyclass

IMedium_cloneToRequestMsg = ns0.IMedium_cloneTo_Dec().pyclass

IMedium_cloneToResultMsg = ns0.IMedium_cloneToResponse_Dec().pyclass

IMedium_compactRequestMsg = ns0.IMedium_compact_Dec().pyclass

IMedium_compactResultMsg = ns0.IMedium_compactResponse_Dec().pyclass

IMedium_resizeRequestMsg = ns0.IMedium_resize_Dec().pyclass

IMedium_resizeResultMsg = ns0.IMedium_resizeResponse_Dec().pyclass

IMedium_resetRequestMsg = ns0.IMedium_reset_Dec().pyclass

IMedium_resetResultMsg = ns0.IMedium_resetResponse_Dec().pyclass

IMediumFormat_getIdRequestMsg = ns0.IMediumFormat_getId_Dec().pyclass

IMediumFormat_getIdResultMsg = ns0.IMediumFormat_getIdResponse_Dec().pyclass

IMediumFormat_getNameRequestMsg = ns0.IMediumFormat_getName_Dec().pyclass

IMediumFormat_getNameResultMsg = ns0.IMediumFormat_getNameResponse_Dec().pyclass

IMediumFormat_getCapabilitiesRequestMsg = ns0.IMediumFormat_getCapabilities_Dec().pyclass

IMediumFormat_getCapabilitiesResultMsg = ns0.IMediumFormat_getCapabilitiesResponse_Dec().pyclass

IMediumFormat_describeFileExtensionsRequestMsg = ns0.IMediumFormat_describeFileExtensions_Dec().pyclass

IMediumFormat_describeFileExtensionsResultMsg = ns0.IMediumFormat_describeFileExtensionsResponse_Dec().pyclass

IMediumFormat_describePropertiesRequestMsg = ns0.IMediumFormat_describeProperties_Dec().pyclass

IMediumFormat_describePropertiesResultMsg = ns0.IMediumFormat_describePropertiesResponse_Dec().pyclass

IKeyboard_getEventSourceRequestMsg = ns0.IKeyboard_getEventSource_Dec().pyclass

IKeyboard_getEventSourceResultMsg = ns0.IKeyboard_getEventSourceResponse_Dec().pyclass

IKeyboard_putScancodeRequestMsg = ns0.IKeyboard_putScancode_Dec().pyclass

IKeyboard_putScancodeResultMsg = ns0.IKeyboard_putScancodeResponse_Dec().pyclass

IKeyboard_putScancodesRequestMsg = ns0.IKeyboard_putScancodes_Dec().pyclass

IKeyboard_putScancodesResultMsg = ns0.IKeyboard_putScancodesResponse_Dec().pyclass

IKeyboard_putCADRequestMsg = ns0.IKeyboard_putCAD_Dec().pyclass

IKeyboard_putCADResultMsg = ns0.IKeyboard_putCADResponse_Dec().pyclass

IMouse_getAbsoluteSupportedRequestMsg = ns0.IMouse_getAbsoluteSupported_Dec().pyclass

IMouse_getAbsoluteSupportedResultMsg = ns0.IMouse_getAbsoluteSupportedResponse_Dec().pyclass

IMouse_getRelativeSupportedRequestMsg = ns0.IMouse_getRelativeSupported_Dec().pyclass

IMouse_getRelativeSupportedResultMsg = ns0.IMouse_getRelativeSupportedResponse_Dec().pyclass

IMouse_getNeedsHostCursorRequestMsg = ns0.IMouse_getNeedsHostCursor_Dec().pyclass

IMouse_getNeedsHostCursorResultMsg = ns0.IMouse_getNeedsHostCursorResponse_Dec().pyclass

IMouse_getEventSourceRequestMsg = ns0.IMouse_getEventSource_Dec().pyclass

IMouse_getEventSourceResultMsg = ns0.IMouse_getEventSourceResponse_Dec().pyclass

IMouse_putMouseEventRequestMsg = ns0.IMouse_putMouseEvent_Dec().pyclass

IMouse_putMouseEventResultMsg = ns0.IMouse_putMouseEventResponse_Dec().pyclass

IMouse_putMouseEventAbsoluteRequestMsg = ns0.IMouse_putMouseEventAbsolute_Dec().pyclass

IMouse_putMouseEventAbsoluteResultMsg = ns0.IMouse_putMouseEventAbsoluteResponse_Dec().pyclass

IDisplay_getScreenResolutionRequestMsg = ns0.IDisplay_getScreenResolution_Dec().pyclass

IDisplay_getScreenResolutionResultMsg = ns0.IDisplay_getScreenResolutionResponse_Dec().pyclass

IDisplay_setVideoModeHintRequestMsg = ns0.IDisplay_setVideoModeHint_Dec().pyclass

IDisplay_setVideoModeHintResultMsg = ns0.IDisplay_setVideoModeHintResponse_Dec().pyclass

IDisplay_setSeamlessModeRequestMsg = ns0.IDisplay_setSeamlessMode_Dec().pyclass

IDisplay_setSeamlessModeResultMsg = ns0.IDisplay_setSeamlessModeResponse_Dec().pyclass

IDisplay_takeScreenShotToArrayRequestMsg = ns0.IDisplay_takeScreenShotToArray_Dec().pyclass

IDisplay_takeScreenShotToArrayResultMsg = ns0.IDisplay_takeScreenShotToArrayResponse_Dec().pyclass

IDisplay_takeScreenShotPNGToArrayRequestMsg = ns0.IDisplay_takeScreenShotPNGToArray_Dec().pyclass

IDisplay_takeScreenShotPNGToArrayResultMsg = ns0.IDisplay_takeScreenShotPNGToArrayResponse_Dec().pyclass

IDisplay_invalidateAndUpdateRequestMsg = ns0.IDisplay_invalidateAndUpdate_Dec().pyclass

IDisplay_invalidateAndUpdateResultMsg = ns0.IDisplay_invalidateAndUpdateResponse_Dec().pyclass

IDisplay_resizeCompletedRequestMsg = ns0.IDisplay_resizeCompleted_Dec().pyclass

IDisplay_resizeCompletedResultMsg = ns0.IDisplay_resizeCompletedResponse_Dec().pyclass

INetworkAdapter_getAdapterTypeRequestMsg = ns0.INetworkAdapter_getAdapterType_Dec().pyclass

INetworkAdapter_getAdapterTypeResultMsg = ns0.INetworkAdapter_getAdapterTypeResponse_Dec().pyclass

INetworkAdapter_setAdapterTypeRequestMsg = ns0.INetworkAdapter_setAdapterType_Dec().pyclass

INetworkAdapter_setAdapterTypeResultMsg = ns0.INetworkAdapter_setAdapterTypeResponse_Dec().pyclass

INetworkAdapter_getSlotRequestMsg = ns0.INetworkAdapter_getSlot_Dec().pyclass

INetworkAdapter_getSlotResultMsg = ns0.INetworkAdapter_getSlotResponse_Dec().pyclass

INetworkAdapter_getEnabledRequestMsg = ns0.INetworkAdapter_getEnabled_Dec().pyclass

INetworkAdapter_getEnabledResultMsg = ns0.INetworkAdapter_getEnabledResponse_Dec().pyclass

INetworkAdapter_setEnabledRequestMsg = ns0.INetworkAdapter_setEnabled_Dec().pyclass

INetworkAdapter_setEnabledResultMsg = ns0.INetworkAdapter_setEnabledResponse_Dec().pyclass

INetworkAdapter_getMACAddressRequestMsg = ns0.INetworkAdapter_getMACAddress_Dec().pyclass

INetworkAdapter_getMACAddressResultMsg = ns0.INetworkAdapter_getMACAddressResponse_Dec().pyclass

INetworkAdapter_setMACAddressRequestMsg = ns0.INetworkAdapter_setMACAddress_Dec().pyclass

INetworkAdapter_setMACAddressResultMsg = ns0.INetworkAdapter_setMACAddressResponse_Dec().pyclass

INetworkAdapter_getAttachmentTypeRequestMsg = ns0.INetworkAdapter_getAttachmentType_Dec().pyclass

INetworkAdapter_getAttachmentTypeResultMsg = ns0.INetworkAdapter_getAttachmentTypeResponse_Dec().pyclass

INetworkAdapter_setAttachmentTypeRequestMsg = ns0.INetworkAdapter_setAttachmentType_Dec().pyclass

INetworkAdapter_setAttachmentTypeResultMsg = ns0.INetworkAdapter_setAttachmentTypeResponse_Dec().pyclass

INetworkAdapter_getBridgedInterfaceRequestMsg = ns0.INetworkAdapter_getBridgedInterface_Dec().pyclass

INetworkAdapter_getBridgedInterfaceResultMsg = ns0.INetworkAdapter_getBridgedInterfaceResponse_Dec().pyclass

INetworkAdapter_setBridgedInterfaceRequestMsg = ns0.INetworkAdapter_setBridgedInterface_Dec().pyclass

INetworkAdapter_setBridgedInterfaceResultMsg = ns0.INetworkAdapter_setBridgedInterfaceResponse_Dec().pyclass

INetworkAdapter_getHostOnlyInterfaceRequestMsg = ns0.INetworkAdapter_getHostOnlyInterface_Dec().pyclass

INetworkAdapter_getHostOnlyInterfaceResultMsg = ns0.INetworkAdapter_getHostOnlyInterfaceResponse_Dec().pyclass

INetworkAdapter_setHostOnlyInterfaceRequestMsg = ns0.INetworkAdapter_setHostOnlyInterface_Dec().pyclass

INetworkAdapter_setHostOnlyInterfaceResultMsg = ns0.INetworkAdapter_setHostOnlyInterfaceResponse_Dec().pyclass

INetworkAdapter_getInternalNetworkRequestMsg = ns0.INetworkAdapter_getInternalNetwork_Dec().pyclass

INetworkAdapter_getInternalNetworkResultMsg = ns0.INetworkAdapter_getInternalNetworkResponse_Dec().pyclass

INetworkAdapter_setInternalNetworkRequestMsg = ns0.INetworkAdapter_setInternalNetwork_Dec().pyclass

INetworkAdapter_setInternalNetworkResultMsg = ns0.INetworkAdapter_setInternalNetworkResponse_Dec().pyclass

INetworkAdapter_getNATNetworkRequestMsg = ns0.INetworkAdapter_getNATNetwork_Dec().pyclass

INetworkAdapter_getNATNetworkResultMsg = ns0.INetworkAdapter_getNATNetworkResponse_Dec().pyclass

INetworkAdapter_setNATNetworkRequestMsg = ns0.INetworkAdapter_setNATNetwork_Dec().pyclass

INetworkAdapter_setNATNetworkResultMsg = ns0.INetworkAdapter_setNATNetworkResponse_Dec().pyclass

INetworkAdapter_getGenericDriverRequestMsg = ns0.INetworkAdapter_getGenericDriver_Dec().pyclass

INetworkAdapter_getGenericDriverResultMsg = ns0.INetworkAdapter_getGenericDriverResponse_Dec().pyclass

INetworkAdapter_setGenericDriverRequestMsg = ns0.INetworkAdapter_setGenericDriver_Dec().pyclass

INetworkAdapter_setGenericDriverResultMsg = ns0.INetworkAdapter_setGenericDriverResponse_Dec().pyclass

INetworkAdapter_getCableConnectedRequestMsg = ns0.INetworkAdapter_getCableConnected_Dec().pyclass

INetworkAdapter_getCableConnectedResultMsg = ns0.INetworkAdapter_getCableConnectedResponse_Dec().pyclass

INetworkAdapter_setCableConnectedRequestMsg = ns0.INetworkAdapter_setCableConnected_Dec().pyclass

INetworkAdapter_setCableConnectedResultMsg = ns0.INetworkAdapter_setCableConnectedResponse_Dec().pyclass

INetworkAdapter_getLineSpeedRequestMsg = ns0.INetworkAdapter_getLineSpeed_Dec().pyclass

INetworkAdapter_getLineSpeedResultMsg = ns0.INetworkAdapter_getLineSpeedResponse_Dec().pyclass

INetworkAdapter_setLineSpeedRequestMsg = ns0.INetworkAdapter_setLineSpeed_Dec().pyclass

INetworkAdapter_setLineSpeedResultMsg = ns0.INetworkAdapter_setLineSpeedResponse_Dec().pyclass

INetworkAdapter_getPromiscModePolicyRequestMsg = ns0.INetworkAdapter_getPromiscModePolicy_Dec().pyclass

INetworkAdapter_getPromiscModePolicyResultMsg = ns0.INetworkAdapter_getPromiscModePolicyResponse_Dec().pyclass

INetworkAdapter_setPromiscModePolicyRequestMsg = ns0.INetworkAdapter_setPromiscModePolicy_Dec().pyclass

INetworkAdapter_setPromiscModePolicyResultMsg = ns0.INetworkAdapter_setPromiscModePolicyResponse_Dec().pyclass

INetworkAdapter_getTraceEnabledRequestMsg = ns0.INetworkAdapter_getTraceEnabled_Dec().pyclass

INetworkAdapter_getTraceEnabledResultMsg = ns0.INetworkAdapter_getTraceEnabledResponse_Dec().pyclass

INetworkAdapter_setTraceEnabledRequestMsg = ns0.INetworkAdapter_setTraceEnabled_Dec().pyclass

INetworkAdapter_setTraceEnabledResultMsg = ns0.INetworkAdapter_setTraceEnabledResponse_Dec().pyclass

INetworkAdapter_getTraceFileRequestMsg = ns0.INetworkAdapter_getTraceFile_Dec().pyclass

INetworkAdapter_getTraceFileResultMsg = ns0.INetworkAdapter_getTraceFileResponse_Dec().pyclass

INetworkAdapter_setTraceFileRequestMsg = ns0.INetworkAdapter_setTraceFile_Dec().pyclass

INetworkAdapter_setTraceFileResultMsg = ns0.INetworkAdapter_setTraceFileResponse_Dec().pyclass

INetworkAdapter_getNatDriverRequestMsg = ns0.INetworkAdapter_getNatDriver_Dec().pyclass

INetworkAdapter_getNatDriverResultMsg = ns0.INetworkAdapter_getNatDriverResponse_Dec().pyclass

INetworkAdapter_getBootPriorityRequestMsg = ns0.INetworkAdapter_getBootPriority_Dec().pyclass

INetworkAdapter_getBootPriorityResultMsg = ns0.INetworkAdapter_getBootPriorityResponse_Dec().pyclass

INetworkAdapter_setBootPriorityRequestMsg = ns0.INetworkAdapter_setBootPriority_Dec().pyclass

INetworkAdapter_setBootPriorityResultMsg = ns0.INetworkAdapter_setBootPriorityResponse_Dec().pyclass

INetworkAdapter_getBandwidthGroupRequestMsg = ns0.INetworkAdapter_getBandwidthGroup_Dec().pyclass

INetworkAdapter_getBandwidthGroupResultMsg = ns0.INetworkAdapter_getBandwidthGroupResponse_Dec().pyclass

INetworkAdapter_setBandwidthGroupRequestMsg = ns0.INetworkAdapter_setBandwidthGroup_Dec().pyclass

INetworkAdapter_setBandwidthGroupResultMsg = ns0.INetworkAdapter_setBandwidthGroupResponse_Dec().pyclass

INetworkAdapter_getPropertyRequestMsg = ns0.INetworkAdapter_getProperty_Dec().pyclass

INetworkAdapter_getPropertyResultMsg = ns0.INetworkAdapter_getPropertyResponse_Dec().pyclass

INetworkAdapter_setPropertyRequestMsg = ns0.INetworkAdapter_setProperty_Dec().pyclass

INetworkAdapter_setPropertyResultMsg = ns0.INetworkAdapter_setPropertyResponse_Dec().pyclass

INetworkAdapter_getPropertiesRequestMsg = ns0.INetworkAdapter_getProperties_Dec().pyclass

INetworkAdapter_getPropertiesResultMsg = ns0.INetworkAdapter_getPropertiesResponse_Dec().pyclass

ISerialPort_getSlotRequestMsg = ns0.ISerialPort_getSlot_Dec().pyclass

ISerialPort_getSlotResultMsg = ns0.ISerialPort_getSlotResponse_Dec().pyclass

ISerialPort_getEnabledRequestMsg = ns0.ISerialPort_getEnabled_Dec().pyclass

ISerialPort_getEnabledResultMsg = ns0.ISerialPort_getEnabledResponse_Dec().pyclass

ISerialPort_setEnabledRequestMsg = ns0.ISerialPort_setEnabled_Dec().pyclass

ISerialPort_setEnabledResultMsg = ns0.ISerialPort_setEnabledResponse_Dec().pyclass

ISerialPort_getIOBaseRequestMsg = ns0.ISerialPort_getIOBase_Dec().pyclass

ISerialPort_getIOBaseResultMsg = ns0.ISerialPort_getIOBaseResponse_Dec().pyclass

ISerialPort_setIOBaseRequestMsg = ns0.ISerialPort_setIOBase_Dec().pyclass

ISerialPort_setIOBaseResultMsg = ns0.ISerialPort_setIOBaseResponse_Dec().pyclass

ISerialPort_getIRQRequestMsg = ns0.ISerialPort_getIRQ_Dec().pyclass

ISerialPort_getIRQResultMsg = ns0.ISerialPort_getIRQResponse_Dec().pyclass

ISerialPort_setIRQRequestMsg = ns0.ISerialPort_setIRQ_Dec().pyclass

ISerialPort_setIRQResultMsg = ns0.ISerialPort_setIRQResponse_Dec().pyclass

ISerialPort_getHostModeRequestMsg = ns0.ISerialPort_getHostMode_Dec().pyclass

ISerialPort_getHostModeResultMsg = ns0.ISerialPort_getHostModeResponse_Dec().pyclass

ISerialPort_setHostModeRequestMsg = ns0.ISerialPort_setHostMode_Dec().pyclass

ISerialPort_setHostModeResultMsg = ns0.ISerialPort_setHostModeResponse_Dec().pyclass

ISerialPort_getServerRequestMsg = ns0.ISerialPort_getServer_Dec().pyclass

ISerialPort_getServerResultMsg = ns0.ISerialPort_getServerResponse_Dec().pyclass

ISerialPort_setServerRequestMsg = ns0.ISerialPort_setServer_Dec().pyclass

ISerialPort_setServerResultMsg = ns0.ISerialPort_setServerResponse_Dec().pyclass

ISerialPort_getPathRequestMsg = ns0.ISerialPort_getPath_Dec().pyclass

ISerialPort_getPathResultMsg = ns0.ISerialPort_getPathResponse_Dec().pyclass

ISerialPort_setPathRequestMsg = ns0.ISerialPort_setPath_Dec().pyclass

ISerialPort_setPathResultMsg = ns0.ISerialPort_setPathResponse_Dec().pyclass

IParallelPort_getSlotRequestMsg = ns0.IParallelPort_getSlot_Dec().pyclass

IParallelPort_getSlotResultMsg = ns0.IParallelPort_getSlotResponse_Dec().pyclass

IParallelPort_getEnabledRequestMsg = ns0.IParallelPort_getEnabled_Dec().pyclass

IParallelPort_getEnabledResultMsg = ns0.IParallelPort_getEnabledResponse_Dec().pyclass

IParallelPort_setEnabledRequestMsg = ns0.IParallelPort_setEnabled_Dec().pyclass

IParallelPort_setEnabledResultMsg = ns0.IParallelPort_setEnabledResponse_Dec().pyclass

IParallelPort_getIOBaseRequestMsg = ns0.IParallelPort_getIOBase_Dec().pyclass

IParallelPort_getIOBaseResultMsg = ns0.IParallelPort_getIOBaseResponse_Dec().pyclass

IParallelPort_setIOBaseRequestMsg = ns0.IParallelPort_setIOBase_Dec().pyclass

IParallelPort_setIOBaseResultMsg = ns0.IParallelPort_setIOBaseResponse_Dec().pyclass

IParallelPort_getIRQRequestMsg = ns0.IParallelPort_getIRQ_Dec().pyclass

IParallelPort_getIRQResultMsg = ns0.IParallelPort_getIRQResponse_Dec().pyclass

IParallelPort_setIRQRequestMsg = ns0.IParallelPort_setIRQ_Dec().pyclass

IParallelPort_setIRQResultMsg = ns0.IParallelPort_setIRQResponse_Dec().pyclass

IParallelPort_getPathRequestMsg = ns0.IParallelPort_getPath_Dec().pyclass

IParallelPort_getPathResultMsg = ns0.IParallelPort_getPathResponse_Dec().pyclass

IParallelPort_setPathRequestMsg = ns0.IParallelPort_setPath_Dec().pyclass

IParallelPort_setPathResultMsg = ns0.IParallelPort_setPathResponse_Dec().pyclass

IUSBController_getEnabledRequestMsg = ns0.IUSBController_getEnabled_Dec().pyclass

IUSBController_getEnabledResultMsg = ns0.IUSBController_getEnabledResponse_Dec().pyclass

IUSBController_setEnabledRequestMsg = ns0.IUSBController_setEnabled_Dec().pyclass

IUSBController_setEnabledResultMsg = ns0.IUSBController_setEnabledResponse_Dec().pyclass

IUSBController_getEnabledEhciRequestMsg = ns0.IUSBController_getEnabledEhci_Dec().pyclass

IUSBController_getEnabledEhciResultMsg = ns0.IUSBController_getEnabledEhciResponse_Dec().pyclass

IUSBController_setEnabledEhciRequestMsg = ns0.IUSBController_setEnabledEhci_Dec().pyclass

IUSBController_setEnabledEhciResultMsg = ns0.IUSBController_setEnabledEhciResponse_Dec().pyclass

IUSBController_getProxyAvailableRequestMsg = ns0.IUSBController_getProxyAvailable_Dec().pyclass

IUSBController_getProxyAvailableResultMsg = ns0.IUSBController_getProxyAvailableResponse_Dec().pyclass

IUSBController_getUSBStandardRequestMsg = ns0.IUSBController_getUSBStandard_Dec().pyclass

IUSBController_getUSBStandardResultMsg = ns0.IUSBController_getUSBStandardResponse_Dec().pyclass

IUSBController_getDeviceFiltersRequestMsg = ns0.IUSBController_getDeviceFilters_Dec().pyclass

IUSBController_getDeviceFiltersResultMsg = ns0.IUSBController_getDeviceFiltersResponse_Dec().pyclass

IUSBController_createDeviceFilterRequestMsg = ns0.IUSBController_createDeviceFilter_Dec().pyclass

IUSBController_createDeviceFilterResultMsg = ns0.IUSBController_createDeviceFilterResponse_Dec().pyclass

IUSBController_insertDeviceFilterRequestMsg = ns0.IUSBController_insertDeviceFilter_Dec().pyclass

IUSBController_insertDeviceFilterResultMsg = ns0.IUSBController_insertDeviceFilterResponse_Dec().pyclass

IUSBController_removeDeviceFilterRequestMsg = ns0.IUSBController_removeDeviceFilter_Dec().pyclass

IUSBController_removeDeviceFilterResultMsg = ns0.IUSBController_removeDeviceFilterResponse_Dec().pyclass

IUSBDevice_getIdRequestMsg = ns0.IUSBDevice_getId_Dec().pyclass

IUSBDevice_getIdResultMsg = ns0.IUSBDevice_getIdResponse_Dec().pyclass

IUSBDevice_getVendorIdRequestMsg = ns0.IUSBDevice_getVendorId_Dec().pyclass

IUSBDevice_getVendorIdResultMsg = ns0.IUSBDevice_getVendorIdResponse_Dec().pyclass

IUSBDevice_getProductIdRequestMsg = ns0.IUSBDevice_getProductId_Dec().pyclass

IUSBDevice_getProductIdResultMsg = ns0.IUSBDevice_getProductIdResponse_Dec().pyclass

IUSBDevice_getRevisionRequestMsg = ns0.IUSBDevice_getRevision_Dec().pyclass

IUSBDevice_getRevisionResultMsg = ns0.IUSBDevice_getRevisionResponse_Dec().pyclass

IUSBDevice_getManufacturerRequestMsg = ns0.IUSBDevice_getManufacturer_Dec().pyclass

IUSBDevice_getManufacturerResultMsg = ns0.IUSBDevice_getManufacturerResponse_Dec().pyclass

IUSBDevice_getProductRequestMsg = ns0.IUSBDevice_getProduct_Dec().pyclass

IUSBDevice_getProductResultMsg = ns0.IUSBDevice_getProductResponse_Dec().pyclass

IUSBDevice_getSerialNumberRequestMsg = ns0.IUSBDevice_getSerialNumber_Dec().pyclass

IUSBDevice_getSerialNumberResultMsg = ns0.IUSBDevice_getSerialNumberResponse_Dec().pyclass

IUSBDevice_getAddressRequestMsg = ns0.IUSBDevice_getAddress_Dec().pyclass

IUSBDevice_getAddressResultMsg = ns0.IUSBDevice_getAddressResponse_Dec().pyclass

IUSBDevice_getPortRequestMsg = ns0.IUSBDevice_getPort_Dec().pyclass

IUSBDevice_getPortResultMsg = ns0.IUSBDevice_getPortResponse_Dec().pyclass

IUSBDevice_getVersionRequestMsg = ns0.IUSBDevice_getVersion_Dec().pyclass

IUSBDevice_getVersionResultMsg = ns0.IUSBDevice_getVersionResponse_Dec().pyclass

IUSBDevice_getPortVersionRequestMsg = ns0.IUSBDevice_getPortVersion_Dec().pyclass

IUSBDevice_getPortVersionResultMsg = ns0.IUSBDevice_getPortVersionResponse_Dec().pyclass

IUSBDevice_getRemoteRequestMsg = ns0.IUSBDevice_getRemote_Dec().pyclass

IUSBDevice_getRemoteResultMsg = ns0.IUSBDevice_getRemoteResponse_Dec().pyclass

IUSBDeviceFilter_getNameRequestMsg = ns0.IUSBDeviceFilter_getName_Dec().pyclass

IUSBDeviceFilter_getNameResultMsg = ns0.IUSBDeviceFilter_getNameResponse_Dec().pyclass

IUSBDeviceFilter_setNameRequestMsg = ns0.IUSBDeviceFilter_setName_Dec().pyclass

IUSBDeviceFilter_setNameResultMsg = ns0.IUSBDeviceFilter_setNameResponse_Dec().pyclass

IUSBDeviceFilter_getActiveRequestMsg = ns0.IUSBDeviceFilter_getActive_Dec().pyclass

IUSBDeviceFilter_getActiveResultMsg = ns0.IUSBDeviceFilter_getActiveResponse_Dec().pyclass

IUSBDeviceFilter_setActiveRequestMsg = ns0.IUSBDeviceFilter_setActive_Dec().pyclass

IUSBDeviceFilter_setActiveResultMsg = ns0.IUSBDeviceFilter_setActiveResponse_Dec().pyclass

IUSBDeviceFilter_getVendorIdRequestMsg = ns0.IUSBDeviceFilter_getVendorId_Dec().pyclass

IUSBDeviceFilter_getVendorIdResultMsg = ns0.IUSBDeviceFilter_getVendorIdResponse_Dec().pyclass

IUSBDeviceFilter_setVendorIdRequestMsg = ns0.IUSBDeviceFilter_setVendorId_Dec().pyclass

IUSBDeviceFilter_setVendorIdResultMsg = ns0.IUSBDeviceFilter_setVendorIdResponse_Dec().pyclass

IUSBDeviceFilter_getProductIdRequestMsg = ns0.IUSBDeviceFilter_getProductId_Dec().pyclass

IUSBDeviceFilter_getProductIdResultMsg = ns0.IUSBDeviceFilter_getProductIdResponse_Dec().pyclass

IUSBDeviceFilter_setProductIdRequestMsg = ns0.IUSBDeviceFilter_setProductId_Dec().pyclass

IUSBDeviceFilter_setProductIdResultMsg = ns0.IUSBDeviceFilter_setProductIdResponse_Dec().pyclass

IUSBDeviceFilter_getRevisionRequestMsg = ns0.IUSBDeviceFilter_getRevision_Dec().pyclass

IUSBDeviceFilter_getRevisionResultMsg = ns0.IUSBDeviceFilter_getRevisionResponse_Dec().pyclass

IUSBDeviceFilter_setRevisionRequestMsg = ns0.IUSBDeviceFilter_setRevision_Dec().pyclass

IUSBDeviceFilter_setRevisionResultMsg = ns0.IUSBDeviceFilter_setRevisionResponse_Dec().pyclass

IUSBDeviceFilter_getManufacturerRequestMsg = ns0.IUSBDeviceFilter_getManufacturer_Dec().pyclass

IUSBDeviceFilter_getManufacturerResultMsg = ns0.IUSBDeviceFilter_getManufacturerResponse_Dec().pyclass

IUSBDeviceFilter_setManufacturerRequestMsg = ns0.IUSBDeviceFilter_setManufacturer_Dec().pyclass

IUSBDeviceFilter_setManufacturerResultMsg = ns0.IUSBDeviceFilter_setManufacturerResponse_Dec().pyclass

IUSBDeviceFilter_getProductRequestMsg = ns0.IUSBDeviceFilter_getProduct_Dec().pyclass

IUSBDeviceFilter_getProductResultMsg = ns0.IUSBDeviceFilter_getProductResponse_Dec().pyclass

IUSBDeviceFilter_setProductRequestMsg = ns0.IUSBDeviceFilter_setProduct_Dec().pyclass

IUSBDeviceFilter_setProductResultMsg = ns0.IUSBDeviceFilter_setProductResponse_Dec().pyclass

IUSBDeviceFilter_getSerialNumberRequestMsg = ns0.IUSBDeviceFilter_getSerialNumber_Dec().pyclass

IUSBDeviceFilter_getSerialNumberResultMsg = ns0.IUSBDeviceFilter_getSerialNumberResponse_Dec().pyclass

IUSBDeviceFilter_setSerialNumberRequestMsg = ns0.IUSBDeviceFilter_setSerialNumber_Dec().pyclass

IUSBDeviceFilter_setSerialNumberResultMsg = ns0.IUSBDeviceFilter_setSerialNumberResponse_Dec().pyclass

IUSBDeviceFilter_getPortRequestMsg = ns0.IUSBDeviceFilter_getPort_Dec().pyclass

IUSBDeviceFilter_getPortResultMsg = ns0.IUSBDeviceFilter_getPortResponse_Dec().pyclass

IUSBDeviceFilter_setPortRequestMsg = ns0.IUSBDeviceFilter_setPort_Dec().pyclass

IUSBDeviceFilter_setPortResultMsg = ns0.IUSBDeviceFilter_setPortResponse_Dec().pyclass

IUSBDeviceFilter_getRemoteRequestMsg = ns0.IUSBDeviceFilter_getRemote_Dec().pyclass

IUSBDeviceFilter_getRemoteResultMsg = ns0.IUSBDeviceFilter_getRemoteResponse_Dec().pyclass

IUSBDeviceFilter_setRemoteRequestMsg = ns0.IUSBDeviceFilter_setRemote_Dec().pyclass

IUSBDeviceFilter_setRemoteResultMsg = ns0.IUSBDeviceFilter_setRemoteResponse_Dec().pyclass

IUSBDeviceFilter_getMaskedInterfacesRequestMsg = ns0.IUSBDeviceFilter_getMaskedInterfaces_Dec().pyclass

IUSBDeviceFilter_getMaskedInterfacesResultMsg = ns0.IUSBDeviceFilter_getMaskedInterfacesResponse_Dec().pyclass

IUSBDeviceFilter_setMaskedInterfacesRequestMsg = ns0.IUSBDeviceFilter_setMaskedInterfaces_Dec().pyclass

IUSBDeviceFilter_setMaskedInterfacesResultMsg = ns0.IUSBDeviceFilter_setMaskedInterfacesResponse_Dec().pyclass

IHostUSBDevice_getStateRequestMsg = ns0.IHostUSBDevice_getState_Dec().pyclass

IHostUSBDevice_getStateResultMsg = ns0.IHostUSBDevice_getStateResponse_Dec().pyclass

IHostUSBDeviceFilter_getActionRequestMsg = ns0.IHostUSBDeviceFilter_getAction_Dec().pyclass

IHostUSBDeviceFilter_getActionResultMsg = ns0.IHostUSBDeviceFilter_getActionResponse_Dec().pyclass

IHostUSBDeviceFilter_setActionRequestMsg = ns0.IHostUSBDeviceFilter_setAction_Dec().pyclass

IHostUSBDeviceFilter_setActionResultMsg = ns0.IHostUSBDeviceFilter_setActionResponse_Dec().pyclass

IAudioAdapter_getEnabledRequestMsg = ns0.IAudioAdapter_getEnabled_Dec().pyclass

IAudioAdapter_getEnabledResultMsg = ns0.IAudioAdapter_getEnabledResponse_Dec().pyclass

IAudioAdapter_setEnabledRequestMsg = ns0.IAudioAdapter_setEnabled_Dec().pyclass

IAudioAdapter_setEnabledResultMsg = ns0.IAudioAdapter_setEnabledResponse_Dec().pyclass

IAudioAdapter_getAudioControllerRequestMsg = ns0.IAudioAdapter_getAudioController_Dec().pyclass

IAudioAdapter_getAudioControllerResultMsg = ns0.IAudioAdapter_getAudioControllerResponse_Dec().pyclass

IAudioAdapter_setAudioControllerRequestMsg = ns0.IAudioAdapter_setAudioController_Dec().pyclass

IAudioAdapter_setAudioControllerResultMsg = ns0.IAudioAdapter_setAudioControllerResponse_Dec().pyclass

IAudioAdapter_getAudioDriverRequestMsg = ns0.IAudioAdapter_getAudioDriver_Dec().pyclass

IAudioAdapter_getAudioDriverResultMsg = ns0.IAudioAdapter_getAudioDriverResponse_Dec().pyclass

IAudioAdapter_setAudioDriverRequestMsg = ns0.IAudioAdapter_setAudioDriver_Dec().pyclass

IAudioAdapter_setAudioDriverResultMsg = ns0.IAudioAdapter_setAudioDriverResponse_Dec().pyclass

IVRDEServer_getEnabledRequestMsg = ns0.IVRDEServer_getEnabled_Dec().pyclass

IVRDEServer_getEnabledResultMsg = ns0.IVRDEServer_getEnabledResponse_Dec().pyclass

IVRDEServer_setEnabledRequestMsg = ns0.IVRDEServer_setEnabled_Dec().pyclass

IVRDEServer_setEnabledResultMsg = ns0.IVRDEServer_setEnabledResponse_Dec().pyclass

IVRDEServer_getAuthTypeRequestMsg = ns0.IVRDEServer_getAuthType_Dec().pyclass

IVRDEServer_getAuthTypeResultMsg = ns0.IVRDEServer_getAuthTypeResponse_Dec().pyclass

IVRDEServer_setAuthTypeRequestMsg = ns0.IVRDEServer_setAuthType_Dec().pyclass

IVRDEServer_setAuthTypeResultMsg = ns0.IVRDEServer_setAuthTypeResponse_Dec().pyclass

IVRDEServer_getAuthTimeoutRequestMsg = ns0.IVRDEServer_getAuthTimeout_Dec().pyclass

IVRDEServer_getAuthTimeoutResultMsg = ns0.IVRDEServer_getAuthTimeoutResponse_Dec().pyclass

IVRDEServer_setAuthTimeoutRequestMsg = ns0.IVRDEServer_setAuthTimeout_Dec().pyclass

IVRDEServer_setAuthTimeoutResultMsg = ns0.IVRDEServer_setAuthTimeoutResponse_Dec().pyclass

IVRDEServer_getAllowMultiConnectionRequestMsg = ns0.IVRDEServer_getAllowMultiConnection_Dec().pyclass

IVRDEServer_getAllowMultiConnectionResultMsg = ns0.IVRDEServer_getAllowMultiConnectionResponse_Dec().pyclass

IVRDEServer_setAllowMultiConnectionRequestMsg = ns0.IVRDEServer_setAllowMultiConnection_Dec().pyclass

IVRDEServer_setAllowMultiConnectionResultMsg = ns0.IVRDEServer_setAllowMultiConnectionResponse_Dec().pyclass

IVRDEServer_getReuseSingleConnectionRequestMsg = ns0.IVRDEServer_getReuseSingleConnection_Dec().pyclass

IVRDEServer_getReuseSingleConnectionResultMsg = ns0.IVRDEServer_getReuseSingleConnectionResponse_Dec().pyclass

IVRDEServer_setReuseSingleConnectionRequestMsg = ns0.IVRDEServer_setReuseSingleConnection_Dec().pyclass

IVRDEServer_setReuseSingleConnectionResultMsg = ns0.IVRDEServer_setReuseSingleConnectionResponse_Dec().pyclass

IVRDEServer_getVRDEExtPackRequestMsg = ns0.IVRDEServer_getVRDEExtPack_Dec().pyclass

IVRDEServer_getVRDEExtPackResultMsg = ns0.IVRDEServer_getVRDEExtPackResponse_Dec().pyclass

IVRDEServer_setVRDEExtPackRequestMsg = ns0.IVRDEServer_setVRDEExtPack_Dec().pyclass

IVRDEServer_setVRDEExtPackResultMsg = ns0.IVRDEServer_setVRDEExtPackResponse_Dec().pyclass

IVRDEServer_getAuthLibraryRequestMsg = ns0.IVRDEServer_getAuthLibrary_Dec().pyclass

IVRDEServer_getAuthLibraryResultMsg = ns0.IVRDEServer_getAuthLibraryResponse_Dec().pyclass

IVRDEServer_setAuthLibraryRequestMsg = ns0.IVRDEServer_setAuthLibrary_Dec().pyclass

IVRDEServer_setAuthLibraryResultMsg = ns0.IVRDEServer_setAuthLibraryResponse_Dec().pyclass

IVRDEServer_getVRDEPropertiesRequestMsg = ns0.IVRDEServer_getVRDEProperties_Dec().pyclass

IVRDEServer_getVRDEPropertiesResultMsg = ns0.IVRDEServer_getVRDEPropertiesResponse_Dec().pyclass

IVRDEServer_setVRDEPropertyRequestMsg = ns0.IVRDEServer_setVRDEProperty_Dec().pyclass

IVRDEServer_setVRDEPropertyResultMsg = ns0.IVRDEServer_setVRDEPropertyResponse_Dec().pyclass

IVRDEServer_getVRDEPropertyRequestMsg = ns0.IVRDEServer_getVRDEProperty_Dec().pyclass

IVRDEServer_getVRDEPropertyResultMsg = ns0.IVRDEServer_getVRDEPropertyResponse_Dec().pyclass

ISession_getStateRequestMsg = ns0.ISession_getState_Dec().pyclass

ISession_getStateResultMsg = ns0.ISession_getStateResponse_Dec().pyclass

ISession_getTypeRequestMsg = ns0.ISession_getType_Dec().pyclass

ISession_getTypeResultMsg = ns0.ISession_getTypeResponse_Dec().pyclass

ISession_getMachineRequestMsg = ns0.ISession_getMachine_Dec().pyclass

ISession_getMachineResultMsg = ns0.ISession_getMachineResponse_Dec().pyclass

ISession_getConsoleRequestMsg = ns0.ISession_getConsole_Dec().pyclass

ISession_getConsoleResultMsg = ns0.ISession_getConsoleResponse_Dec().pyclass

ISession_unlockMachineRequestMsg = ns0.ISession_unlockMachine_Dec().pyclass

ISession_unlockMachineResultMsg = ns0.ISession_unlockMachineResponse_Dec().pyclass

IStorageController_getNameRequestMsg = ns0.IStorageController_getName_Dec().pyclass

IStorageController_getNameResultMsg = ns0.IStorageController_getNameResponse_Dec().pyclass

IStorageController_getMaxDevicesPerPortCountRequestMsg = ns0.IStorageController_getMaxDevicesPerPortCount_Dec().pyclass

IStorageController_getMaxDevicesPerPortCountResultMsg = ns0.IStorageController_getMaxDevicesPerPortCountResponse_Dec().pyclass

IStorageController_getMinPortCountRequestMsg = ns0.IStorageController_getMinPortCount_Dec().pyclass

IStorageController_getMinPortCountResultMsg = ns0.IStorageController_getMinPortCountResponse_Dec().pyclass

IStorageController_getMaxPortCountRequestMsg = ns0.IStorageController_getMaxPortCount_Dec().pyclass

IStorageController_getMaxPortCountResultMsg = ns0.IStorageController_getMaxPortCountResponse_Dec().pyclass

IStorageController_getInstanceRequestMsg = ns0.IStorageController_getInstance_Dec().pyclass

IStorageController_getInstanceResultMsg = ns0.IStorageController_getInstanceResponse_Dec().pyclass

IStorageController_setInstanceRequestMsg = ns0.IStorageController_setInstance_Dec().pyclass

IStorageController_setInstanceResultMsg = ns0.IStorageController_setInstanceResponse_Dec().pyclass

IStorageController_getPortCountRequestMsg = ns0.IStorageController_getPortCount_Dec().pyclass

IStorageController_getPortCountResultMsg = ns0.IStorageController_getPortCountResponse_Dec().pyclass

IStorageController_setPortCountRequestMsg = ns0.IStorageController_setPortCount_Dec().pyclass

IStorageController_setPortCountResultMsg = ns0.IStorageController_setPortCountResponse_Dec().pyclass

IStorageController_getBusRequestMsg = ns0.IStorageController_getBus_Dec().pyclass

IStorageController_getBusResultMsg = ns0.IStorageController_getBusResponse_Dec().pyclass

IStorageController_getControllerTypeRequestMsg = ns0.IStorageController_getControllerType_Dec().pyclass

IStorageController_getControllerTypeResultMsg = ns0.IStorageController_getControllerTypeResponse_Dec().pyclass

IStorageController_setControllerTypeRequestMsg = ns0.IStorageController_setControllerType_Dec().pyclass

IStorageController_setControllerTypeResultMsg = ns0.IStorageController_setControllerTypeResponse_Dec().pyclass

IStorageController_getUseHostIOCacheRequestMsg = ns0.IStorageController_getUseHostIOCache_Dec().pyclass

IStorageController_getUseHostIOCacheResultMsg = ns0.IStorageController_getUseHostIOCacheResponse_Dec().pyclass

IStorageController_setUseHostIOCacheRequestMsg = ns0.IStorageController_setUseHostIOCache_Dec().pyclass

IStorageController_setUseHostIOCacheResultMsg = ns0.IStorageController_setUseHostIOCacheResponse_Dec().pyclass

IStorageController_getBootableRequestMsg = ns0.IStorageController_getBootable_Dec().pyclass

IStorageController_getBootableResultMsg = ns0.IStorageController_getBootableResponse_Dec().pyclass

IStorageController_getIDEEmulationPortRequestMsg = ns0.IStorageController_getIDEEmulationPort_Dec().pyclass

IStorageController_getIDEEmulationPortResultMsg = ns0.IStorageController_getIDEEmulationPortResponse_Dec().pyclass

IStorageController_setIDEEmulationPortRequestMsg = ns0.IStorageController_setIDEEmulationPort_Dec().pyclass

IStorageController_setIDEEmulationPortResultMsg = ns0.IStorageController_setIDEEmulationPortResponse_Dec().pyclass

IManagedObjectRef_getInterfaceNameRequestMsg = ns0.IManagedObjectRef_getInterfaceName_Dec().pyclass

IManagedObjectRef_getInterfaceNameResultMsg = ns0.IManagedObjectRef_getInterfaceNameResponse_Dec().pyclass

IManagedObjectRef_releaseRequestMsg = ns0.IManagedObjectRef_release_Dec().pyclass

IManagedObjectRef_releaseResultMsg = ns0.IManagedObjectRef_releaseResponse_Dec().pyclass

IWebsessionManager_logonRequestMsg = ns0.IWebsessionManager_logon_Dec().pyclass

IWebsessionManager_logonResultMsg = ns0.IWebsessionManager_logonResponse_Dec().pyclass

IWebsessionManager_getSessionObjectRequestMsg = ns0.IWebsessionManager_getSessionObject_Dec().pyclass

IWebsessionManager_getSessionObjectResultMsg = ns0.IWebsessionManager_getSessionObjectResponse_Dec().pyclass

IWebsessionManager_logoffRequestMsg = ns0.IWebsessionManager_logoff_Dec().pyclass

IWebsessionManager_logoffResultMsg = ns0.IWebsessionManager_logoffResponse_Dec().pyclass

IPerformanceMetric_getMetricNameRequestMsg = ns0.IPerformanceMetric_getMetricName_Dec().pyclass

IPerformanceMetric_getMetricNameResultMsg = ns0.IPerformanceMetric_getMetricNameResponse_Dec().pyclass

IPerformanceMetric_getObjectRequestMsg = ns0.IPerformanceMetric_getObject_Dec().pyclass

IPerformanceMetric_getObjectResultMsg = ns0.IPerformanceMetric_getObjectResponse_Dec().pyclass

IPerformanceMetric_getDescriptionRequestMsg = ns0.IPerformanceMetric_getDescription_Dec().pyclass

IPerformanceMetric_getDescriptionResultMsg = ns0.IPerformanceMetric_getDescriptionResponse_Dec().pyclass

IPerformanceMetric_getPeriodRequestMsg = ns0.IPerformanceMetric_getPeriod_Dec().pyclass

IPerformanceMetric_getPeriodResultMsg = ns0.IPerformanceMetric_getPeriodResponse_Dec().pyclass

IPerformanceMetric_getCountRequestMsg = ns0.IPerformanceMetric_getCount_Dec().pyclass

IPerformanceMetric_getCountResultMsg = ns0.IPerformanceMetric_getCountResponse_Dec().pyclass

IPerformanceMetric_getUnitRequestMsg = ns0.IPerformanceMetric_getUnit_Dec().pyclass

IPerformanceMetric_getUnitResultMsg = ns0.IPerformanceMetric_getUnitResponse_Dec().pyclass

IPerformanceMetric_getMinimumValueRequestMsg = ns0.IPerformanceMetric_getMinimumValue_Dec().pyclass

IPerformanceMetric_getMinimumValueResultMsg = ns0.IPerformanceMetric_getMinimumValueResponse_Dec().pyclass

IPerformanceMetric_getMaximumValueRequestMsg = ns0.IPerformanceMetric_getMaximumValue_Dec().pyclass

IPerformanceMetric_getMaximumValueResultMsg = ns0.IPerformanceMetric_getMaximumValueResponse_Dec().pyclass

IPerformanceCollector_getMetricNamesRequestMsg = ns0.IPerformanceCollector_getMetricNames_Dec().pyclass

IPerformanceCollector_getMetricNamesResultMsg = ns0.IPerformanceCollector_getMetricNamesResponse_Dec().pyclass

IPerformanceCollector_getMetricsRequestMsg = ns0.IPerformanceCollector_getMetrics_Dec().pyclass

IPerformanceCollector_getMetricsResultMsg = ns0.IPerformanceCollector_getMetricsResponse_Dec().pyclass

IPerformanceCollector_setupMetricsRequestMsg = ns0.IPerformanceCollector_setupMetrics_Dec().pyclass

IPerformanceCollector_setupMetricsResultMsg = ns0.IPerformanceCollector_setupMetricsResponse_Dec().pyclass

IPerformanceCollector_enableMetricsRequestMsg = ns0.IPerformanceCollector_enableMetrics_Dec().pyclass

IPerformanceCollector_enableMetricsResultMsg = ns0.IPerformanceCollector_enableMetricsResponse_Dec().pyclass

IPerformanceCollector_disableMetricsRequestMsg = ns0.IPerformanceCollector_disableMetrics_Dec().pyclass

IPerformanceCollector_disableMetricsResultMsg = ns0.IPerformanceCollector_disableMetricsResponse_Dec().pyclass

IPerformanceCollector_queryMetricsDataRequestMsg = ns0.IPerformanceCollector_queryMetricsData_Dec().pyclass

IPerformanceCollector_queryMetricsDataResultMsg = ns0.IPerformanceCollector_queryMetricsDataResponse_Dec().pyclass

INATEngine_getNetworkRequestMsg = ns0.INATEngine_getNetwork_Dec().pyclass

INATEngine_getNetworkResultMsg = ns0.INATEngine_getNetworkResponse_Dec().pyclass

INATEngine_setNetworkRequestMsg = ns0.INATEngine_setNetwork_Dec().pyclass

INATEngine_setNetworkResultMsg = ns0.INATEngine_setNetworkResponse_Dec().pyclass

INATEngine_getHostIPRequestMsg = ns0.INATEngine_getHostIP_Dec().pyclass

INATEngine_getHostIPResultMsg = ns0.INATEngine_getHostIPResponse_Dec().pyclass

INATEngine_setHostIPRequestMsg = ns0.INATEngine_setHostIP_Dec().pyclass

INATEngine_setHostIPResultMsg = ns0.INATEngine_setHostIPResponse_Dec().pyclass

INATEngine_getTftpPrefixRequestMsg = ns0.INATEngine_getTftpPrefix_Dec().pyclass

INATEngine_getTftpPrefixResultMsg = ns0.INATEngine_getTftpPrefixResponse_Dec().pyclass

INATEngine_setTftpPrefixRequestMsg = ns0.INATEngine_setTftpPrefix_Dec().pyclass

INATEngine_setTftpPrefixResultMsg = ns0.INATEngine_setTftpPrefixResponse_Dec().pyclass

INATEngine_getTftpBootFileRequestMsg = ns0.INATEngine_getTftpBootFile_Dec().pyclass

INATEngine_getTftpBootFileResultMsg = ns0.INATEngine_getTftpBootFileResponse_Dec().pyclass

INATEngine_setTftpBootFileRequestMsg = ns0.INATEngine_setTftpBootFile_Dec().pyclass

INATEngine_setTftpBootFileResultMsg = ns0.INATEngine_setTftpBootFileResponse_Dec().pyclass

INATEngine_getTftpNextServerRequestMsg = ns0.INATEngine_getTftpNextServer_Dec().pyclass

INATEngine_getTftpNextServerResultMsg = ns0.INATEngine_getTftpNextServerResponse_Dec().pyclass

INATEngine_setTftpNextServerRequestMsg = ns0.INATEngine_setTftpNextServer_Dec().pyclass

INATEngine_setTftpNextServerResultMsg = ns0.INATEngine_setTftpNextServerResponse_Dec().pyclass

INATEngine_getAliasModeRequestMsg = ns0.INATEngine_getAliasMode_Dec().pyclass

INATEngine_getAliasModeResultMsg = ns0.INATEngine_getAliasModeResponse_Dec().pyclass

INATEngine_setAliasModeRequestMsg = ns0.INATEngine_setAliasMode_Dec().pyclass

INATEngine_setAliasModeResultMsg = ns0.INATEngine_setAliasModeResponse_Dec().pyclass

INATEngine_getDnsPassDomainRequestMsg = ns0.INATEngine_getDnsPassDomain_Dec().pyclass

INATEngine_getDnsPassDomainResultMsg = ns0.INATEngine_getDnsPassDomainResponse_Dec().pyclass

INATEngine_setDnsPassDomainRequestMsg = ns0.INATEngine_setDnsPassDomain_Dec().pyclass

INATEngine_setDnsPassDomainResultMsg = ns0.INATEngine_setDnsPassDomainResponse_Dec().pyclass

INATEngine_getDnsProxyRequestMsg = ns0.INATEngine_getDnsProxy_Dec().pyclass

INATEngine_getDnsProxyResultMsg = ns0.INATEngine_getDnsProxyResponse_Dec().pyclass

INATEngine_setDnsProxyRequestMsg = ns0.INATEngine_setDnsProxy_Dec().pyclass

INATEngine_setDnsProxyResultMsg = ns0.INATEngine_setDnsProxyResponse_Dec().pyclass

INATEngine_getDnsUseHostResolverRequestMsg = ns0.INATEngine_getDnsUseHostResolver_Dec().pyclass

INATEngine_getDnsUseHostResolverResultMsg = ns0.INATEngine_getDnsUseHostResolverResponse_Dec().pyclass

INATEngine_setDnsUseHostResolverRequestMsg = ns0.INATEngine_setDnsUseHostResolver_Dec().pyclass

INATEngine_setDnsUseHostResolverResultMsg = ns0.INATEngine_setDnsUseHostResolverResponse_Dec().pyclass

INATEngine_getRedirectsRequestMsg = ns0.INATEngine_getRedirects_Dec().pyclass

INATEngine_getRedirectsResultMsg = ns0.INATEngine_getRedirectsResponse_Dec().pyclass

INATEngine_setNetworkSettingsRequestMsg = ns0.INATEngine_setNetworkSettings_Dec().pyclass

INATEngine_setNetworkSettingsResultMsg = ns0.INATEngine_setNetworkSettingsResponse_Dec().pyclass

INATEngine_getNetworkSettingsRequestMsg = ns0.INATEngine_getNetworkSettings_Dec().pyclass

INATEngine_getNetworkSettingsResultMsg = ns0.INATEngine_getNetworkSettingsResponse_Dec().pyclass

INATEngine_addRedirectRequestMsg = ns0.INATEngine_addRedirect_Dec().pyclass

INATEngine_addRedirectResultMsg = ns0.INATEngine_addRedirectResponse_Dec().pyclass

INATEngine_removeRedirectRequestMsg = ns0.INATEngine_removeRedirect_Dec().pyclass

INATEngine_removeRedirectResultMsg = ns0.INATEngine_removeRedirectResponse_Dec().pyclass

IBandwidthGroup_getNameRequestMsg = ns0.IBandwidthGroup_getName_Dec().pyclass

IBandwidthGroup_getNameResultMsg = ns0.IBandwidthGroup_getNameResponse_Dec().pyclass

IBandwidthGroup_getTypeRequestMsg = ns0.IBandwidthGroup_getType_Dec().pyclass

IBandwidthGroup_getTypeResultMsg = ns0.IBandwidthGroup_getTypeResponse_Dec().pyclass

IBandwidthGroup_getReferenceRequestMsg = ns0.IBandwidthGroup_getReference_Dec().pyclass

IBandwidthGroup_getReferenceResultMsg = ns0.IBandwidthGroup_getReferenceResponse_Dec().pyclass

IBandwidthGroup_getMaxMbPerSecRequestMsg = ns0.IBandwidthGroup_getMaxMbPerSec_Dec().pyclass

IBandwidthGroup_getMaxMbPerSecResultMsg = ns0.IBandwidthGroup_getMaxMbPerSecResponse_Dec().pyclass

IBandwidthGroup_setMaxMbPerSecRequestMsg = ns0.IBandwidthGroup_setMaxMbPerSec_Dec().pyclass

IBandwidthGroup_setMaxMbPerSecResultMsg = ns0.IBandwidthGroup_setMaxMbPerSecResponse_Dec().pyclass

IBandwidthControl_getNumGroupsRequestMsg = ns0.IBandwidthControl_getNumGroups_Dec().pyclass

IBandwidthControl_getNumGroupsResultMsg = ns0.IBandwidthControl_getNumGroupsResponse_Dec().pyclass

IBandwidthControl_createBandwidthGroupRequestMsg = ns0.IBandwidthControl_createBandwidthGroup_Dec().pyclass

IBandwidthControl_createBandwidthGroupResultMsg = ns0.IBandwidthControl_createBandwidthGroupResponse_Dec().pyclass

IBandwidthControl_deleteBandwidthGroupRequestMsg = ns0.IBandwidthControl_deleteBandwidthGroup_Dec().pyclass

IBandwidthControl_deleteBandwidthGroupResultMsg = ns0.IBandwidthControl_deleteBandwidthGroupResponse_Dec().pyclass

IBandwidthControl_getBandwidthGroupRequestMsg = ns0.IBandwidthControl_getBandwidthGroup_Dec().pyclass

IBandwidthControl_getBandwidthGroupResultMsg = ns0.IBandwidthControl_getBandwidthGroupResponse_Dec().pyclass

IBandwidthControl_getAllBandwidthGroupsRequestMsg = ns0.IBandwidthControl_getAllBandwidthGroups_Dec().pyclass

IBandwidthControl_getAllBandwidthGroupsResultMsg = ns0.IBandwidthControl_getAllBandwidthGroupsResponse_Dec().pyclass

IEventSource_createListenerRequestMsg = ns0.IEventSource_createListener_Dec().pyclass

IEventSource_createListenerResultMsg = ns0.IEventSource_createListenerResponse_Dec().pyclass

IEventSource_createAggregatorRequestMsg = ns0.IEventSource_createAggregator_Dec().pyclass

IEventSource_createAggregatorResultMsg = ns0.IEventSource_createAggregatorResponse_Dec().pyclass

IEventSource_registerListenerRequestMsg = ns0.IEventSource_registerListener_Dec().pyclass

IEventSource_registerListenerResultMsg = ns0.IEventSource_registerListenerResponse_Dec().pyclass

IEventSource_unregisterListenerRequestMsg = ns0.IEventSource_unregisterListener_Dec().pyclass

IEventSource_unregisterListenerResultMsg = ns0.IEventSource_unregisterListenerResponse_Dec().pyclass

IEventSource_fireEventRequestMsg = ns0.IEventSource_fireEvent_Dec().pyclass

IEventSource_fireEventResultMsg = ns0.IEventSource_fireEventResponse_Dec().pyclass

IEventSource_getEventRequestMsg = ns0.IEventSource_getEvent_Dec().pyclass

IEventSource_getEventResultMsg = ns0.IEventSource_getEventResponse_Dec().pyclass

IEventSource_eventProcessedRequestMsg = ns0.IEventSource_eventProcessed_Dec().pyclass

IEventSource_eventProcessedResultMsg = ns0.IEventSource_eventProcessedResponse_Dec().pyclass

IEventListener_handleEventRequestMsg = ns0.IEventListener_handleEvent_Dec().pyclass

IEventListener_handleEventResultMsg = ns0.IEventListener_handleEventResponse_Dec().pyclass

IEvent_getTypeRequestMsg = ns0.IEvent_getType_Dec().pyclass

IEvent_getTypeResultMsg = ns0.IEvent_getTypeResponse_Dec().pyclass

IEvent_getSourceRequestMsg = ns0.IEvent_getSource_Dec().pyclass

IEvent_getSourceResultMsg = ns0.IEvent_getSourceResponse_Dec().pyclass

IEvent_getWaitableRequestMsg = ns0.IEvent_getWaitable_Dec().pyclass

IEvent_getWaitableResultMsg = ns0.IEvent_getWaitableResponse_Dec().pyclass

IEvent_setProcessedRequestMsg = ns0.IEvent_setProcessed_Dec().pyclass

IEvent_setProcessedResultMsg = ns0.IEvent_setProcessedResponse_Dec().pyclass

IEvent_waitProcessedRequestMsg = ns0.IEvent_waitProcessed_Dec().pyclass

IEvent_waitProcessedResultMsg = ns0.IEvent_waitProcessedResponse_Dec().pyclass

IReusableEvent_getGenerationRequestMsg = ns0.IReusableEvent_getGeneration_Dec().pyclass

IReusableEvent_getGenerationResultMsg = ns0.IReusableEvent_getGenerationResponse_Dec().pyclass

IReusableEvent_reuseRequestMsg = ns0.IReusableEvent_reuse_Dec().pyclass

IReusableEvent_reuseResultMsg = ns0.IReusableEvent_reuseResponse_Dec().pyclass

IMachineEvent_getMachineIdRequestMsg = ns0.IMachineEvent_getMachineId_Dec().pyclass

IMachineEvent_getMachineIdResultMsg = ns0.IMachineEvent_getMachineIdResponse_Dec().pyclass

IMachineStateChangedEvent_getStateRequestMsg = ns0.IMachineStateChangedEvent_getState_Dec().pyclass

IMachineStateChangedEvent_getStateResultMsg = ns0.IMachineStateChangedEvent_getStateResponse_Dec().pyclass

IMachineDataChangedEvent_getTemporaryRequestMsg = ns0.IMachineDataChangedEvent_getTemporary_Dec().pyclass

IMachineDataChangedEvent_getTemporaryResultMsg = ns0.IMachineDataChangedEvent_getTemporaryResponse_Dec().pyclass

IMediumRegisteredEvent_getMediumIdRequestMsg = ns0.IMediumRegisteredEvent_getMediumId_Dec().pyclass

IMediumRegisteredEvent_getMediumIdResultMsg = ns0.IMediumRegisteredEvent_getMediumIdResponse_Dec().pyclass

IMediumRegisteredEvent_getMediumTypeRequestMsg = ns0.IMediumRegisteredEvent_getMediumType_Dec().pyclass

IMediumRegisteredEvent_getMediumTypeResultMsg = ns0.IMediumRegisteredEvent_getMediumTypeResponse_Dec().pyclass

IMediumRegisteredEvent_getRegisteredRequestMsg = ns0.IMediumRegisteredEvent_getRegistered_Dec().pyclass

IMediumRegisteredEvent_getRegisteredResultMsg = ns0.IMediumRegisteredEvent_getRegisteredResponse_Dec().pyclass

IMachineRegisteredEvent_getRegisteredRequestMsg = ns0.IMachineRegisteredEvent_getRegistered_Dec().pyclass

IMachineRegisteredEvent_getRegisteredResultMsg = ns0.IMachineRegisteredEvent_getRegisteredResponse_Dec().pyclass

ISessionStateChangedEvent_getStateRequestMsg = ns0.ISessionStateChangedEvent_getState_Dec().pyclass

ISessionStateChangedEvent_getStateResultMsg = ns0.ISessionStateChangedEvent_getStateResponse_Dec().pyclass

IGuestPropertyChangedEvent_getNameRequestMsg = ns0.IGuestPropertyChangedEvent_getName_Dec().pyclass

IGuestPropertyChangedEvent_getNameResultMsg = ns0.IGuestPropertyChangedEvent_getNameResponse_Dec().pyclass

IGuestPropertyChangedEvent_getValueRequestMsg = ns0.IGuestPropertyChangedEvent_getValue_Dec().pyclass

IGuestPropertyChangedEvent_getValueResultMsg = ns0.IGuestPropertyChangedEvent_getValueResponse_Dec().pyclass

IGuestPropertyChangedEvent_getFlagsRequestMsg = ns0.IGuestPropertyChangedEvent_getFlags_Dec().pyclass

IGuestPropertyChangedEvent_getFlagsResultMsg = ns0.IGuestPropertyChangedEvent_getFlagsResponse_Dec().pyclass

ISnapshotEvent_getSnapshotIdRequestMsg = ns0.ISnapshotEvent_getSnapshotId_Dec().pyclass

ISnapshotEvent_getSnapshotIdResultMsg = ns0.ISnapshotEvent_getSnapshotIdResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getVisibleRequestMsg = ns0.IMousePointerShapeChangedEvent_getVisible_Dec().pyclass

IMousePointerShapeChangedEvent_getVisibleResultMsg = ns0.IMousePointerShapeChangedEvent_getVisibleResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getAlphaRequestMsg = ns0.IMousePointerShapeChangedEvent_getAlpha_Dec().pyclass

IMousePointerShapeChangedEvent_getAlphaResultMsg = ns0.IMousePointerShapeChangedEvent_getAlphaResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getXhotRequestMsg = ns0.IMousePointerShapeChangedEvent_getXhot_Dec().pyclass

IMousePointerShapeChangedEvent_getXhotResultMsg = ns0.IMousePointerShapeChangedEvent_getXhotResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getYhotRequestMsg = ns0.IMousePointerShapeChangedEvent_getYhot_Dec().pyclass

IMousePointerShapeChangedEvent_getYhotResultMsg = ns0.IMousePointerShapeChangedEvent_getYhotResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getWidthRequestMsg = ns0.IMousePointerShapeChangedEvent_getWidth_Dec().pyclass

IMousePointerShapeChangedEvent_getWidthResultMsg = ns0.IMousePointerShapeChangedEvent_getWidthResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getHeightRequestMsg = ns0.IMousePointerShapeChangedEvent_getHeight_Dec().pyclass

IMousePointerShapeChangedEvent_getHeightResultMsg = ns0.IMousePointerShapeChangedEvent_getHeightResponse_Dec().pyclass

IMousePointerShapeChangedEvent_getShapeRequestMsg = ns0.IMousePointerShapeChangedEvent_getShape_Dec().pyclass

IMousePointerShapeChangedEvent_getShapeResultMsg = ns0.IMousePointerShapeChangedEvent_getShapeResponse_Dec().pyclass

IMouseCapabilityChangedEvent_getSupportsAbsoluteRequestMsg = ns0.IMouseCapabilityChangedEvent_getSupportsAbsolute_Dec().pyclass

IMouseCapabilityChangedEvent_getSupportsAbsoluteResultMsg = ns0.IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse_Dec().pyclass

IMouseCapabilityChangedEvent_getSupportsRelativeRequestMsg = ns0.IMouseCapabilityChangedEvent_getSupportsRelative_Dec().pyclass

IMouseCapabilityChangedEvent_getSupportsRelativeResultMsg = ns0.IMouseCapabilityChangedEvent_getSupportsRelativeResponse_Dec().pyclass

IMouseCapabilityChangedEvent_getNeedsHostCursorRequestMsg = ns0.IMouseCapabilityChangedEvent_getNeedsHostCursor_Dec().pyclass

IMouseCapabilityChangedEvent_getNeedsHostCursorResultMsg = ns0.IMouseCapabilityChangedEvent_getNeedsHostCursorResponse_Dec().pyclass

IKeyboardLedsChangedEvent_getNumLockRequestMsg = ns0.IKeyboardLedsChangedEvent_getNumLock_Dec().pyclass

IKeyboardLedsChangedEvent_getNumLockResultMsg = ns0.IKeyboardLedsChangedEvent_getNumLockResponse_Dec().pyclass

IKeyboardLedsChangedEvent_getCapsLockRequestMsg = ns0.IKeyboardLedsChangedEvent_getCapsLock_Dec().pyclass

IKeyboardLedsChangedEvent_getCapsLockResultMsg = ns0.IKeyboardLedsChangedEvent_getCapsLockResponse_Dec().pyclass

IKeyboardLedsChangedEvent_getScrollLockRequestMsg = ns0.IKeyboardLedsChangedEvent_getScrollLock_Dec().pyclass

IKeyboardLedsChangedEvent_getScrollLockResultMsg = ns0.IKeyboardLedsChangedEvent_getScrollLockResponse_Dec().pyclass

IStateChangedEvent_getStateRequestMsg = ns0.IStateChangedEvent_getState_Dec().pyclass

IStateChangedEvent_getStateResultMsg = ns0.IStateChangedEvent_getStateResponse_Dec().pyclass

INetworkAdapterChangedEvent_getNetworkAdapterRequestMsg = ns0.INetworkAdapterChangedEvent_getNetworkAdapter_Dec().pyclass

INetworkAdapterChangedEvent_getNetworkAdapterResultMsg = ns0.INetworkAdapterChangedEvent_getNetworkAdapterResponse_Dec().pyclass

ISerialPortChangedEvent_getSerialPortRequestMsg = ns0.ISerialPortChangedEvent_getSerialPort_Dec().pyclass

ISerialPortChangedEvent_getSerialPortResultMsg = ns0.ISerialPortChangedEvent_getSerialPortResponse_Dec().pyclass

IParallelPortChangedEvent_getParallelPortRequestMsg = ns0.IParallelPortChangedEvent_getParallelPort_Dec().pyclass

IParallelPortChangedEvent_getParallelPortResultMsg = ns0.IParallelPortChangedEvent_getParallelPortResponse_Dec().pyclass

IMediumChangedEvent_getMediumAttachmentRequestMsg = ns0.IMediumChangedEvent_getMediumAttachment_Dec().pyclass

IMediumChangedEvent_getMediumAttachmentResultMsg = ns0.IMediumChangedEvent_getMediumAttachmentResponse_Dec().pyclass

ICPUChangedEvent_getCpuRequestMsg = ns0.ICPUChangedEvent_getCpu_Dec().pyclass

ICPUChangedEvent_getCpuResultMsg = ns0.ICPUChangedEvent_getCpuResponse_Dec().pyclass

ICPUChangedEvent_getAddRequestMsg = ns0.ICPUChangedEvent_getAdd_Dec().pyclass

ICPUChangedEvent_getAddResultMsg = ns0.ICPUChangedEvent_getAddResponse_Dec().pyclass

ICPUExecutionCapChangedEvent_getExecutionCapRequestMsg = ns0.ICPUExecutionCapChangedEvent_getExecutionCap_Dec().pyclass

ICPUExecutionCapChangedEvent_getExecutionCapResultMsg = ns0.ICPUExecutionCapChangedEvent_getExecutionCapResponse_Dec().pyclass

IGuestKeyboardEvent_getScancodesRequestMsg = ns0.IGuestKeyboardEvent_getScancodes_Dec().pyclass

IGuestKeyboardEvent_getScancodesResultMsg = ns0.IGuestKeyboardEvent_getScancodesResponse_Dec().pyclass

IGuestMouseEvent_getAbsoluteRequestMsg = ns0.IGuestMouseEvent_getAbsolute_Dec().pyclass

IGuestMouseEvent_getAbsoluteResultMsg = ns0.IGuestMouseEvent_getAbsoluteResponse_Dec().pyclass

IGuestMouseEvent_getXRequestMsg = ns0.IGuestMouseEvent_getX_Dec().pyclass

IGuestMouseEvent_getXResultMsg = ns0.IGuestMouseEvent_getXResponse_Dec().pyclass

IGuestMouseEvent_getYRequestMsg = ns0.IGuestMouseEvent_getY_Dec().pyclass

IGuestMouseEvent_getYResultMsg = ns0.IGuestMouseEvent_getYResponse_Dec().pyclass

IGuestMouseEvent_getZRequestMsg = ns0.IGuestMouseEvent_getZ_Dec().pyclass

IGuestMouseEvent_getZResultMsg = ns0.IGuestMouseEvent_getZResponse_Dec().pyclass

IGuestMouseEvent_getWRequestMsg = ns0.IGuestMouseEvent_getW_Dec().pyclass

IGuestMouseEvent_getWResultMsg = ns0.IGuestMouseEvent_getWResponse_Dec().pyclass

IGuestMouseEvent_getButtonsRequestMsg = ns0.IGuestMouseEvent_getButtons_Dec().pyclass

IGuestMouseEvent_getButtonsResultMsg = ns0.IGuestMouseEvent_getButtonsResponse_Dec().pyclass

IUSBDeviceStateChangedEvent_getDeviceRequestMsg = ns0.IUSBDeviceStateChangedEvent_getDevice_Dec().pyclass

IUSBDeviceStateChangedEvent_getDeviceResultMsg = ns0.IUSBDeviceStateChangedEvent_getDeviceResponse_Dec().pyclass

IUSBDeviceStateChangedEvent_getAttachedRequestMsg = ns0.IUSBDeviceStateChangedEvent_getAttached_Dec().pyclass

IUSBDeviceStateChangedEvent_getAttachedResultMsg = ns0.IUSBDeviceStateChangedEvent_getAttachedResponse_Dec().pyclass

IUSBDeviceStateChangedEvent_getErrorRequestMsg = ns0.IUSBDeviceStateChangedEvent_getError_Dec().pyclass

IUSBDeviceStateChangedEvent_getErrorResultMsg = ns0.IUSBDeviceStateChangedEvent_getErrorResponse_Dec().pyclass

ISharedFolderChangedEvent_getScopeRequestMsg = ns0.ISharedFolderChangedEvent_getScope_Dec().pyclass

ISharedFolderChangedEvent_getScopeResultMsg = ns0.ISharedFolderChangedEvent_getScopeResponse_Dec().pyclass

IRuntimeErrorEvent_getFatalRequestMsg = ns0.IRuntimeErrorEvent_getFatal_Dec().pyclass

IRuntimeErrorEvent_getFatalResultMsg = ns0.IRuntimeErrorEvent_getFatalResponse_Dec().pyclass

IRuntimeErrorEvent_getIdRequestMsg = ns0.IRuntimeErrorEvent_getId_Dec().pyclass

IRuntimeErrorEvent_getIdResultMsg = ns0.IRuntimeErrorEvent_getIdResponse_Dec().pyclass

IRuntimeErrorEvent_getMessageRequestMsg = ns0.IRuntimeErrorEvent_getMessage_Dec().pyclass

IRuntimeErrorEvent_getMessageResultMsg = ns0.IRuntimeErrorEvent_getMessageResponse_Dec().pyclass

IEventSourceChangedEvent_getListenerRequestMsg = ns0.IEventSourceChangedEvent_getListener_Dec().pyclass

IEventSourceChangedEvent_getListenerResultMsg = ns0.IEventSourceChangedEvent_getListenerResponse_Dec().pyclass

IEventSourceChangedEvent_getAddRequestMsg = ns0.IEventSourceChangedEvent_getAdd_Dec().pyclass

IEventSourceChangedEvent_getAddResultMsg = ns0.IEventSourceChangedEvent_getAddResponse_Dec().pyclass

IExtraDataChangedEvent_getMachineIdRequestMsg = ns0.IExtraDataChangedEvent_getMachineId_Dec().pyclass

IExtraDataChangedEvent_getMachineIdResultMsg = ns0.IExtraDataChangedEvent_getMachineIdResponse_Dec().pyclass

IExtraDataChangedEvent_getKeyRequestMsg = ns0.IExtraDataChangedEvent_getKey_Dec().pyclass

IExtraDataChangedEvent_getKeyResultMsg = ns0.IExtraDataChangedEvent_getKeyResponse_Dec().pyclass

IExtraDataChangedEvent_getValueRequestMsg = ns0.IExtraDataChangedEvent_getValue_Dec().pyclass

IExtraDataChangedEvent_getValueResultMsg = ns0.IExtraDataChangedEvent_getValueResponse_Dec().pyclass

IVetoEvent_addVetoRequestMsg = ns0.IVetoEvent_addVeto_Dec().pyclass

IVetoEvent_addVetoResultMsg = ns0.IVetoEvent_addVetoResponse_Dec().pyclass

IVetoEvent_isVetoedRequestMsg = ns0.IVetoEvent_isVetoed_Dec().pyclass

IVetoEvent_isVetoedResultMsg = ns0.IVetoEvent_isVetoedResponse_Dec().pyclass

IVetoEvent_getVetosRequestMsg = ns0.IVetoEvent_getVetos_Dec().pyclass

IVetoEvent_getVetosResultMsg = ns0.IVetoEvent_getVetosResponse_Dec().pyclass

IExtraDataCanChangeEvent_getMachineIdRequestMsg = ns0.IExtraDataCanChangeEvent_getMachineId_Dec().pyclass

IExtraDataCanChangeEvent_getMachineIdResultMsg = ns0.IExtraDataCanChangeEvent_getMachineIdResponse_Dec().pyclass

IExtraDataCanChangeEvent_getKeyRequestMsg = ns0.IExtraDataCanChangeEvent_getKey_Dec().pyclass

IExtraDataCanChangeEvent_getKeyResultMsg = ns0.IExtraDataCanChangeEvent_getKeyResponse_Dec().pyclass

IExtraDataCanChangeEvent_getValueRequestMsg = ns0.IExtraDataCanChangeEvent_getValue_Dec().pyclass

IExtraDataCanChangeEvent_getValueResultMsg = ns0.IExtraDataCanChangeEvent_getValueResponse_Dec().pyclass

IShowWindowEvent_getWinIdRequestMsg = ns0.IShowWindowEvent_getWinId_Dec().pyclass

IShowWindowEvent_getWinIdResultMsg = ns0.IShowWindowEvent_getWinIdResponse_Dec().pyclass

IShowWindowEvent_setWinIdRequestMsg = ns0.IShowWindowEvent_setWinId_Dec().pyclass

IShowWindowEvent_setWinIdResultMsg = ns0.IShowWindowEvent_setWinIdResponse_Dec().pyclass

INATRedirectEvent_getSlotRequestMsg = ns0.INATRedirectEvent_getSlot_Dec().pyclass

INATRedirectEvent_getSlotResultMsg = ns0.INATRedirectEvent_getSlotResponse_Dec().pyclass

INATRedirectEvent_getRemoveRequestMsg = ns0.INATRedirectEvent_getRemove_Dec().pyclass

INATRedirectEvent_getRemoveResultMsg = ns0.INATRedirectEvent_getRemoveResponse_Dec().pyclass

INATRedirectEvent_getNameRequestMsg = ns0.INATRedirectEvent_getName_Dec().pyclass

INATRedirectEvent_getNameResultMsg = ns0.INATRedirectEvent_getNameResponse_Dec().pyclass

INATRedirectEvent_getProtoRequestMsg = ns0.INATRedirectEvent_getProto_Dec().pyclass

INATRedirectEvent_getProtoResultMsg = ns0.INATRedirectEvent_getProtoResponse_Dec().pyclass

INATRedirectEvent_getHostIpRequestMsg = ns0.INATRedirectEvent_getHostIp_Dec().pyclass

INATRedirectEvent_getHostIpResultMsg = ns0.INATRedirectEvent_getHostIpResponse_Dec().pyclass

INATRedirectEvent_getHostPortRequestMsg = ns0.INATRedirectEvent_getHostPort_Dec().pyclass

INATRedirectEvent_getHostPortResultMsg = ns0.INATRedirectEvent_getHostPortResponse_Dec().pyclass

INATRedirectEvent_getGuestIpRequestMsg = ns0.INATRedirectEvent_getGuestIp_Dec().pyclass

INATRedirectEvent_getGuestIpResultMsg = ns0.INATRedirectEvent_getGuestIpResponse_Dec().pyclass

INATRedirectEvent_getGuestPortRequestMsg = ns0.INATRedirectEvent_getGuestPort_Dec().pyclass

INATRedirectEvent_getGuestPortResultMsg = ns0.INATRedirectEvent_getGuestPortResponse_Dec().pyclass

IHostPciDevicePlugEvent_getPluggedRequestMsg = ns0.IHostPciDevicePlugEvent_getPlugged_Dec().pyclass

IHostPciDevicePlugEvent_getPluggedResultMsg = ns0.IHostPciDevicePlugEvent_getPluggedResponse_Dec().pyclass

IHostPciDevicePlugEvent_getSuccessRequestMsg = ns0.IHostPciDevicePlugEvent_getSuccess_Dec().pyclass

IHostPciDevicePlugEvent_getSuccessResultMsg = ns0.IHostPciDevicePlugEvent_getSuccessResponse_Dec().pyclass

IHostPciDevicePlugEvent_getAttachmentRequestMsg = ns0.IHostPciDevicePlugEvent_getAttachment_Dec().pyclass

IHostPciDevicePlugEvent_getAttachmentResultMsg = ns0.IHostPciDevicePlugEvent_getAttachmentResponse_Dec().pyclass

IHostPciDevicePlugEvent_getMessageRequestMsg = ns0.IHostPciDevicePlugEvent_getMessage_Dec().pyclass

IHostPciDevicePlugEvent_getMessageResultMsg = ns0.IHostPciDevicePlugEvent_getMessageResponse_Dec().pyclass

IVBoxSVCAvailabilityChangedEvent_getAvailableRequestMsg = ns0.IVBoxSVCAvailabilityChangedEvent_getAvailable_Dec().pyclass

IVBoxSVCAvailabilityChangedEvent_getAvailableResultMsg = ns0.IVBoxSVCAvailabilityChangedEvent_getAvailableResponse_Dec().pyclass

IBandwidthGroupChangedEvent_getBandwidthGroupRequestMsg = ns0.IBandwidthGroupChangedEvent_getBandwidthGroup_Dec().pyclass

IBandwidthGroupChangedEvent_getBandwidthGroupResultMsg = ns0.IBandwidthGroupChangedEvent_getBandwidthGroupResponse_Dec().pyclass

IGuestMonitorChangedEvent_getChangeTypeRequestMsg = ns0.IGuestMonitorChangedEvent_getChangeType_Dec().pyclass

IGuestMonitorChangedEvent_getChangeTypeResultMsg = ns0.IGuestMonitorChangedEvent_getChangeTypeResponse_Dec().pyclass

IGuestMonitorChangedEvent_getScreenIdRequestMsg = ns0.IGuestMonitorChangedEvent_getScreenId_Dec().pyclass

IGuestMonitorChangedEvent_getScreenIdResultMsg = ns0.IGuestMonitorChangedEvent_getScreenIdResponse_Dec().pyclass

IGuestMonitorChangedEvent_getOriginXRequestMsg = ns0.IGuestMonitorChangedEvent_getOriginX_Dec().pyclass

IGuestMonitorChangedEvent_getOriginXResultMsg = ns0.IGuestMonitorChangedEvent_getOriginXResponse_Dec().pyclass

IGuestMonitorChangedEvent_getOriginYRequestMsg = ns0.IGuestMonitorChangedEvent_getOriginY_Dec().pyclass

IGuestMonitorChangedEvent_getOriginYResultMsg = ns0.IGuestMonitorChangedEvent_getOriginYResponse_Dec().pyclass

IGuestMonitorChangedEvent_getWidthRequestMsg = ns0.IGuestMonitorChangedEvent_getWidth_Dec().pyclass

IGuestMonitorChangedEvent_getWidthResultMsg = ns0.IGuestMonitorChangedEvent_getWidthResponse_Dec().pyclass

IGuestMonitorChangedEvent_getHeightRequestMsg = ns0.IGuestMonitorChangedEvent_getHeight_Dec().pyclass

IGuestMonitorChangedEvent_getHeightResultMsg = ns0.IGuestMonitorChangedEvent_getHeightResponse_Dec().pyclass

IStorageDeviceChangedEvent_getStorageDeviceRequestMsg = ns0.IStorageDeviceChangedEvent_getStorageDevice_Dec().pyclass

IStorageDeviceChangedEvent_getStorageDeviceResultMsg = ns0.IStorageDeviceChangedEvent_getStorageDeviceResponse_Dec().pyclass

IStorageDeviceChangedEvent_getRemovedRequestMsg = ns0.IStorageDeviceChangedEvent_getRemoved_Dec().pyclass

IStorageDeviceChangedEvent_getRemovedResultMsg = ns0.IStorageDeviceChangedEvent_getRemovedResponse_Dec().pyclass

