<?xml version="1.0" encoding="UTF-8" ?>
<be-xml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="bexml.xsd">
<bug>
  <uuid>e22a9048-9a97-41b1-91a2-d4178c674b37</uuid>
  <short-name>bea/e22</short-name>
  <severity>minor</severity>
  <status>unconfirmed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 03:02:19 +0000</created>
  <summary>Think about authentication.</summary>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>12c986be-d19a-4b8b-b1b5-68248ff4d331</uuid>
  <short-name>bea/12c</short-name>
  <severity>wishlist</severity>
  <status>unconfirmed</status>
  <reporter>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 18:32:12 +0000</created>
  <summary>Bug aggregation.  Multi-repo meta-BE?</summary>
  <comment>
    <uuid>88d1f2c2-e1af-4f0d-9390-e3c89ae4f7d7</uuid>
    <alt-id>&lt;1247313294.7701.60.camel@localhost&gt;</alt-id>
    <short-name>bea/12c/88d</short-name>
    <author>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt;</author>
    <date>Sat, 11 Jul 2009 13:54:54 +0200</date>
    <content-type>text/plain</content-type>
    <body>Hi,

1. is there any way to aggregate over multiple public branches in order
to get the complete bug state

2. is there any model for storing bigger files at a central place (for
some of my bugs i have multi-megabyte tarballs attached)

Regards Ronny


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
    <comment>
      <uuid>1f9f60de-ba37-42bc-a1c0-dc062ef255e1</uuid>
      <alt-id>&lt;878wivmjm1.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/12c/1f9</short-name>
      <in-reply-to>88d1f2c2-e1af-4f0d-9390-e3c89ae4f7d7</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Sat, 11 Jul 2009 23:31:34 +1000</date>
      <content-type>text/plain</content-type>
      <body>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:

&gt; 1. is there any way to aggregate over multiple public branches in
&gt; order to get the complete bug state

The bug state is as complete as the source code state. It's exactly as
aggregated as the rest of the source code; the “complete bug state”
would be the integration branch where you merge all the feature branches
and bug-fix branches together.

If instead you want bugs to *not* be tightly linked with the rest of the
source code state, it seems you don't want a distributed bug tracker
like Bugs Everywhere.

-- 
 \     “I cannot conceive that anybody will require multiplications at |
  `\   the rate of 40,000 or even 4,000 per hour …” —F. H. Wales, 1936 |
_o__)                                                                  |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>fd6162f3-7fc1-41d1-a073-a07465802b72</uuid>
      <alt-id>&lt;20090713090341.GB21800@grys.it&gt;</alt-id>
      <short-name>bea/12c/fd6</short-name>
      <in-reply-to>1f9f60de-ba37-42bc-a1c0-dc062ef255e1</in-reply-to>
      <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
      <date>Mon, 13 Jul 2009 11:03:41 +0200</date>
      <content-type>text/plain</content-type>
      <body>On Sat, Jul 11, 2009 at 11:31:34PM +1000, Ben Finney wrote:
&gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; 
&gt; &gt; 1. is there any way to aggregate over multiple public branches in
&gt; &gt; order to get the complete bug state
&gt; 
&gt; The bug state is as complete as the source code state. It's exactly as
&gt; aggregated as the rest of the source code; the ???complete bug state???
&gt; would be the integration branch where you merge all the feature branches
&gt; and bug-fix branches together.
&gt; 
&gt; If instead you want bugs to *not* be tightly linked with the rest of the
&gt; source code state, it seems you don't want a distributed bug tracker
&gt; like Bugs Everywhere.

"the complete bug state" probably means that he want to know (and in some way
to publish it) that the bug "xyz" is fixed and merged in main while bug "abc"
is fixed but only in branch "123" and bug "def" is still open in branch "456"

bye
Gianluca

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>13012b22-2d02-444c-87c0-8cf0f17137ae</uuid>
      <alt-id>&lt;20090711125030.GA18185@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/12c/130</short-name>
      <in-reply-to>88d1f2c2-e1af-4f0d-9390-e3c89ae4f7d7</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sat, 11 Jul 2009 08:50:30 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; 1. is there any way to aggregate over multiple public branches in order
&gt; to get the complete bug state

Keeping the bug data with the source helps synchronize bug state and
source code.  Bug state in branch A may not apply to branch B.  Some
people like to weaken this source-bug linkage by keeping their bugs in
a branch all by themselves (ditz [http://ditz.rubyforge.org/]
currently supports this workflow).  It sounds like you want to move
from "bugs with code" to "bugs and code in separate branches".  We
don't have an easy way to do that in BE at the moment, since
version-control systems like Git have a single working branch at a
time (I think :p).  What VCS are you using as a backend?

&gt; 2. is there any model for storing bigger files at a central place (for
&gt; some of my bugs i have multi-megabyte tarballs attached)

  be comment ID "See the tarball at http://yourpage/something.tar.gz"
Then to grab the tarball, you'd use:
  wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
to grab it.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
    <comment>
      <uuid>dc32aa62-cf56-4171-84a1-8f7d02b23b6d</uuid>
      <alt-id>&lt;1247317985.7701.63.camel@localhost&gt;</alt-id>
      <short-name>bea/12c/dc3</short-name>
      <in-reply-to>13012b22-2d02-444c-87c0-8cf0f17137ae</in-reply-to>
      <author>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt;</author>
      <date>Sat, 11 Jul 2009 15:13:05 +0200</date>
      <content-type>text/plain</content-type>
      <body>On Sat, 2009-07-11 at 08:50 -0400, W. Trevor King wrote:
&gt; On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; 1. is there any way to aggregate over multiple public branches in order
&gt; &gt; to get the complete bug state
&gt; 
&gt; Keeping the bug data with the source helps synchronize bug state and
&gt; source code.  Bug state in branch A may not apply to branch B.  Some
&gt; people like to weaken this source-bug linkage by keeping their bugs in
&gt; a branch all by themselves (ditz [http://ditz.rubyforge.org/]
&gt; currently supports this workflow).  It sounds like you want to move
&gt; from "bugs with code" to "bugs and code in separate branches".  We
&gt; don't have an easy way to do that in BE at the moment, since
&gt; version-control systems like Git have a single working branch at a
&gt; time (I think :p).  What VCS are you using as a backend?
the basic idea is to take a look at all public branches (for exaple all
on lp/bitbucket/github) in order to tell the user of a webinterface that
bug foo is fixed in branch xyz, and if its merged to the main branch
&gt; 
&gt; &gt; 2. is there any model for storing bigger files at a central place (for
&gt; &gt; some of my bugs i have multi-megabyte tarballs attached)
&gt; 
&gt;   be comment ID "See the tarball at http://yourpage/something.tar.gz"
&gt; Then to grab the tarball, you'd use:
&gt;   wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
&gt; to grab it.
so the basic idea is to do it completely self-managed and have have
heterogenous sources of extended data?</body>
    </comment>
    <comment>
      <uuid>e520239c-8d69-4ff6-b1bd-0c2f74366200</uuid>
      <alt-id>&lt;87zlbbl128.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/12c/e52</short-name>
      <in-reply-to>88d1f2c2-e1af-4f0d-9390-e3c89ae4f7d7</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Sun, 12 Jul 2009 00:57:35 +1000</date>
      <content-type>text/plain</content-type>
      <body>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:

&gt; i want to see the combination of the bug data of all branches

What is your definition of “all branches”? When I'm working with
distributed VCS, I create branches wherever I feel like, and the VCS
tool doesn't have some central registry of branches to keep up to date.

How is a tool to determine the set of “all branches”? The distributed
VCS model means that set is indeterminate.

-- 
 \         “Pinky, are you pondering what I'm pondering?” “I think so, |
  `\    Brain, but I find scratching just makes it worse.” —_Pinky and |
_o__)                                                       The Brain_ |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
      <comment>
        <uuid>bd98f525-95ec-446a-84e8-34c7d6fa5b40</uuid>
        <alt-id>&lt;20090711152507.GA18461@mjolnir.home.net&gt;</alt-id>
        <short-name>bea/12c/bd9</short-name>
        <in-reply-to>e520239c-8d69-4ff6-b1bd-0c2f74366200</in-reply-to>
        <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
        <date>Sat, 11 Jul 2009 11:25:07 -0400</date>
        <content-type>text/plain</content-type>
        <body>On Sat, Jul 11, 2009 at 03:13:05PM +0200, Ronny Pfannschmidt wrote:
&gt; On Sat, 2009-07-11 at 08:50 -0400, W. Trevor King wrote:
&gt; &gt; On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; 1. is there any way to aggregate over multiple public branches in order
&gt; &gt; &gt; to get the complete bug state
&gt; &gt; 
&gt; &gt; Keeping the bug data with the source helps synchronize bug state and
&gt; &gt; source code.  Bug state in branch A may not apply to branch B.  Some
&gt; &gt; people like to weaken this source-bug linkage by keeping their bugs in
&gt; &gt; a branch all by themselves (ditz [http://ditz.rubyforge.org/]
&gt; &gt; currently supports this workflow).  It sounds like you want to move
&gt; &gt; from "bugs with code" to "bugs and code in separate branches".  We
&gt; &gt; don't have an easy way to do that in BE at the moment, since
&gt; &gt; version-control systems like Git have a single working branch at a
&gt; &gt; time (I think :p).  What VCS are you using as a backend?
&gt;
&gt; the basic idea is to take a look at all public branches (for exaple all
&gt; on lp/bitbucket/github) in order to tell the user of a webinterface that
&gt; bug foo is fixed in branch xyz, and if its merged to the main branch

Hmm.  

&gt; &gt; &gt; 2. is there any model for storing bigger files at a central place (for
&gt; &gt; &gt; some of my bugs i have multi-megabyte tarballs attached)
&gt; &gt; 
&gt; &gt;   be comment ID "See the tarball at http://yourpage/something.tar.gz"
&gt; &gt; Then to grab the tarball, you'd use:
&gt; &gt;   wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
&gt; &gt; to grab it.
&gt; so the basic idea is to do it completely self-managed

Well, it's going to be managed by somebody ;).  So far I'm not
convinced enough for the manager to be me, so I'm suggesting it be you
:p.

&gt; and have have heterogenous sources of extended data?

I assume "extended data" here refers to your tarballs.  What sort of
homogenous source did you have in mind?  The comment body is currently
just a binary blob for non-text/* types, otherwise it's text in
whatever encoding you've configured.

On Sun, Jul 12, 2009 at 12:57:35AM +1000, Ben Finney wrote:
&gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; 
&gt; &gt; i want to see the combination of the bug data of all branches
&gt; 
&gt; How is a tool to determine the set of “all branches”? The distributed
&gt; VCS model means that set is indeterminate.

He could just make a list of branches he likes.

Ronny, are you looking to check bug status across several repos on the
fly, or periodically run something (with cron, etc.) to update a
static multi-repo summary?

The easiest implementation I can think of would be to keep local
branches (on whatever computer is hosting your web interface)
following your favorite repos.
  proxectX/
  |-- repoA
  |-- repoB
  `-- repoC
You'd pull upstream changes with a cron job.
Listing bugs would be something along the lines of
  projectX$ for repo in *
            do
              pushd $repo
              be list
	      popd
            done | sort | uniq
Then to show bug status you would have something like
  projectX$ for repo in *
            do
              echo $repo
              pushd $repo
              be show ${BUGID}
              popd
            done
For a web frontend, you'd want to translate that to python/libbe.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
      </comment>
        <comment>
          <uuid>8ffc90d7-0be7-4b00-88e6-9ae1b65f7957</uuid>
          <alt-id>&lt;1247433610.14803.3.camel@localhost&gt;</alt-id>
          <short-name>bea/12c/8ff</short-name>
          <in-reply-to>bd98f525-95ec-446a-84e8-34c7d6fa5b40</in-reply-to>
          <author>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt;</author>
          <date>Sun, 12 Jul 2009 23:20:10 +0200</date>
          <content-type>text/plain</content-type>
          <body>On Sat, 2009-07-11 at 11:25 -0400, W. Trevor King wrote:
&gt; On Sat, Jul 11, 2009 at 03:13:05PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; On Sat, 2009-07-11 at 08:50 -0400, W. Trevor King wrote:
&gt; &gt; &gt; On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; &gt; 1. is there any way to aggregate over multiple public branches in order
&gt; &gt; &gt; &gt; to get the complete bug state
&gt; &gt; &gt; 
&gt; &gt; &gt; Keeping the bug data with the source helps synchronize bug state and
&gt; &gt; &gt; source code.  Bug state in branch A may not apply to branch B.  Some
&gt; &gt; &gt; people like to weaken this source-bug linkage by keeping their bugs in
&gt; &gt; &gt; a branch all by themselves (ditz [http://ditz.rubyforge.org/]
&gt; &gt; &gt; currently supports this workflow).  It sounds like you want to move
&gt; &gt; &gt; from "bugs with code" to "bugs and code in separate branches".  We
&gt; &gt; &gt; don't have an easy way to do that in BE at the moment, since
&gt; &gt; &gt; version-control systems like Git have a single working branch at a
&gt; &gt; &gt; time (I think :p).  What VCS are you using as a backend?
&gt; &gt;
&gt; &gt; the basic idea is to take a look at all public branches (for exaple all
&gt; &gt; on lp/bitbucket/github) in order to tell the user of a webinterface that
&gt; &gt; bug foo is fixed in branch xyz, and if its merged to the main branch
&gt; 
&gt; Hmm.  
&gt; 
&gt; &gt; &gt; &gt; 2. is there any model for storing bigger files at a central place (for
&gt; &gt; &gt; &gt; some of my bugs i have multi-megabyte tarballs attached)
&gt; &gt; &gt; 
&gt; &gt; &gt;   be comment ID "See the tarball at http://yourpage/something.tar.gz"
&gt; &gt; &gt; Then to grab the tarball, you'd use:
&gt; &gt; &gt;   wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
&gt; &gt; &gt; to grab it.
&gt; &gt; so the basic idea is to do it completely self-managed
&gt; 
&gt; Well, it's going to be managed by somebody ;).  So far I'm not
&gt; convinced enough for the manager to be me, so I'm suggesting it be you
&gt; :p.
&gt; 
&gt; &gt; and have have heterogenous sources of extended data?
&gt; 
&gt; I assume "extended data" here refers to your tarballs.  What sort of
&gt; homogenous source did you have in mind?  The comment body is currently
&gt; just a binary blob for non-text/* types, otherwise it's text in
&gt; whatever encoding you've configured.
some kind of common upload target for a single project in order to have
more reliable sources of stuff thats related to bugs but doesnt fit into
the normal repository


&gt; 
&gt; On Sun, Jul 12, 2009 at 12:57:35AM +1000, Ben Finney wrote:
&gt; &gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; i want to see the combination of the bug data of all branches
&gt; &gt; 
&gt; &gt; How is a tool to determine the set of “all branches”? The distributed
&gt; &gt; VCS model means that set is indeterminate.
&gt; 
&gt; He could just make a list of branches he likes.
&gt; 
&gt; Ronny, are you looking to check bug status across several repos on the
&gt; fly, or periodically run something (with cron, etc.) to update a
&gt; static multi-repo summary?
on the fly access

&gt; 
&gt; The easiest implementation I can think of would be to keep local
&gt; branches (on whatever computer is hosting your web interface)
&gt; following your favorite repos.
&gt;   proxectX/
&gt;   |-- repoA
&gt;   |-- repoB
&gt;   `-- repoC
&gt; You'd pull upstream changes with a cron job.
&gt; Listing bugs would be something along the lines of
&gt;   projectX$ for repo in *
&gt;             do
&gt;               pushd $repo
&gt;               be list
&gt; 	      popd
&gt;             done | sort | uniq
&gt; Then to show bug status you would have something like
&gt;   projectX$ for repo in *
&gt;             do
&gt;               echo $repo
&gt;               pushd $repo
&gt;               be show ${BUGID}
&gt;               popd
&gt;             done
&gt; For a web frontend, you'd want to translate that to python/libbe.
&gt; 

yes, the idea is to get a web fontend for multiple branches 
and maybe a local gtk fontend for local multi-branch setups

for some of my projects i have n local and m remote repos, and merging
is not always intended soonish</body>
        </comment>
        <comment>
          <uuid>4d192c6c-a4a8-4844-b083-2dd5926bd2d9</uuid>
          <alt-id>&lt;20090712235502.GA10782@mjolnir.home.net&gt;</alt-id>
          <short-name>bea/12c/4d1</short-name>
          <in-reply-to>8ffc90d7-0be7-4b00-88e6-9ae1b65f7957</in-reply-to>
          <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
          <date>Sun, 12 Jul 2009 19:55:02 -0400</date>
          <content-type>text/plain</content-type>
          <body>On Sun, Jul 12, 2009 at 11:20:10PM +0200, Ronny Pfannschmidt wrote:
&gt; On Sat, 2009-07-11 at 11:25 -0400, W. Trevor King wrote:
&gt; &gt; On Sat, Jul 11, 2009 at 03:13:05PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; On Sat, 2009-07-11 at 08:50 -0400, W. Trevor King wrote:
&gt; &gt; &gt; &gt; On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; &gt; &gt; 2. is there any model for storing bigger files at a central place (for
&gt; &gt; &gt; &gt; &gt; some of my bugs i have multi-megabyte tarballs attached)
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt;   be comment ID "See the tarball at http://yourpage/something.tar.gz"
&gt; &gt; &gt; &gt; Then to grab the tarball, you'd use:
&gt; &gt; &gt; &gt;   wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
&gt; &gt; &gt; &gt; to grab it.
&gt; &gt; &gt;
&gt; &gt; &gt; so the basic idea is to do it completely self-managed
&gt; &gt; &gt; and have have heterogenous sources of extended data?
&gt; &gt; 
&gt; &gt; I assume "extended data" here refers to your tarballs.  What sort of
&gt; &gt; homogenous source did you have in mind?  The comment body is currently
&gt; &gt; just a binary blob for non-text/* types, otherwise it's text in
&gt; &gt; whatever encoding you've configured.
&gt;
&gt; some kind of common upload target for a single project in order to have
&gt; more reliable sources of stuff thats related to bugs but doesnt fit into
&gt; the normal repository

Sorry, I'm still having trouble with "doesn't fit into the normal
repository".  It's going to be large wherever you keep it.  You
worried about multiple branches all having these big tarballs in them
and want a "lightweight" checkout without all the big
tarballs/whatever?  I still think having some sort of "resources"
directory on an http server somewhere that you link to from comments
is the best plan.  If you use the
  be show --xml ID | be-xml-to-mbox | catmutt
approach, you can even write your comments in text/html and get
clickable links ;).  A "push big file to remote and commit comment
linking to it" script would be pretty simple and keep everything
consistent.

&gt; &gt; On Sun, Jul 12, 2009 at 12:57:35AM +1000, Ben Finney wrote:
&gt; &gt; &gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; i want to see the combination of the bug data of all branches
&gt; &gt; &gt; 
&gt; &gt; &gt; How is a tool to determine the set of “all branches”? The distributed
&gt; &gt; &gt; VCS model means that set is indeterminate.
&gt; &gt; 
&gt; &gt; He could just make a list of branches he likes.
&gt; &gt; 
&gt; &gt; Ronny, are you looking to check bug status across several repos on the
&gt; &gt; fly, or periodically run something (with cron, etc.) to update a
&gt; &gt; static multi-repo summary?
&gt;
&gt; on the fly access

Then listing bugs in a remote repo will either involve httping tons of
tiny values files for each bug (slow?) or running some hypothetical
BE-server locally for each repo speaking some BE-specific protocol
(complicated?).  And how would you handle e.g. headless git repos,
where nothing's even checked out?

You could always run the cron job every 15 minutes, and rely on
whatever VCS you're using having some intelligent protocol/procedure
to keep bandwidth down ;).  If you need faster / more-efficient
updates, you'll probably need to throw out polling altogether and
setup all involved repos with a "push to central-repo on commit" hook
or some such.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
        </comment>
        <comment>
          <uuid>6dcc910a-ce15-4eeb-b49b-4747719748ed</uuid>
          <alt-id>&lt;1247468734.7189.1.camel@localhost&gt;</alt-id>
          <short-name>bea/12c/6dc</short-name>
          <in-reply-to>4d192c6c-a4a8-4844-b083-2dd5926bd2d9</in-reply-to>
          <author>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt;</author>
          <date>Mon, 13 Jul 2009 09:05:34 +0200</date>
          <content-type>text/plain</content-type>
          <body>On Sun, 2009-07-12 at 19:55 -0400, W. Trevor King wrote:
&gt; On Sun, Jul 12, 2009 at 11:20:10PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; On Sat, 2009-07-11 at 11:25 -0400, W. Trevor King wrote:
&gt; &gt; &gt; On Sat, Jul 11, 2009 at 03:13:05PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; &gt; On Sat, 2009-07-11 at 08:50 -0400, W. Trevor King wrote:
&gt; &gt; &gt; &gt; &gt; On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; &gt; &gt; &gt; 2. is there any model for storing bigger files at a central place (for
&gt; &gt; &gt; &gt; &gt; &gt; some of my bugs i have multi-megabyte tarballs attached)
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt;   be comment ID "See the tarball at http://yourpage/something.tar.gz"
&gt; &gt; &gt; &gt; &gt; Then to grab the tarball, you'd use:
&gt; &gt; &gt; &gt; &gt;   wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
&gt; &gt; &gt; &gt; &gt; to grab it.
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; so the basic idea is to do it completely self-managed
&gt; &gt; &gt; &gt; and have have heterogenous sources of extended data?
&gt; &gt; &gt; 
&gt; &gt; &gt; I assume "extended data" here refers to your tarballs.  What sort of
&gt; &gt; &gt; homogenous source did you have in mind?  The comment body is currently
&gt; &gt; &gt; just a binary blob for non-text/* types, otherwise it's text in
&gt; &gt; &gt; whatever encoding you've configured.
&gt; &gt;
&gt; &gt; some kind of common upload target for a single project in order to have
&gt; &gt; more reliable sources of stuff thats related to bugs but doesnt fit into
&gt; &gt; the normal repository
&gt; 
&gt; Sorry, I'm still having trouble with "doesn't fit into the normal
&gt; repository".  It's going to be large wherever you keep it.  You
&gt; worried about multiple branches all having these big tarballs in them
&gt; and want a "lightweight" checkout without all the big
&gt; tarballs/whatever?  I still think having some sort of "resources"
&gt; directory on an http server somewhere that you link to from comments
&gt; is the best plan.  If you use the
&gt;   be show --xml ID | be-xml-to-mbox | catmutt
&gt; approach, you can even write your comments in text/html and get
&gt; clickable links ;).  A "push big file to remote and commit comment
&gt; linking to it" script would be pretty simple and keep everything
&gt; consistent.
thats probably what i want to do

&gt; 
&gt; &gt; &gt; On Sun, Jul 12, 2009 at 12:57:35AM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; i want to see the combination of the bug data of all branches
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; How is a tool to determine the set of “all branches”? The distributed
&gt; &gt; &gt; &gt; VCS model means that set is indeterminate.
&gt; &gt; &gt; 
&gt; &gt; &gt; He could just make a list of branches he likes.
&gt; &gt; &gt; 
&gt; &gt; &gt; Ronny, are you looking to check bug status across several repos on the
&gt; &gt; &gt; fly, or periodically run something (with cron, etc.) to update a
&gt; &gt; &gt; static multi-repo summary?
&gt; &gt;
&gt; &gt; on the fly access
&gt; 
&gt; Then listing bugs in a remote repo will either involve httping tons of
&gt; tiny values files for each bug (slow?) or running some hypothetical
&gt; BE-server locally for each repo speaking some BE-specific protocol
&gt; (complicated?).  And how would you handle e.g. headless git repos,
&gt; where nothing's even checked out?
&gt; 
&gt; You could always run the cron job every 15 minutes, and rely on
&gt; whatever VCS you're using having some intelligent protocol/procedure
&gt; to keep bandwidth down ;).  If you need faster / more-efficient
&gt; updates, you'll probably need to throw out polling altogether and
&gt; setup all involved repos with a "push to central-repo on commit" hook
&gt; or some such.
its intended to run on the place where i publish the repositories anyway</body>
        </comment>
        <comment>
          <uuid>30a8b841-98ae-41b7-9ef2-6af7cffca8da</uuid>
          <alt-id>&lt;20090713104715.GA13723@mjolnir.home.net&gt;</alt-id>
          <short-name>bea/12c/30a</short-name>
          <in-reply-to>6dcc910a-ce15-4eeb-b49b-4747719748ed</in-reply-to>
          <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
          <date>Mon, 13 Jul 2009 06:47:15 -0400</date>
          <content-type>text/plain</content-type>
          <body>On Mon, Jul 13, 2009 at 09:05:34AM +0200, Ronny Pfannschmidt wrote:
&gt; On Sun, 2009-07-12 at 19:55 -0400, W. Trevor King wrote:
&gt; &gt; On Sun, Jul 12, 2009 at 11:20:10PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; On Sat, 2009-07-11 at 11:25 -0400, W. Trevor King wrote:
&gt; &gt; &gt; &gt; On Sat, Jul 11, 2009 at 03:13:05PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; &gt; &gt; On Sat, 2009-07-11 at 08:50 -0400, W. Trevor King wrote:
&gt; &gt; &gt; &gt; &gt; &gt; On Sat, Jul 11, 2009 at 01:54:54PM +0200, Ronny Pfannschmidt wrote:
&gt; &gt; &gt; &gt; &gt; &gt; &gt; 2. is there any model for storing bigger files at a central place (for
&gt; &gt; &gt; &gt; &gt; &gt; &gt; some of my bugs i have multi-megabyte tarballs attached)
&gt; &gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt;   be comment ID "See the tarball at http://yourpage/something.tar.gz"
&gt; &gt; &gt; &gt; &gt; &gt; Then to grab the tarball, you'd use:
&gt; &gt; &gt; &gt; &gt; &gt;   wget `be show COMMENT-ID | sed -n 's/ *See the tarball at //p'`
&gt; &gt; &gt; &gt; &gt; &gt; to grab it.
&gt; &gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; &gt; so the basic idea is to do it completely self-managed
&gt; &gt; &gt; &gt; &gt; and have have heterogenous sources of extended data?
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; I assume "extended data" here refers to your tarballs.  What sort of
&gt; &gt; &gt; &gt; homogenous source did you have in mind?  The comment body is currently
&gt; &gt; &gt; &gt; just a binary blob for non-text/* types, otherwise it's text in
&gt; &gt; &gt; &gt; whatever encoding you've configured.
&gt; &gt; &gt;
&gt; &gt; &gt; some kind of common upload target for a single project in order to have
&gt; &gt; &gt; more reliable sources of stuff thats related to bugs but doesnt fit into
&gt; &gt; &gt; the normal repository
&gt; &gt; 
&gt; &gt; Sorry, I'm still having trouble with "doesn't fit into the normal
&gt; &gt; repository".  It's going to be large wherever you keep it.  You
&gt; &gt; worried about multiple branches all having these big tarballs in them
&gt; &gt; and want a "lightweight" checkout without all the big
&gt; &gt; tarballs/whatever?  I still think having some sort of "resources"
&gt; &gt; directory on an http server somewhere that you link to from comments
&gt; &gt; is the best plan.  If you use the
&gt; &gt;   be show --xml ID | be-xml-to-mbox | catmutt
&gt; &gt; approach, you can even write your comments in text/html and get
&gt; &gt; clickable links ;).  A "push big file to remote and commit comment
&gt; &gt; linking to it" script would be pretty simple and keep everything
&gt; &gt; consistent.
&gt;
&gt; thats probably what i want to do

#!/bin/bash
REMOTE_DIR="you@webhost:./public_html/bigfiles"
REMOTE_LINK="http://www.webhost.com/bigfiles"
if [ $# -ne 2 ]; then
   echo "usage: $0 ID BIGFILE"
   exit 1
fi
ID="$1"
BIGFILE="$2"
be comment "$ID" "Large file stored at ${REMOTE_LINK}/${BIGFILE}" &amp;&amp; scp "$BIGFILE" "${REMOTE_DIR}"

&gt; &gt; &gt; &gt; On Sun, Jul 12, 2009 at 12:57:35AM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; &gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; &gt; i want to see the combination of the bug data of all branches
&gt; &gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; &gt; How is a tool to determine the set of “all branches”? The distributed
&gt; &gt; &gt; &gt; &gt; VCS model means that set is indeterminate.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; He could just make a list of branches he likes.
&gt; &gt; &gt; &gt; 
&gt; &gt; &gt; &gt; Ronny, are you looking to check bug status across several repos on the
&gt; &gt; &gt; &gt; fly, or periodically run something (with cron, etc.) to update a
&gt; &gt; &gt; &gt; static multi-repo summary?
&gt; &gt; &gt;
&gt; &gt; &gt; on the fly access
&gt; &gt; 
&gt; &gt; Then listing bugs in a remote repo will either involve httping tons of
&gt; &gt; tiny values files for each bug (slow?) or running some hypothetical
&gt; &gt; BE-server locally for each repo speaking some BE-specific protocol
&gt; &gt; (complicated?).  And how would you handle e.g. headless git repos,
&gt; &gt; where nothing's even checked out?
&gt; &gt; 
&gt; &gt; You could always run the cron job every 15 minutes, and rely on
&gt; &gt; whatever VCS you're using having some intelligent protocol/procedure
&gt; &gt; to keep bandwidth down ;).  If you need faster / more-efficient
&gt; &gt; updates, you'll probably need to throw out polling altogether and
&gt; &gt; setup all involved repos with a "push to central-repo on commit" hook
&gt; &gt; or some such.
&gt;
&gt; its intended to run on the place where i publish the repositories anyway

Oh, you mean all the repos you want to cover are all _already_ on the
same host?

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
        </comment>
      <comment>
        <uuid>46937fd4-b0bc-4eed-8033-d699445441ea</uuid>
        <alt-id>&lt;20090713115734.GA13788@mjolnir.home.net&gt;</alt-id>
        <short-name>bea/12c/469</short-name>
        <in-reply-to>bd98f525-95ec-446a-84e8-34c7d6fa5b40</in-reply-to>
        <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
        <date>Mon, 13 Jul 2009 07:57:34 -0400</date>
        <content-type>text/plain</content-type>
        <body>On Sat, Jul 11, 2009 at 11:25:07AM -0400, W. Trevor King wrote:
&gt; The easiest implementation I can think of would be to keep local
&gt; branches (on whatever computer is hosting your web interface)
&gt; following your favorite repos.
&gt;   proxectX/
&gt;   |-- repoA
&gt;   |-- repoB
&gt;   `-- repoC
&gt; You'd pull upstream changes with a cron job.
&gt; Listing bugs would be something along the lines of
&gt;   projectX$ for repo in *
&gt;             do
&gt;               pushd $repo
&gt;               be list
&gt;               popd
&gt;             done | sort | uniq
&gt; ...

I've reworked option handling for be, so my branch now supports
  projectX$ for repo in *
            do
              be --dir $repo list
            done | sort | uniq
etc.  This also makes it easy to use your uninstalled development
version of be on any bug directory on your local machine.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
      </comment>
    <comment>
      <uuid>c8283e08-967c-4a7b-b953-3ec62c83fb9f</uuid>
      <alt-id>&lt;20090713085859.GA21800@grys.it&gt;</alt-id>
      <short-name>bea/12c/c82</short-name>
      <in-reply-to>e520239c-8d69-4ff6-b1bd-0c2f74366200</in-reply-to>
      <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
      <date>Mon, 13 Jul 2009 10:58:59 +0200</date>
      <content-type>text/plain</content-type>
      <body>On Sun, Jul 12, 2009 at 12:57:35AM +1000, Ben Finney wrote:
&gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; 
&gt; &gt; i want to see the combination of the bug data of all branches
&gt; 
&gt; What is your definition of ???all branches???? When I'm working with
&gt; distributed VCS, I create branches wherever I feel like, and the VCS
&gt; tool doesn't have some central registry of branches to keep up to date.
&gt; 
&gt; How is a tool to determine the set of ???all branches???? The distributed
&gt; VCS model means that set is indeterminate.

In the first main Ronny spoke about "public" branches. To me it means that
if a branch is public, he should like to have a status of that branch.

We all agree (probably ;-) ) that tha main branch is the "right" branch, but
as I see it, Ronny's question has some logic.
I'd like to know that a certain bug is fixed in a certain branch, also if it
is still not merged in the main branch, for various reason (ie I am interested
in the solution since the bug stop my work) 

Imagine it like a rss feed aggregator: in one place there are all the bugs of
all the branches that the developers make avaible to the public with 
a repository. This can make easier the life to who want to try a something
since he know what branch he must check out, instead of checking all the 
branch he can find to test if he get what is looking for.

Unluckyly I have no idea how to solve it. :-(

bye
Gianluca
 

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
  <comment>
    <uuid>0f60a148-7024-44bd-bbed-377cbece9d1b</uuid>
    <alt-id>&lt;874otjmjhr.fsf@benfinney.id.au&gt;</alt-id>
    <short-name>bea/12c/0f6</short-name>
    <in-reply-to>88d1f2c2-e1af-4f0d-9390-e3c89ae4f7d7</in-reply-to>
    <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
    <date>Sat, 11 Jul 2009 23:34:08 +1000</date>
    <content-type>text/plain</content-type>
    <body>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:

&gt; the basic idea is to take a look at all public branches (for exaple
&gt; all on lp/bitbucket/github) in order to tell the user of a
&gt; webinterface that bug foo is fixed in branch xyz, and if its merged to
&gt; the main branch

I don't understand. The state of the bug in the main branch is right
there in the main branch; if it's not fixed there, it's not fixed there.
If it's merged in from a different branch, the bug state follows all the
other changes when they come in.

Can you give an example of what would be done differently?

-- 
 \           “The basic fact about human existence is not that it is a |
  `\                tragedy, but that it is a bore.” —Henry L. Mencken |
_o__)                                                                  |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>d86e497d-667d-4c2b-9249-76026df56633</uuid>
    <alt-id>&lt;1247320857.7701.67.camel@localhost&gt;</alt-id>
    <short-name>bea/12c/d86</short-name>
    <in-reply-to>0f60a148-7024-44bd-bbed-377cbece9d1b</in-reply-to>
    <author>Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt;</author>
    <date>Sat, 11 Jul 2009 16:00:57 +0200</date>
    <content-type>text/plain</content-type>
    <body>On Sat, 2009-07-11 at 23:34 +1000, Ben Finney wrote:
&gt; Ronny Pfannschmidt &lt;Ronny.Pfannschmidt@gmx.de&gt; writes:
&gt; 
&gt; &gt; the basic idea is to take a look at all public branches (for exaple
&gt; &gt; all on lp/bitbucket/github) in order to tell the user of a
&gt; &gt; webinterface that bug foo is fixed in branch xyz, and if its merged to
&gt; &gt; the main branch
&gt; 
&gt; I don't understand. The state of the bug in the main branch is right
&gt; there in the main branch; if it's not fixed there, it's not fixed there.
&gt; If it's merged in from a different branch, the bug state follows all the
&gt; other changes when they come in.
&gt; 
&gt; Can you give an example of what would be done differently?
&gt; 
i want to see the combination of the bug data of all branches

for example

i got bug
its fixed in the branch "something"
its not fixed/merged to "main"

now something like a website should tell me, this bug has been fixed in
branch xyz and the fix is not yet merged into main




_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>624a4542-92e9-442e-b71c-a14da4fe55cf</uuid>
    <short-name>bea/12c/624</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 05 Dec 2009 22:39:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>I read
  http://weblog.masukomi.org/2008/1/3/distributed-bug-tracking
yesterday, and the section on bug visibility got me thinking about
bug 12c (Multi-repo meta-BE?) some more.

We already have interfaces like this email/html mashup:

On Sun, Sep 13, 2009 at 07:04:05AM -0400, W. Trevor King wrote:
&gt; Since the non-bzr interfaces to BE are coming along nicely, I've put
&gt; up a non-bzr interface to my be-rr branch.
&gt;   http://www.physics.drexel.edu/~wking/code/be
&gt; It uses nightly builds of Gianluca's static html from my devel branch
&gt; to provide read-only browsing, and accepts changes from the general
&gt; public through my email interface into a public branch.  I handle the
&gt; synchronization of these two branches manually.

These interfaces provide a means for remote users to access a BE
repository without bzr or the command line.  As far as users are
concerned, this exposed repository looks pretty much like a
centralized bugtracking system (e.g. bugzilla, ...).

However, with BE we have more bug information living off in other
branches that haven't yet been merged with the exposed repo.  The
problem is two-fold:
  1) how to keep up to date within a distributed community.
  2) how do users find branches/patches that fix bug XYZ.

For (2), I think the best solution at the moment are along the lines
of my little scripts (discussed in the bug 12c comments).  With the
addition of the `be diff --dir DIR` option, it's now even easier to
find more information on bug 565 (or whatever UUID):
  be/be.wtk$ for repo in ../*; do \
              if [ $repo == "be.wtk" ]; then continue; fi; \
              diff=$(be diff --dir $repo --subscribe 565:all); \
              if [ -n "$diff" ]; then \
                echo "Changed from $repo:"; echo "$diff"; \
              fi; \
             done
  Changed from ../be.html:
  New bugs:
    565:fm: be email-bugs for bug submission from bzr-less users
  Changed from ../be.trunk:
  New bugs:
    565:fm: be email-bugs for bug submission from bzr-less users
  Changed from ../cherryflavoredbugseverywhere:
  New bugs:
    565:fm: be email-bugs for bug submission from bzr-less users
where the --dir and --subscribe options to `be diff` are new.  If
people don't like the command line, this would be easy to bundle into
a web-frontend (CFBE?) if you wanted, with a cron job pulling updates
into the tracked branches.

I was starting into a solution for (1) when I did this:

On Mon, Jul 27, 2009 at 08:42:19AM -0400, W. Trevor King wrote:
&gt; My email interface now supports subscription:
&gt;   be subscribe DIR       # see any changes to the bug directory.
&gt;   be subscribe BUG-ID    # see changes to a particular bug.
&gt; See
&gt;   be subscribe --help
&gt; for more details.

The idea was that a dev/user would subscribe to whatever issues they
wanted to track, and they would get email notifications whenever some
action affected any of those issues.  These subscriptions would
percolate through the distributed branches as a result of the usual
mergers.  For example, my subscription to all changes has made it into
the trunk branch (see .be/settings).

This subscription mechanism was setup to work through interactive
public interfaces (my email interface, eventually CFBE, ...), but
it doesn't work for changes made via the command-line interface,
so I browsed around a bit and ran across some interesting workflows
in the bzr documentation
  doc/developers/HACKING.txt, "Communicating and Coordinating"
which points out the following plugins
  * email (http://doc.bazaar-vcs.org/plugins/en/email-plugin.html)
  * dbus (http://doc.bazaar-vcs.org/plugins/en/dbus-plugin.html)
which send automatic notification messages after commits, etc.  If
people want this sort of functionality, it would be easy enough to rig
a hook for `be commit' that sent a diff email to subscribers, which
could include be-devel.</body>
  </comment>
</bug>
<bug>
  <uuid>866cba32-4347-4f51-9b1d-69454638ca78</uuid>
  <short-name>bea/866</short-name>
  <severity>serious</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 07 Feb 2009 21:31:26 +0000</created>
  <summary>Implement adding new assignees/targets.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>738f9826-57b6-43d6-a0cb-0dfeeb185b96</uuid>
    <short-name>bea/866/738</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sat, 07 Feb 2009 21:32:19 +0000</date>
    <content-type>text/plain</content-type>
    <body>Right now you can only select assignees or targets that have already been specified in another bug.  There should be a way to add new ones from the bug edit screen.</body>
  </comment>
</bug>
<bug>
  <uuid>c3edb8c6-a68f-42ef-bde0-142f0a11eaef</uuid>
  <short-name>bea/c3e</short-name>
  <severity>minor</severity>
  <status>open</status>
  <creator>craig &lt;craig@1005HA&gt;</creator>
  <created>Wed, 15 Feb 2012 00:20:07 +0000</created>
  <summary>The demuxulizer is broken</summary>
</bug>
<bug>
  <uuid>2e0f514f-0282-4fe5-b48c-9c2f8451a288</uuid>
  <short-name>bea/2e0</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>Jordi Fita &lt;jordi@rena&gt;</reporter>
  <creator>Jordi Fita &lt;jordi@rena&gt;</creator>
  <created>Tue, 20 Dec 2011 22:01:01 +0000</created>
  <summary>The demuxulizer is broken</summary>
</bug>
<bug>
  <uuid>fbe12beb-7476-4448-97da-300d3f439cec</uuid>
  <short-name>bea/fbe</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>michel &lt;michel@sojourner.localdomain&gt;</reporter>
  <creator>michel &lt;michel@sojourner.localdomain&gt;</creator>
  <created>Tue, 02 Aug 2011 16:50:11 +0000</created>
  <summary>Crash on 'be init' in existing mercurial repo</summary>
  <comment>
    <uuid>311e43ba-3527-49de-936c-524166752afa</uuid>
    <short-name>bea/fbe/311</short-name>
    <author>michel &lt;michel@sojourner.localdomain&gt;</author>
    <date>Tue, 02 Aug 2011 16:54:06 +0000</date>
    <content-type>text/plain</content-type>
    <body>On both be-1.0.1 and the latest git master, 'be init' on an existing mercurial
repo fails.

As reported for the Fedora package:

  https://bugzilla.redhat.com/show_bug.cgi?id=726637

Reproduction:

$ hg init foo
$ cd foo
$ be init
Traceback (most recent call last):
  File "/usr/bin/be", line 26, in &lt;module&gt;
    sys.exit(libbe.ui.command_line.main())
  File "/usr/lib/python2.7/site-packages/libbe/ui/command_line.py", line 333,
in main
    ret = dispatch(ui, command, args)
  File "/usr/lib/python2.7/site-packages/libbe/ui/command_line.py", line 265,
in dispatch
    ret = ui.run(command, options, args)
  File "/usr/lib/python2.7/site-packages/libbe/command/base.py", line 535, in
run
    return command.run(options, args)
  File "/usr/lib/python2.7/site-packages/libbe/command/base.py", line 263, in
run
    self.status = self._run(**params)
  File "/usr/lib/python2.7/site-packages/libbe/command/init.py", line 91, in
_run
    storage.connect()
  File "/usr/lib/python2.7/site-packages/libbe/storage/base.py", line 217, in
connect
    self._connect()
  File "/usr/lib/python2.7/site-packages/libbe/storage/vcs/base.py", line 614,
in _connect
    self.root()
  File "/usr/lib/python2.7/site-packages/libbe/storage/vcs/base.py", line 577,
in root
    root = self._vcs_root(self.repo)
  File "/usr/lib/python2.7/site-packages/libbe/storage/vcs/hg.py", line 109, in
_vcs_root
    return self._u_invoke_client('root', cwd=path)
  File "/usr/lib/python2.7/site-packages/libbe/storage/vcs/hg.py", line 90, in
_u_invoke_client
    mercurial.dispatch.dispatch(fullargs)
  File "/usr/lib64/python2.7/site-packages/mercurial/dispatch.py", line 31, in
dispatch
    if req.ferr:
AttributeError: 'list' object has no attribute 'ferr'

$ yum list mercurial be
Installed Packages
be.noarch                                      1.0.1-1.fc15
mercurial.x86_64                               1.9-2.fc15</body>
  </comment>
</bug>
<bug>
  <uuid>28acb29f-9890-4857-80fe-b1d83d8623d1</uuid>
  <short-name>bea/28a</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>ned &lt;ned@lyta&gt;</reporter>
  <creator>ned &lt;ned@lyta&gt;</creator>
  <created>Thu, 28 Jul 2011 00:22:51 +0000</created>
  <summary>Windows installation problems fix patch</summary>
  <comment>
    <uuid>d92ac3a4-d56a-4c42-bb21-936d66f5315c</uuid>
    <short-name>bea/28a/d92</short-name>
    <author>ned &lt;ned@lyta&gt;</author>
    <date>Thu, 28 Jul 2011 00:38:09 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fairly amazingly, one can actually pipe a file to stdin on Windows using 'type' instead of 'cat'. I didn't know that. Anyway, the only other 'bug' is that BE is VERY slow on an Intel Atom netbook. We're talking seconds per command execution. I don't know what you're doing under the bonnet there, but there is no algorithmic reason why this should be slow - git just absolutely flies on the Atom. I only wish Visual Studio moved more swiftly on the Atom! Thanks, Niall</body>
  </comment>
  <comment>
    <uuid>1cd5d4c0-570a-43e1-93fc-860073206f8d</uuid>
    <short-name>bea/28a/1cd</short-name>
    <author>ned &lt;ned@lyta&gt;</author>
    <date>Thu, 28 Jul 2011 00:29:19 +0000</date>
    <content-type>text/plain</content-type>
    <body>Installing on Windows oddly enough succeeds except for the following two problems: (i) you need to install a be.bat file in the scripts directory (which I hopefully will shortly attach) and (ii) there is a dependency on pyyaml which needs to be easy_install'ed. The latter really ought to be automated during BE's setup.py. Thanks,</body>
  </comment>
  <comment>
    <uuid>34e95981-0929-4170-945f-b3c70efd90e7</uuid>
    <short-name>bea/28a/34e</short-name>
    <in-reply-to>1cd5d4c0-570a-43e1-93fc-860073206f8d</in-reply-to>
    <author>ned &lt;ned@lyta&gt;</author>
    <date>Thu, 28 Jul 2011 00:35:07 +0000</date>
    <content-type>application/bat</content-type>
    <body>QGVjaG8gb2ZmCnB5dGhvbiAtYyAiaW1wb3J0IHN5cywgbGliYmUudWkuY29tbWFuZF9saW5lOyBz
eXMuZXhpdChsaWJiZS51aS5jb21tYW5kX2xpbmUubWFpbigpKTsiICUqCnNldCBCRV9UT09MX0VS
Uk9STEVWRUw9JUVSUk9STEVWRUwlCmV4aXQgL0IgJUJFX1RPT0xfRVJST1JMRVZFTCUK
</body>
  </comment>
</bug>
<bug>
  <uuid>15aef818-6a62-41be-905d-6b92edc405bf</uuid>
  <short-name>bea/15a</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>sasha &lt;sasha@rey&gt;</reporter>
  <creator>sasha &lt;sasha@rey&gt;</creator>
  <created>Wed, 20 Jul 2011 12:21:51 +0000</created>
  <summary>mercurial 1.9 breaks be with AttributeError: 'list' object has no attribute 'ferr' in mercurial.dispatch</summary>
  <comment>
    <uuid>e553c1fd-a3e5-46b1-807c-0ef2efbb7fe2</uuid>
    <short-name>bea/15a/e55</short-name>
    <author>sasha &lt;sasha@rey&gt;</author>
    <date>Wed, 20 Jul 2011 12:24:40 +0000</date>
    <content-type>text/plain</content-type>
    <body>The mercurial API has changed so that instead of passing a list, one needs a mercurial.dispatch.request. One way this can be done is by calling mercurial.dispatch.dispatch(fullargs) in line 90 of libbe.storage.vcs.hg, which should resolve the error for hg 1.9 but might create a problem for some earlier versions.</body>
  </comment>
</bug>
<bug>
  <uuid>b398c02b-3b0f-4730-9598-279e99bbc8a5</uuid>
  <short-name>bea/b39</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>Valtteri Kokkoniemi &lt;rvk@iki.fi&gt;</reporter>
  <creator>Valtteri Kokkoniemi &lt;rvk@iki.fi</creator>
  <created>Thu, 17 Feb 2011 10:38:22 +0000</created>
  <summary>created-tags break import-xml</summary>
  <comment>
    <uuid>6ca8e92a-52b2-4909-a088-6bae5d7511a6</uuid>
    <short-name>bea/b39/6ca</short-name>
    <author>kokval &lt;kokval@vesuri&gt;</author>
    <date>Thu, 17 Feb 2011 10:40:51 +0000</date>
    <content-type>text/plain</content-type>
    <body>From 80ce5b9707750edba08842cd267843fa035d7b0a Mon Sep 17 00:00:00 2001
From: Valtteri Kokkoniemi &lt;rvk@iki.fi&gt;
Date: Thu, 17 Feb 2011 12:03:56 +0200
Subject: [PATCH] fixed created tag handling in import-xml

---
 libbe/bug.py |    4 ++++
 1 files changed, 4 insertions(+), 0 deletions(-)

diff --git a/libbe/bug.py b/libbe/bug.py
index 6d3d836..122c81a 100644
--- a/libbe/bug.py
+++ b/libbe/bug.py
@@ -395,6 +395,10 @@ class Bug (settings_object.SavedSettingsObject):
                 if child.tag == 'uuid':
                     uuid = text
                     continue # don't set the bug's uuid tag.
+		elif child.tag == 'created':
+                    self.time = utility.str_to_time(text)
+                    self.explicit_attrs.append('time')
+                    continue
                 elif child.tag == 'extra-string':
                     estrs.append(text)
                     continue # don't set the bug's extra_string yet.
-- 
1.7.1</body>
  </comment>
  <comment>
    <uuid>3193f33d-ed57-4c32-9f6e-598bdc4ea67e</uuid>
    <short-name>bea/b39/319</short-name>
    <author>kokval &lt;kokval@vesuri&gt;</author>
    <date>Thu, 17 Feb 2011 10:40:21 +0000</date>
    <content-type>text/plain</content-type>
    <body>show --xml generates &lt;created&gt; tags for bug creation timestamp, but these break in import

for fix, see attached patch</body>
  </comment>
</bug>
<bug>
  <uuid>5a1c1d88-e2e9-45e9-b163-0f335c2b89ff</uuid>
  <short-name>bea/5a1</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>Valtteri Kokkoniemi &lt;rvk@iki.fi&gt;</reporter>
  <creator>Valtteri Kokkoniemi &lt;rvk@iki.fi&gt;</creator>
  <created>Thu, 17 Feb 2011 08:19:41 +0000</created>
  <summary>xml import of new bugs is broken</summary>
  <comment>
    <uuid>c50ada21-1ce1-4d1b-bcc0-834746ba176c</uuid>
    <short-name>bea/5a1/c50</short-name>
    <author>kokval &lt;kokval@vesuri&gt;</author>
    <date>Thu, 17 Feb 2011 08:21:33 +0000</date>
    <content-type>text/plain</content-type>
    <body>probably due to refactoring at some point in history

for fix, see the attached patch</body>
  </comment>
  <comment>
    <uuid>1bb12bbd-27b8-4638-abdb-c69384707b60</uuid>
    <short-name>bea/5a1/1bb</short-name>
    <author>Valtteri Kokkoniemi &lt;rvk@iki.fi&gt;</author>
    <date>Thu, 17 Feb 2011 08:25:02 +0000</date>
    <content-type>text/plain</content-type>
    <body>From 1a6ce70b03a8e7df3e21189cd552d95d28535c1d Mon Sep 17 00:00:00 2001
From: Valtteri Kokkoniemi &lt;rvk@iki.fi&gt;
Date: Thu, 17 Feb 2011 10:11:09 +0200
Subject: [PATCH] fixed importing new bugs

---
 libbe/command/import_xml.py |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

diff --git a/libbe/command/import_xml.py b/libbe/command/import_xml.py
index bd25372..b4da2fd 100644
--- a/libbe/command/import_xml.py
+++ b/libbe/command/import_xml.py
@@ -184,7 +184,7 @@ class Import_XML (libbe.command.Command):
             except KeyError:
                 old = None
             if old == None:
-                bd.append(new)
+                bugdir.append(new)
             else:
                 old.load_comments(load_full=True)
                 old.merge(new, accept_changes=accept_changes,
-- 
1.7.1</body>
  </comment>
</bug>
<bug>
  <uuid>c3f2bf89-f5d3-4576-b74e-ca7b42a5e2ba</uuid>
  <short-name>bea/c3f</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>dietmarw &lt;dietmarw@HeX&gt;</reporter>
  <creator>dietmarw &lt;dietmarw@HeX&gt;</creator>
  <created>Tue, 01 Feb 2011 21:41:27 +0000</created>
  <summary>Set default user paths according to PEP370</summary>
  <comment>
    <uuid>e9ef9fdd-4d0e-4438-a23d-6658eae9b349</uuid>
    <short-name>bea/c3f/e9e</short-name>
    <author>dietmarw &lt;dietmarw@HeX&gt;</author>
    <date>Tue, 01 Feb 2011 21:52:29 +0000</date>
    <content-type>text/plain</content-type>
    <body>The make install will curently install the bin files in ~/bin and the lib files in ~/lib. Unfortunately this will lead to the lib files not being recognised by python by default. http://www.python.org/dev/peps/pep-0370/ defines that the paths should be set to '~/.local/bin' and '~/.local/lib'. Here they will also be automatically discoverable by python. (At least on Ubuntu 10.10)</body>
  </comment>
</bug>
<bug>
  <uuid>e30e2b6b-acc9-4b93-88c6-b63b6e30b593</uuid>
  <short-name>bea/e30</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Mon, 01 Feb 2010 14:28:13 +0000</created>
  <summary>Where should the vcs-name and encoding configuration options live?</summary>
  <comment>
    <uuid>2cd562f5-fcb9-4cc5-bf8c-ad5c9d960761</uuid>
    <short-name>bea/e30/2cd</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 01 Feb 2010 14:34:10 +0000</date>
    <content-type>text/plain</content-type>
    <body>Before Bugs Everywhere Directory v1.4 we kept
  "encoding"
  "vcs_name"
and other bugdir-wide configuration options in ./be/settings

Now we don't store them anymore, but we should keep some.  For
example, the encoding setting is useful when running `be html` in a
cron job.  The settings are repository wide, so they should _still_ go
in ./be/settings (since there may, eventually, be several bugdirs in a
repo), but who's job is it to read that file?

The user interface takes care of encoding, but the storage object 
would be checking for a bug repository and reading the settings file.
How/when does it notify the UI?</body>
  </comment>
  <comment>
    <uuid>68ec74b9-d2c7-421f-ac70-602b43bbd263</uuid>
    <short-name>bea/e30/68e</short-name>
    <in-reply-to>2cd562f5-fcb9-4cc5-bf8c-ad5c9d960761</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 01 Feb 2010 15:35:57 +0000</date>
    <content-type>text/plain</content-type>
    <body>On the other hand, since encoding decisions seem to be locale-driven,
so you can just setup the appropriate locale environmental variables
in your cron job:
  export LANG=en_US.utf8
and that should do it...</body>
  </comment>
</bug>
<bug>
  <uuid>c1b76442-eab6-4796-9517-8454425d7757</uuid>
  <short-name>bea/c1b</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Mon, 25 Jan 2010 21:59:03 +0000</created>
  <summary>`be serve` authentication / authorization</summary>
  <comment>
    <uuid>76d54016-755b-42ca-ad07-eb9a1c77c33d</uuid>
    <short-name>bea/c1b/76d</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 28 Jan 2010 22:58:08 +0000</date>
    <content-type>text/plain</content-type>
    <body>Steve's had some related thoughts on authentication for CFBE:
bea86499-824e-4e77-b085-2d581fa9ccab/d9959864-ea91-475a-a075-f39aa6760f98/21c90231-d7f2-49bb-97d9-99e16459d799.</body>
  </comment>
  <comment>
    <uuid>27a5a4cc-1782-4509-a3d2-db00c190f97d</uuid>
    <short-name>bea/c1b/27a</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 27 Jan 2010 13:05:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>Added rudimentary authorization with `be serve --auth FILE`.

Special username 'guest' is not allowed to change name,password or
write to the repository.  All other users in the auth file are allowed
to do all of that.  A more robust solution would be to have POSIX
permissions on each storage item, or something.

Note that while the server supports name/password changes for
non-guest users, there is no command-line interface to this
functionality.  There is also no automatic way to register
(i.e. create entries).</body>
  </comment>
</bug>
<bug>
  <uuid>5fb11e65-68a0-4015-b404-737238299cdc</uuid>
  <short-name>bea/5fb</short-name>
  <severity>minor</severity>
  <status>open</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sat, 23 Jan 2010 19:08:40 +0000</created>
  <summary>Add change hooks to Storage class</summary>
  <extra-string>BLOCKS:52034fd0-ec50-424d-b25d-2beaf2d2c317</extra-string>
  <comment>
    <uuid>f3e90a7e-b8c4-4a7c-8609-6a783ae59762</uuid>
    <short-name>bea/5fb/f3e</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 23 Jan 2010 19:17:10 +0000</date>
    <content-type>text/plain</content-type>
    <body>Provide hooks so users can easily setup auto-commits, subscriber
notification, etc.  Probably either Darcs-style options:
  $ be COMMAND --help
  ...
    --posthook=COMMAND   Specify command to run after this command.
    --no-posthook        Do not run posthook command.
    --prompt-posthook    Prompt before running posthook. [DEFAULT]
    --run-posthook       Run posthook command without prompting.
  ...
or a Git-style hooks directory:
  $ tree .be
  .be/
  |-- version
  |-- hooks
  .   |-- post-commit.sh
  .   |-- pre-commit.sh
      `-- update.sh</body>
  </comment>
  <comment>
    <uuid>628a050a-f969-4290-8468-f5e991528f40</uuid>
    <short-name>bea/5fb/628</short-name>
    <in-reply-to>f3e90a7e-b8c4-4a7c-8609-6a783ae59762</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 31 Jan 2010 18:04:49 +0000</date>
    <content-type>text/plain</content-type>
    <body>Either of these could be added at the
  libbe.command.base.Command.run
level.

The Git hooks would be 'pre-&lt;command-name&gt;' and 'post-&lt;command-name&gt;'.

Oh, and the hooks are therefore command-level hooks, not storage-level
hooks.  We still want storage-level hooks for notification emails, etc,
and they would definately have to follow the Git directory approach.
Hmm.  Storage level hooks will be awkward...</body>
  </comment>
</bug>
<bug>
  <uuid>01c9a900-61f9-41f7-9b2f-dd8f89e25b1b</uuid>
  <short-name>bea/01c</short-name>
  <severity>minor</severity>
  <status>open</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Wed, 20 Jan 2010 20:35:12 +0000</created>
  <summary>Need command output abstraction for flexible UIs</summary>
  <comment>
    <uuid>f5139012-e20b-4d24-90a5-10d969ddd364</uuid>
    <alt-id>&lt;20100120182425.GB14791@mjolnir&gt;</alt-id>
    <short-name>bea/01c/f51</short-name>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 20 Jan 2010 18:24:25 +0000</date>
    <content-type>text/plain</content-type>
    <body>On Wed, Jan 20, 2010 at 09:34:44AM -0500, W. Trevor King wrote:
&gt; On Sun, Dec 06, 2009 at 04:47:23AM -0500, W. Trevor King wrote:
&gt; &gt; Steve, I've caught my CFBE branch up to my current pre-trunk BE and
&gt; &gt; added dependency links to the bug page, so you should be all set once
&gt; &gt; you get back to CFBE.
&gt; 
&gt; And I haven't pulled it up to date with my recent reorganization.  As
&gt; far as release tarballs go though, we don't have to port to Bazaar at
&gt; all, we can stuff a recent CFBE snapshot into the BE tarball.  How
&gt; do people feel about that?

Ok, I've got CFBE working with my BE head:
  http://www.physics.drexel.edu/~wking/code/hg/cfbe/
However, I haven't reworked CFBE to take advantage of the new command
structure.

We'll need to extend libbe.command.base.Argument a bit as we work this
out, but I expect we can auto-generate handlers for various commands
with something along the lines of:

&lt;snip web.py&gt;

class CommandHandler (object):
    def __init__(self, command):
        self.command = command
    def __call__(self, *args, **kwargs):
        if GET:
            template = self.env.get_template('command.html')
            return template.render(command=self.command)
	else:
            try:
                ret = libbe.ui.command_line.dispatch(
                    self.command.ui, self.command, *args, **kwargs)
            except libbe.command.UserError, e:
                HANDLE ERROR
            stdout = self.command.ui.get_stdout()
            DISPLAY STDOUT OR REDIRECT...

class WebInterface (libbe.command.UserInterface):
    ...
    def add_commands(self):
        for command_name in libbe.command.commands():
            Class = libbe.command.get_command_class(
                command_name=command_name)
            command = Class(ui=self)
            self.command_name = cherrypy.expose(
                CommandHandler(command))

&lt;/snip web.py&gt;

&lt;snip command.html&gt;

&lt;form id="command-form" action="/command" method="post"&gt;
    &lt;fieldset&gt;
        {% for option in command.options %}
	  {{ option_form_html(option) }}
        {% endfor %}
        {% for argument in command.args %}
	  {{ argument_form_html(argument) }}
        {% endfor %}
    &lt;/fieldset&gt;
&lt;/form&gt;

{{ command.help() }}

&lt;/snip command.html&gt;

Of course, incorperating interactive functionality in command output
(i.e. changing the bug target from the bug-show page), doesn't fit
into this model.  To do that, we'd have to abstract the default
command output the way we've already abstracted the commands and their
input...  This sounds like a lot of work, and it is, but the goal is
that BE adds functionality (new commands, option, etc.), and CFBE,
be-handle-mail, etc. automatically incorperate the new stuff.

Thoughts?</body>
  </comment>
  <comment>
    <uuid>b8e5c376-32a4-42ea-b6b2-adbee069384a</uuid>
    <alt-id>&lt;20100120183646.GC14791@mjolnir&gt;</alt-id>
    <short-name>bea/01c/b8e</short-name>
    <in-reply-to>f5139012-e20b-4d24-90a5-10d969ddd364</in-reply-to>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 20 Jan 2010 18:36:46 +0000</date>
    <content-type>text/plain</content-type>
    <body>On Wed, Jan 20, 2010 at 01:24:25PM -0500, W. Trevor King wrote:
&gt; Of course, incorperating interactive functionality in command output
&gt; (i.e. changing the bug target from the bug-show page), doesn't fit
&gt; into this model.  To do that, we'd have to abstract the default
&gt; command output the way we've already abstracted the commands and their
&gt; input...

Does anyone know of any output-abstraction implementations to look at
for inspiration.
  * How would we handle the options we currently pass through
    (shortlist, show_comments, etc.)?
  * Would standard arguments know how to display themselves?
    class Status (Argument):
        def str(self, ui, command, *args, **kwargs):
            ui.display_status(self, command, *args, **kwargs)
    class Bug (Argument):
        def str(self, ui, command, *args, **kwargs):
            ui.display_bug(self, command, *args, **kwargs)
    ...</body>
  </comment>
</bug>
<bug>
  <uuid>3438b72c-6244-4f1d-8722-8c8d41484e35</uuid>
  <short-name>bea/343</short-name>
  <severity>minor</severity>
  <status>open</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 03 Jan 2010 16:23:42 +0000</created>
  <summary>Attach tests to bugs</summary>
  <comment>
    <uuid>ba96f1c0-ba48-4df8-aaf0-4e3a3144fc46</uuid>
    <short-name>bea/343/ba9</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 03 Jan 2010 16:32:13 +0000</date>
    <content-type>text/plain</content-type>
    <body>It would be nice if we could store tests.
  .be/BUGDIR/tests/...
and link them from bugs.

Then running
  test.py BUGDIR/BUG
would run the tests for that particular bug.

This would provide regression testing via
  test.py $(be list --ids --status fixed)</body>
  </comment>
  <comment>
    <uuid>e7d8343a-bd85-4359-bcda-bf0dc1e8177a</uuid>
    <short-name>bea/343/e7d</short-name>
    <in-reply-to>ba96f1c0-ba48-4df8-aaf0-4e3a3144fc46</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 31 Jan 2010 17:36:52 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; It would be nice if we could store tests.
&gt;   .be/BUGDIR/tests/...
&gt; and link them from bugs.

Better: have them be comments with a TEST tag.

The mime type could hint at the execution mechanism:
  text/x-python
  application/x-sh
  ...

&gt; Then running
&gt;   test.py BUGDIR/BUG
&gt; would run the tests for that particular bug.
&gt; 
&gt; This would provide regression testing via
&gt;   test.py $(be list --ids --status fixed)

This should be a 'test' command (libbe.command.test.Test), since
people will want to test bugs for their own projects, and out current
test.py is for testing BE specifically.  It should be
  be test BUGDIR/BUG
  be test $(be list --ids --status fixed)

We _should_ add be
  test $(be list --ids --status fixed)
to test.py for regression testing.

This whole thing would make the fixed/closed distinction more clear,
since fixed bugs would get tests run and expect success, while closed
bugs' tests would be skipped.

Finally, if users are submitting tests on their own, it would be a
good idea to sandbox them, but a portable way for sandboxing scripts
sounds very complicated.  It would probably be easier to sandbox
python scripts, but I don't know what that would look like...

A work around would be to allow users to post tests, but not allow
them to set the TEST flag.  Then the bugdir maintainer could set the
flag themselves once they'd vetted the test.  Much uglier than
sandboxing, but also much more easily implemented.</body>
  </comment>
</bug>
<bug>
  <uuid>814e39c0-68ee-4165-9166-19e2aee9c07d</uuid>
  <short-name>bea/814</short-name>
  <severity>minor</severity>
  <status>open</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 03 Jan 2010 13:12:38 +0000</created>
  <summary>Add Roundup-like flexibility</summary>
  <comment>
    <uuid>d463e2d9-6dcc-41a4-a6b2-647fb3bddf88</uuid>
    <short-name>bea/814/d46</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 03 Jan 2010 14:16:55 +0000</date>
    <content-type>text/plain</content-type>
    <body>The Roundup issue tracker
  http://roundup.sourceforge.net/
has been around for a while, and provides a nice, flexible design
  http://roundup.sourceforge.net/docs/design.html
What ideas from Roundup are worth incorperating in our setup?

Roundup's great strength is the flexibility of its data model and
range of generic support.  It's very easy to extend.  However, there
is only so far you can go with generic support.  Roundup lacks analogs
to the following Command subclasses (as far as I know):
  Diff
    Has per-issue logs, but no repository-wide summary
  Merge
  Commit
    No VCS backends, see http://issues.roundup-tracker.org/issue2550547
  Import_xml
  Serve
    Has HTML server, but no remote command-line access
Of course, none of these would be particularly hard to add to Roundup,
with the possible exception of VCS backends, which appears to be
in-progress anyway.  However, I really like the simplicity of
  `be init`
and the ability to postpone repository customization until you need
it.  So, can we trim down the BE internals to make BE more extensible
without sacrificing our nice default setup and its tools?  The problem
is, how to the commands do their thing if they don't know what they're
working with?

Say, for example, I want to run `be depend bugA bugB`, but my bugs
don't have blocks or blocked_by link properties.  That could be easily
handled by having each command would have to keep track of which
properties it needed and raise appropriate exceptions.

List, Show, Import_xml, etc. would presumably use templates to define
their output/input formats.

As far as postponed customization goes, it would be easy enough to
duplicate Roundup's schema.py and provide a default schema.py for
bugtracking.  This would improve our current system by keeping all the
configurable bits under version control from the start (equivalent to
setting _versioned_property(require_save=True) for all properties).

Another part of the difference between BE and Roundup seems to be due
to the initial backend selection.  Roundup is built on databases,
which encourages their keyed-Class approach with (property, value)
pairs of predefined types.  They use Classes for everything, down to
status values, etc., while we've built those sorts of things into
_versioned_property()s.
Benefits of Roundup approach:
  * easy to configure/alter/retrieve list of allowed values
  * no need to hard-code properties or resort to extra_strings
  * assigned values are actually links to centralized definitions
    - easy updates
Benefits of BE approach:
  * single file for all properties
    - one read and you're done
    - many file systems don't handle 'lots of tiny files' well
  * assigned values are actual values, not links to centralized defs.
    - easy to merge by hand, no need to look up references.
Since it would be fairly simple to add a merging tool that handled the
reference lookup transparently, we can move to a Roundup-like Class
structure by using our current mapfile implementation to store small
Classes.

Finally, would it be easier to merge these Roundup features into BE,
or merge the BE features into Roundup...</body>
  </comment>
  <comment>
    <uuid>17d045d1-3b21-4d3d-8f81-29a5bbc5e6c1</uuid>
    <short-name>bea/814/17d</short-name>
    <in-reply-to>d463e2d9-6dcc-41a4-a6b2-647fb3bddf88</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 03 Jan 2010 16:02:57 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; Roundup's great strength is the flexibility of its data model and
&gt; range of generic support.  It's very easy to extend...
&gt; ...
&gt; As far as postponed customization goes, it would be easy enough to
&gt; duplicate Roundup's schema.py and provide a default schema.py for
&gt; bugtracking.  This would improve our current system by keeping all the
&gt; configurable bits under version control from the start (equivalent to
&gt; setting _versioned_property(require_save=True) for all properties).

How will we handle diffs between with revisions with different
schema.py?  This re-raises bea86499-824e-4e77-b085-2d581fa9ccab/ed5eac05-80ed-411d-88a4-d2261b879713/c664b7be-ded5-42dd-a16a-82b2bdb52e36 (bea86499-824e-4e77-b085-2d581fa9ccab/1100c966-9671-4bc6-8b68-6d408a910da1/bd1207ef-f97e-4078-8c5d-046072012082), but we
_expect_ schema.py to evolve, while before we had expected on-disk
versions to stabilize.</body>
  </comment>
</bug>
<bug>
  <uuid>52a15454-196c-4990-b55d-be2e37d575c3</uuid>
  <short-name>bea/52a</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 07 Feb 2009 21:32:51 +0000</created>
  <summary>Fix the overflow problem in the comments.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>81f69fbd-1ca5-4f89-a6e1-79ea1e6bf4d9</uuid>
  <short-name>bea/81f</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Mon, 02 Feb 2009 01:12:37 +0000</created>
  <summary>The CherryPy server seems to drop connections randomly.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>dd7aa57c-f184-495a-8520-2676c1066fb4</uuid>
  <short-name>bea/dd7</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Mon, 02 Feb 2009 01:11:47 +0000</created>
  <summary>The external pane sometimes loads in the wrong place.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>24aab4bf-b525-48d6-9666-626e3ddcecf7</uuid>
    <short-name>bea/dd7/24a</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sat, 07 Feb 2009 18:36:56 +0000</date>
    <content-type>text/plain</content-type>
    <body>I think I just need to adjust the wrapper width.</body>
  </comment>
</bug>
<bug>
  <uuid>04edb940-06dd-4ded-8697-156d54a1d875</uuid>
  <short-name>bea/04e</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Mon, 02 Feb 2009 00:38:49 +0000</created>
  <summary>Assignee default selection is broken if two people have the same name but different emails.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>e3389187-1e84-43d5-b40b-26f53090edff</uuid>
    <short-name>bea/04e/e33</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Mon, 02 Feb 2009 00:39:43 +0000</date>
    <content-type>text/plain</content-type>
    <body>The problem is the jQuery selector... I need to escape something special but I'm not sure what.</body>
  </comment>
</bug>
<bug>
  <uuid>ac72991a-72e5-4b14-b53c-0fa38d0f31bb</uuid>
  <short-name>bea/ac7</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sun, 01 Feb 2009 23:59:17 +0000</created>
  <summary>The bug editing/comment forms break the rhythm.</summary>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>0be47243-c172-4de9-b71b-d5dea60f91d5</uuid>
  <short-name>bea/0be</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sun, 01 Feb 2009 21:26:49 +0000</created>
  <summary>Fix the null creation date bug.  See bug ee6 in the BE repo for an example that breaks things.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>cfb52b6c-d1a6-4018-a255-27cc1c878193</uuid>
  <short-name>bea/cfb</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sun, 01 Feb 2009 21:15:35 +0000</created>
  <summary>Change the write operations to be inline/AJAJ operations.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>9bc14860-b2bb-4442-85ea-0b8e7083457b</uuid>
  <short-name>bea/9bc</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 05:18:56 +0000</created>
  <summary>Create a project page.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>615ad650-9fb9-4026-9779-58d42b4e528e</uuid>
  <short-name>bea/615</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 03:07:32 +0000</created>
  <summary>Figure out how to best fix the column widths.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>700cd3f1-70b6-4887-89a2-c1d039732add</uuid>
  <short-name>bea/700</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 03:00:35 +0000</created>
  <summary>Implement pagination.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>63619cf7-89eb-4e64-91e9-b8a73d2a6c72</uuid>
  <short-name>bea/636</short-name>
  <severity>minor</severity>
  <status>open</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 02:59:11 +0000</created>
  <summary>Implement sorting.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>16989098-aa1d-4a08-bff9-80446b4a82c5</uuid>
  <short-name>bea/169</short-name>
  <severity>wishlist</severity>
  <status>open</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Thu, 28 Jan 2010 23:10:48 +0000</created>
  <summary>Generating per-bugdir/bug/comment change logs</summary>
  <comment>
    <uuid>85770405-0ead-4044-a3cf-082615ff1b6f</uuid>
    <short-name>bea/169/857</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 29 Jan 2010 01:12:54 +0000</date>
    <content-type>text/plain</content-type>
    <body>This is an outgrowth of bea86499-824e-4e77-b085-2d581fa9ccab/1100c966-9671-4bc6-8b68-6d408a910da1/bd1207ef-f97e-4078-8c5d-046072012082:
&gt; All of this makes me wonder how much we care about being able to
&gt; see bug diffs for any repository format older than the current one.
&gt; I think that we don't really care ;).  After all, the on-disk
&gt; format should settle down as BE matures :p.  When you _do_ want
&gt; to see the long-term history of a particular bug, there's always
&gt;   bzr log .be/123/bugs/456/values
&gt; or the equivalent for your VCS.  If access to the raw log ends
&gt; up being important, it should be very easy to add
&gt;   libbe.storage.base.VersionedStorage.log(id)
&gt;   libbe.command.log

Access to the (parsed) logs will be important for pretty-printing
bugdir/bug/comment change logs.  Since we do version the bug
repository, users will expect us to be able to list the history for
any particular item (e.g. for "last activity" timestamps, automatic
reminder emails, whatever).  While it does not necessarily need to be
able to delve into old storage formats, it does need to get
implemented.  It's probably worth encapsulating changes in something
like a list of Diff() objects, although it might be worth linking
along bug lines, etc., like VCS annotation.</body>
  </comment>
</bug>
<bug>
  <uuid>9c25fd46-5e2b-478f-8beb-01b89e27c1f2</uuid>
  <short-name>bea/9c2</short-name>
  <severity>wishlist</severity>
  <status>open</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Thu, 28 Jan 2010 15:36:16 +0000</created>
  <summary>Can comment punt functionality to email.Message?</summary>
  <comment>
    <uuid>7cd2d475-676f-4d60-b431-c7635468e9bd</uuid>
    <short-name>bea/9c2/7cd</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 28 Jan 2010 15:41:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>The comment class could be streamlined and standardized by making it
subclass (Tree, email.Message).  This should make the per-bug, mini
mailing list more expressive, and add support for fancy email
features.  On the other hand, it could make the Comment/xml interface,
HTML production, etc. more awkward.

Time for another look at Debian's tracker, or do they only allow
text/plain, single-part messages?</body>
  </comment>
</bug>
<bug>
  <uuid>7cb42a60-c977-40db-b2a1-19917c10cace</uuid>
  <short-name>bea/7cb</short-name>
  <severity>wishlist</severity>
  <status>open</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sat, 23 Jan 2010 18:49:03 +0000</created>
  <summary>`be list --this-version` listing bugs affecting your version of BE</summary>
  <comment>
    <uuid>a555d577-7f8c-49f2-96f6-263ce5fdff8e</uuid>
    <short-name>bea/7cb/a55</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 23 Jan 2010 18:59:03 +0000</date>
    <content-type>text/plain</content-type>
    <body>Usage case:
  * User A installs version 1.0 which contains bug /abc.
  * Development continues, fixing bug /abc.
  * User A wants to see which bugs affect their version, and query the
    main bug repository.
      $ be --repo http://bugseverywhere.org/bugs list --this-version
      bea/abc:om: Whatsit not implemented.
      $ be --repo http://bugseverywhere.org/bugs show bea/abc
                ID : abc...
        Short name : bea/abc
          Severity : minor
            Status : fixed
	    ...
      Whatsit not implemented.
      --------- Comment ---------
      Name: bea/abc/def
      From: ...
      Date: Sat, 23 Jan 2010 14:00 ...
      
      Whatsit implemented.
    "Aha!", says the user, "I need to upgrade to a version of BE
    that's more recent than 2010/01/23 to get Whatsit functionality."</body>
  </comment>
  <comment>
    <uuid>d533d72f-2365-4309-a2bb-6bae269235fe</uuid>
    <short-name>bea/7cb/d53</short-name>
    <in-reply-to>a555d577-7f8c-49f2-96f6-263ce5fdff8e</in-reply-to>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 15 Jul 2010 12:08:54 +0000</date>
    <content-type>text/plain</content-type>
    <body>This would require snapshotting the current BE bugdir on
packaging/installation.  Easy enough to do, but usage should probably be
  be --repo INSTALLED
or
  be --installed
to load the snapshot bugdir.

I'm not sure if we actually want to do this, so I'm demoting the issue
to wishlist.</body>
  </comment>
</bug>
<bug>
  <uuid>da2b09ff-af24-40f3-9b8d-6ffaa5f41164</uuid>
  <short-name>bea/da2</short-name>
  <severity>wishlist</severity>
  <status>open</status>
  <reporter>Gianluca Montecchi &lt;gian@grys.it&gt;</reporter>
  <creator>Gianluca Montecchi &lt;gian@grys.it&gt;</creator>
  <created>Tue, 04 Aug 2009 21:15:52 +0000</created>
  <summary>Add an icon near the status string in "be html" output</summary>
</bug>
<bug>
  <uuid>52034fd0-ec50-424d-b25d-2beaf2d2c317</uuid>
  <short-name>bea/520</short-name>
  <severity>wishlist</severity>
  <status>open</status>
  <reporter>Martin F Krafft &lt;madduck@debian.org&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Fri, 24 Jul 2009 12:04:08 +0000</created>
  <summary>Allow autocommit option for command line interface?</summary>
  <extra-string>BLOCKED-BY:5fb11e65-68a0-4015-b404-737238299cdc</extra-string>
  <comment>
    <uuid>b17a561a-6100-490e-84eb-d1ae4b617940</uuid>
    <short-name>bea/520/b17</short-name>
    <author>Martin F Krafft &lt;madduck@debian.org&gt;</author>
    <date>Fri, 24 Jul 2009 12:09:02 +0000</date>
    <content-type>text/plain</content-type>
    <body>...
Also, why doesn't be commit after it takes an action? I think it's
kinda weird that I have to commit after creating a new bug.
...

as posted in
    http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=477125
  on
    Fri, 12 Jun 2009 17:03:02 +0200</body>
  </comment>
  <comment>
    <uuid>4c50ca0b-a08f-4723-b00d-4bf342cf86b6</uuid>
    <short-name>bea/520/4c5</short-name>
    <in-reply-to>b17a561a-6100-490e-84eb-d1ae4b617940</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 24 Jul 2009 12:33:58 +0000</date>
    <content-type>text/plain</content-type>
    <body>I'm all for flexibility, so long as it doesn't require too much
hackery to implement it.  You'll have two problems:

  * Determining what to commit.

    You'd have to have RCS keep a log of all versioned files it
    touched, and extend .commit() to accept the keyword list "files"
    and commit only those files.  This is doable, but maybe not worth
    the trouble.

  * Generating meaningful commit messages.

    You'd have to add this functionality to each command (and future
    commands).

This would probably not be a good idea for the Arch and Mercurial
backends, since they have a limited ability to rewrite history when
you screw up your commit message (as far as I can tell).  Mercurial
does have "hg rollback", but it only works once, and lots of
typo-correction commits would just make the logs awkward.</body>
  </comment>
  <comment>
    <uuid>79fb6ef2-176c-45c0-b898-59c3c3e0aafe</uuid>
    <short-name>bea/520/79f</short-name>
    <in-reply-to>4c50ca0b-a08f-4723-b00d-4bf342cf86b6</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 06 Dec 2009 21:45:15 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt;   * Determining what to commit.
&gt; 
&gt;     You'd have to have RCS keep a log of all versioned files it
&gt;     touched, and extend .commit() to accept the keyword list "files"
&gt;     and commit only those files.  This is doable, but maybe not worth
&gt;     the trouble.

On the other hand, just attemting to commit everything after each
command would make it nice and easy to commit bug fixes:
  be --auto-commit status XYZ fixed
which would commit whatever changes you had outstanding with an
appropriate commit message.</body>
  </comment>
</bug>
<bug>
  <uuid>77399855-6300-41a8-91a3-decbb915a3ff</uuid>
  <short-name>bea/773</short-name>
  <severity>target</severity>
  <status>open</status>
  <created>Thu, 24 Jun 2010 22:19:20 +0000</created>
  <summary>1.0</summary>
  <extra-string>BLOCKED-BY:27549110-e491-4651-81ab-84de2ed8e14a</extra-string>
</bug>
<bug>
  <uuid>76a6140e-0800-453c-9720-29cc161663d1</uuid>
  <short-name>bea/76a</short-name>
  <severity>target</severity>
  <status>open</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 06 Dec 2009 07:14:32 +0000</created>
  <summary>beta</summary>
  <extra-string>BLOCKED-BY:04edb940-06dd-4ded-8697-156d54a1d875</extra-string>
  <extra-string>BLOCKED-BY:0a234f51-2fdf-4001-a04f-b7e02c2fa47b</extra-string>
  <extra-string>BLOCKED-BY:0be47243-c172-4de9-b71b-d5dea60f91d5</extra-string>
  <extra-string>BLOCKED-BY:24555ea1-76b5-40a8-918f-115a28f5f36a</extra-string>
  <extra-string>BLOCKED-BY:312fb152-0155-45c1-9d4d-f49dd5816fbb</extra-string>
  <extra-string>BLOCKED-BY:52a15454-196c-4990-b55d-be2e37d575c3</extra-string>
  <extra-string>BLOCKED-BY:615ad650-9fb9-4026-9779-58d42b4e528e</extra-string>
  <extra-string>BLOCKED-BY:63619cf7-89eb-4e64-91e9-b8a73d2a6c72</extra-string>
  <extra-string>BLOCKED-BY:700cd3f1-70b6-4887-89a2-c1d039732add</extra-string>
  <extra-string>BLOCKED-BY:81f69fbd-1ca5-4f89-a6e1-79ea1e6bf4d9</extra-string>
  <extra-string>BLOCKED-BY:866cba32-4347-4f51-9b1d-69454638ca78</extra-string>
  <extra-string>BLOCKED-BY:9bc14860-b2bb-4442-85ea-0b8e7083457b</extra-string>
  <extra-string>BLOCKED-BY:cfb52b6c-d1a6-4018-a255-27cc1c878193</extra-string>
  <extra-string>BLOCKED-BY:dd7aa57c-f184-495a-8520-2676c1066fb4</extra-string>
  <extra-string>BLOCKED-BY:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>171819aa-c092-4ddf-ace3-797635fa2572</uuid>
  <short-name>bea/171</short-name>
  <severity>fatal</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Fri, 30 Jan 2009 03:16:26 +0000</created>
  <summary>Get a basic template mocked up for the list page.  Go further from there.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>cf56e648-3b09-4131-8847-02dff12b4db2</uuid>
  <short-name>bea/cf5</short-name>
  <severity>critical</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Fri, 27 Jan 2006 14:37:25 +0000</created>
  <summary>OK, maybe not fatal, but how about a new name that suggests process tracking, not just bugs?</summary>
  <comment>
    <uuid>0e5fab2a-66eb-4f7d-979f-b50181f604d4</uuid>
    <short-name>bea/cf5/0e5</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 19:48:44 +0000</date>
    <content-type>text/plain</content-type>
    <body>From Aaron's Mon, 24 Nov 2008 19:15:09 -0500 email

cf5:oc: OK, maybe not fatal, but how about a new name that suggests
process tracking, not just bugs?

If you can come with a better name, that would be great.  But naming an
issue tracker for its bug-tracking features isn't a terrible idea.</body>
  </comment>
  <comment>
    <uuid>f05359f6-1bfc-4aa6-9a6d-673516bc0f94</uuid>
    <short-name>bea/cf5/f05</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 15 Nov 2008 23:56:51 +0000</date>
    <content-type>text/plain</content-type>
    <body>I dunno, bugs everywhere is such a great mental image... ;)</body>
  </comment>
</bug>
<bug>
  <uuid>6eb8141f-b0b1-4d5b-b4e6-d0860d844ada</uuid>
  <short-name>bea/6eb</short-name>
  <severity>serious</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Fri, 27 Jan 2006 14:29:51 +0000</created>
  <summary>On a new bug, if I add or edit a comment, then click "Update", the Summary goes missing.</summary>
  <comment>
    <uuid>f2011471-56cb-46e2-813b-1ac336ee7bbc</uuid>
    <short-name>bea/6eb/f20</short-name>
    <author>abentley</author>
    <date>Fri, 27 Jan 2006 14:30:26 +0000</date>
    <content-type>text/plain</content-type>
    <body>    On a new bug, if I add comment then click "Update", the Summary goes missing!</body>
  </comment>
</bug>
<bug>
  <uuid>c894f10f-197d-4b22-9c5b-19f394df40d4</uuid>
  <short-name>bea/c89</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sat, 22 Nov 2008 21:36:06 +0000</created>
  <summary>Allow user id to be cached in settings for duplicate bugdirs</summary>
  <comment>
    <uuid>208595bd-35b8-44c2-bf97-fc5ef9e7a58d</uuid>
    <short-name>bea/c89/208</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 22 Nov 2008 21:43:29 +0000</date>
    <content-type>text/plain</content-type>
    <body>Example:

We're working happily in a versioned bugdir, and our RCS knows who we
are.  We create a temporary repository copy from a previous revision
for diff generation.  We set the RCS for the copy to "None", since we
didn't bother initializing our normal RCS in the snapshot copy.  But
now the BugDir instantized on the copy doesn't know who we are!

Solution:

Track user id in the bugdir settings file.  If you
bugdir.settings["user_id"], it will be saved and loaded.  When loaded,
it will also set bugdir.user_id.  If you set rcs.user_id, it will be
returned by rcs.get_user_id(), instead of returing the output of
rcs._rcs_get_user_id().  We should be caching the output of
_rcs_get_user_id() anyway.</body>
  </comment>
  <comment>
    <uuid>7dfdf230-231b-43e0-9b46-58d4d18eded1</uuid>
    <short-name>bea/c89/7df</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 25 Nov 2008 02:24:05 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged into bug a403de79-8f39-41f2-b9ec-15053b175ee2</body>
  </comment>
  <comment>
    <uuid>25c67b0b-1afd-4613-a787-e0f018614966</uuid>
    <short-name>bea/c89/25c</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 23 Nov 2008 12:37:57 +0000</date>
    <content-type>text/plain</content-type>
    <body>This bug duplicates a403de79-8f39-41f2-b9ec-15053b175ee2</body>
  </comment>
</bug>
<bug>
  <uuid>9ce2f015-8ea0-43a5-a03d-fc36f6d202fe</uuid>
  <short-name>bea/9ce</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Thu, 14 Sep 2006 18:08:53 +0000</created>
  <summary>Add last-modified field to bugs</summary>
  <comment>
    <uuid>d81d0df9-e6d9-4fe8-8dbe-989ef2c81f00</uuid>
    <short-name>bea/9ce/d81</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 19:43:21 +0000</date>
    <content-type>text/plain</content-type>
    <body>User specfied sort added, along with bug.cmp_last_modified.

Hmm, perhaps you don't want the last comment date, but e.g. the last
time one of the bug attributes are changed.  In that case, I suggest
  bzr log .be/bugs/9ce2f015-8ea0-43a5-a03d-fc36f6d202fe/

Maybe log(file) functionality should be incorperated into libbe/rcs...
Perhaps accessed through a --history.  I'm not sure I remember enough
Arch to do that ;).</body>
  </comment>
  <comment>
    <uuid>4be35966-373b-438c-a35a-824f5c7a940a</uuid>
    <short-name>bea/9ce/4be</short-name>
    <in-reply-to>d81d0df9-e6d9-4fe8-8dbe-989ef2c81f00</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 21:12:00 +0000</date>
    <content-type>text/plain</content-type>
    <body>No need for RCS-expansion for the history.  If the user is versioning
their code with some RCS, they presumably know how to use the RCS to
investigate the history already.  The .be/ directory structure is not
so complicated that it's worth much work to avoid their having to peer
inside it by hand.

In rare cases where people really do want to peer into history using
only BE or sort by e.g. bug closing time, they could add those
comments by hand, e.g.
  $ echo 'bug closed' | be comment &lt;bug&gt; -
  $ be close &lt;bug&gt;
So the already-implemented cmp_last_modified would handle it.

If you want, you could add (optional) comment-generation to the
becommands themselves.  For example becommand/merge.py already does
this.</body>
  </comment>
  <comment>
    <uuid>095ade7c-9378-41bd-8137-f2731c6afcac</uuid>
    <short-name>bea/9ce/095</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 18:40:43 +0000</date>
    <content-type>text/plain</content-type>
    <body>Presumably this would be to allow sorting of bugs by last-modified
date instead of by creation date.  With the xml output, this is no
longer needed.  For example, I view bugs in mutt with
  $ be list | xml/be-xml-to-mbox | xml/catmutt
and use mutt to sort the threads by last-modified, e.g. by adding
  set sort=threads
  set sort_aux=last-date
to my ~/.muttrc.

That being said, I could go for a user-specified sort command in
becommands/list.py, rather than the current bug.cmp_full, since other
mail readers may suck more than mutt ;), and even mutt might not have
that perfect sort you desire coded into it :p.  The problem is that
while the cmp_* functions in bug are short, they are not really the
sort of thing you'd want to type in on the command line.  Perhaps we
can just slowly accumulate a rich array of bug.cmp_* functions as
they are requested, and allow the user to prepend their favorites to
the default cmp_full list...</body>
  </comment>
</bug>
<bug>
  <uuid>597a7386-643f-4559-8dc4-6871924229b6</uuid>
  <short-name>bea/597a</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Thu, 06 Apr 2006 16:52:46 +0000</created>
  <summary>RST test</summary>
  <comment>
    <uuid>eff20807-07f0-444d-8992-f69ab3f526c5</uuid>
    <short-name>bea/597a/eff</short-name>
    <author>abentley</author>
    <date>Thu, 06 Apr 2006 16:54:57 +0000</date>
    <content-type>text/restructured</content-type>
    <body>This is an *rst* comment.

Which means newlines don't matter, except when they gang up.



lala



 - Bullet

 - Bullet</body>
  </comment>
  <comment>
    <uuid>8015d736-f3ea-4085-940c-552c01a287ef</uuid>
    <short-name>bea/597a/801</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 13:35:42 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged into bug 09f84059-fc8e-4954-b24d-a2b33ef21bf4</body>
  </comment>
</bug>
<bug>
  <uuid>09f84059-fc8e-4954-b24d-a2b33ef21bf4</uuid>
  <short-name>bea/09f</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Thu, 06 Apr 2006 16:45:52 +0000</created>
  <summary>Support RST</summary>
  <comment>
    <uuid>2bb9163c-a2c4-4301-aff5-385f58a14301</uuid>
    <short-name>bea/09f/2bb</short-name>
    <author>abentley</author>
    <date>Thu, 06 Apr 2006 16:47:25 +0000</date>
    <content-type>text/rst</content-type>
    <body>Add *support*, damnit!</body>
  </comment>
  <comment>
    <uuid>144c238c-75d1-40f1-82c1-647668bcf2bc</uuid>
    <short-name>bea/09f/144</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 13:35:41 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged from bug 597a7386-643f-4559-8dc4-6871924229b6</body>
  </comment>
  <comment>
    <uuid>eff20807-07f0-444d-8992-f69ab3f526c5</uuid>
    <short-name>bea/09f/eff</short-name>
    <in-reply-to>144c238c-75d1-40f1-82c1-647668bcf2bc</in-reply-to>
    <author>abentley</author>
    <date>Thu, 06 Apr 2006 16:54:57 +0000</date>
    <content-type>text/restructured</content-type>
    <body>This is an *rst* comment.

Which means newlines don't matter, except when they gang up.



lala



 - Bullet

 - Bullet</body>
  </comment>
</bug>
<bug>
  <uuid>4a4609c8-1882-47de-9d30-fee410b8a802</uuid>
  <short-name>bea/4a4</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 25 Jan 2006 23:14:07 +0000</created>
  <summary>Do we need a severity between serious and minor? EG "Moderate"?</summary>
  <comment>
    <uuid>942cd941-583d-4020-99e4-80de7e836129</uuid>
    <short-name>bea/4a4/942</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 15:42:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>Implemented.</body>
  </comment>
  <comment>
    <uuid>0ac3c4cb-90e3-4b67-b6cb-1186d5d66240</uuid>
    <short-name>bea/4a4/0ac</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:05:50 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged into bug ae998b27-a11b-4243-abf6-11841e5b8242</body>
  </comment>
</bug>
<bug>
  <uuid>8e948522-c6a1-4c97-af93-2cf4090f44b5</uuid>
  <short-name>bea/8e9</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 25 Jan 2006 15:44:18 +0000</created>
  <summary>list X most recent entries</summary>
  <comment>
    <uuid>7d7e703f-22f2-4c47-86a3-fcc3c8ead576</uuid>
    <short-name>bea/8e9/7d7</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 24 Nov 2008 13:10:38 +0000</date>
    <content-type>text/plain</content-type>
    <body>Would you do this instead of `be diff`?</body>
  </comment>
  <comment>
    <uuid>3e7144eb-c934-4b62-94b7-7dbfa90ed6ee</uuid>
    <short-name>bea/8e9/3e7</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 19:46:45 +0000</date>
    <content-type>text/plain</content-type>
    <body>From Aaron's Mon, 24 Nov 2008 19:15:09 -0500 email:

8e9:om: list X most recent entries
Closeable.  (And yes, I would do it instead of 'be diff')</body>
  </comment>
</bug>
<bug>
  <uuid>9a942b1d-a3b5-441d-8aef-b844700e1efa</uuid>
  <short-name>bea/9a9</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 25 Jan 2006 15:43:59 +0000</created>
  <summary>Provide search</summary>
  <comment>
    <uuid>37650981-1908-4c39-bae2-48e69c771120</uuid>
    <short-name>bea/9a9/376</short-name>
    <author>abentley</author>
    <date>Fri, 31 Mar 2006 22:15:09 +0000</date>
    <content-type>text/plain</content-type>
    <body>Hmm.  This is already done...</body>
  </comment>
  <comment>
    <uuid>209e2a60-ddd0-4a71-90ef-e57547ed6d76</uuid>
    <short-name>bea/9a9/209</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 18:05:38 +0000</date>
    <content-type>text/plain</content-type>
    <body>From the command line,
  $ be show `be list --status all --uuids` | grep -A5 -B5 XYZ
works pretty well...</body>
  </comment>
</bug>
<bug>
  <uuid>576e804a-8b76-4876-8e9d-d7a72b0aef10</uuid>
  <short-name>bea/576</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 25 Jan 2006 15:43:46 +0000</created>
  <summary>Allow attachments</summary>
  <comment>
    <uuid>d83a5436-85e3-42c7-9a89-a6d50df9d279</uuid>
    <short-name>bea/576/d83</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 19 Jun 2009 20:22:19 +0000</date>
    <content-type>text/plain</content-type>
    <body>I've added comments-from-stdin, so we can add tracebacks, e.g. with

  $ be list --invalid-option | be comment &lt;bug-id&gt; -</body>
  </comment>
  <comment>
    <uuid>c454aa67-ca30-43e8-9be4-58cbddd01b63</uuid>
    <short-name>bea/576/c45</short-name>
    <in-reply-to>d83a5436-85e3-42c7-9a89-a6d50df9d279</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:03:27 +0000</date>
    <content-type>text/plain</content-type>
    <body>Excerpt from my mail to the list on Sat, 20 Jun 2009 21:55:54 -0400:

On Mon, Nov 24, 2008 at 07:15:08PM -0500, Aaron Bentley wrote:
&gt; 576:om: Allow attachments
&gt; Sensible.

I'm not as convinced they are a good idea as I once was.  I've just
added comments-from-stdin, e.g.
  some-invalid-command | be comment &lt;bug-id&gt; -
Which is mostly what I'd be using attachments for anyway.  If you
really want to support the attachments/mime-types etc. like we had
maybe been leaning towards before, you'd need to look at the output of
`be show ...' with an email client, which seems a bit excessive.  Do
we even want mime types at all?  With the xml output a la Thomas, you
should be able to pipe into whatever sort of `viewer' you want, and it
doesn't end up being hardcoded into the main repo.


Notes since my email:

be-&gt;xml-&gt;mutt has since been implemented, and it preserves comment
mime-type.  This allows those that want to go crazy to attach whatever
they want to their comments:

  $ echo "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Hello world&lt;/body&gt;&lt;/html&gt;" | be comment --content-type text/html 576:2 -

I think non-text attachments without a browser/mail-viewer don't make
sense, so I'm closing this bug.  Feel free to keep it open in your own
repo, or argue with me on the list ;).</body>
  </comment>
  <comment>
    <uuid>72dab0c4-f04d-4ff0-9319-f55aafaea627</uuid>
    <short-name>bea/576/72d</short-name>
    <in-reply-to>c454aa67-ca30-43e8-9be4-58cbddd01b63</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:05:00 +0000</date>
    <content-type>text/html</content-type>
    <body>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Hello world&lt;/body&gt;&lt;/html&gt;</body>
  </comment>
</bug>
<bug>
  <uuid>f70dd5df-805b-49f3-a9ce-12e0fae63365</uuid>
  <short-name>bea/f70</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 25 Jan 2006 15:43:19 +0000</created>
  <summary>Allow different sorts</summary>
  <comment>
    <uuid>24903c62-f441-496e-9dcf-17e7a581df33</uuid>
    <short-name>bea/f70/249</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:20:20 +0000</date>
    <content-type>text/plain</content-type>
    <body>Aaron said this was closeable in Nov. 24th email to the BE list.</body>
  </comment>
</bug>
<bug>
  <uuid>62a74b85-0d4b-49f5-8794-74bafd871cd4</uuid>
  <short-name>bea/62a</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 25 Jan 2006 15:18:58 +0000</created>
  <summary>Indicate presence of Comments</summary>
</bug>
<bug>
  <uuid>16fc9496-cdc2-4c6e-9b9f-b8f483b6dedb</uuid>
  <short-name>bea/16f</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:09:30 +0000</created>
  <summary>Arbitrary numerical priorities?</summary>
  <comment>
    <uuid>489397bd-b987-4a08-9589-c5b71661ebb7</uuid>
    <short-name>bea/16f/489</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:16:11 +0000</date>
    <content-type>text/plain</content-type>
    <body>Aaron said this was closeable in Nov. 24th email to the BE list.

I think "priorities" == "bug severities", in which case this
functionality is now available with the per-tree severity
configuration.</body>
  </comment>
</bug>
<bug>
  <uuid>c76d7899-d495-4103-9355-012c0a6fece3</uuid>
  <short-name>bea/c76</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:09:02 +0000</created>
  <summary>Support 'issues', like todo, better</summary>
  <comment>
    <uuid>354dcfc6-5997-4ffe-b7a0-baa852213539</uuid>
    <short-name>bea/c76/354</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:11:02 +0000</date>
    <content-type>text/plain</content-type>
    <body>In Aaron's Mon, 24 Nov 2008 19:15:08 -0500 email, he adds:

Issue trackers should provide tracking of
1. bugs
2. feature requests
3. to-do items.</body>
  </comment>
  <comment>
    <uuid>22348320-40d3-422c-bdf0-0f6a6bde3fab</uuid>
    <short-name>bea/c76/223</short-name>
    <in-reply-to>354dcfc6-5997-4ffe-b7a0-baa852213539</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:12:35 +0000</date>
    <content-type>text/plain</content-type>
    <body>In my Tue, 25 Nov 2008 08:30:19 -0500 email:

I thought feature requests would just have "wishlist" severity.  What
would be an example of a to-do item that is not a feature request or a
bug?</body>
  </comment>
  <comment>
    <uuid>f847c981-873e-41ae-b5ce-83dfe60b9afe</uuid>
    <short-name>bea/c76/f84</short-name>
    <in-reply-to>22348320-40d3-422c-bdf0-0f6a6bde3fab</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:14:26 +0000</date>
    <content-type>text/plain</content-type>
    <body>In Aaron's Tue, 25 Nov 2008 09:32:29 -0500 email:

I think that approach doesn't give features the richness they need.
Features also have severities-- some features are important, and others
are just nice-to-have.  And there should be a way to list *only* bugs,
or *only* features.

In a bug tracker, "wishlist" is either an aberration, or it means a very
low severity.</body>
  </comment>
  <comment>
    <uuid>c129067c-2341-4e7a-92a6-2dcd30d3bbf5</uuid>
    <short-name>bea/c76/c12</short-name>
    <in-reply-to>f847c981-873e-41ae-b5ce-83dfe60b9afe</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:20:39 +0000</date>
    <content-type>text/plain</content-type>
    <body>If you want more granularity than just `wishlist' what about the
`severities':
  todo-critical
  todo-minor
  todo-...
Then get a list of available severities with
  $ be list --help | grep -A1 '^severity'
  severity
    wishlist,minor,serious,critical,fatal,todo-critical,todo-minor
And show all the todos:
  $ be list --severity todo-critical,todo-minor

You can configure all the severities you'd like with
  $ be set severity wishlist,minor,...</body>
  </comment>
</bug>
<bug>
  <uuid>7ec2c071-9630-42b0-b08a-9854616f9144</uuid>
  <short-name>bea/7ec</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:06:38 +0000</created>
  <summary>Arbitrary tags</summary>
  <comment>
    <uuid>401950a0-a5ff-46f3-afac-a9cfb300f94b</uuid>
    <short-name>bea/7ec/401</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:39:39 +0000</date>
    <content-type>text/plain</content-type>
    <body>In my Tue, 25 Nov 2008 08:30:19 -0500 email: 

Implemented as a free-form value field similar to target?  A
comma-seperated list of tags?  Perhaps once we have per-bug/comment
attribute searching it would be easier to have a 'create-attribute'
becommand, e.g.
  be create-attribute [-valid=X,Y,Z] [bugdir|bug|comment] [NAME] [DEFAULT]

We could ship some suggested configuration scripts to set people up,
and keep the core code more general/flexible.


Plan:

Extend and make more consitent the settings_property() attributes.
Create becommand/(create/remove)-attribute for logic-less attributes.
Create a few mix-ins for logic-ed attributes

Usage example:
  Goal:
    set up for `be depends BUGA BUGB`, `be depends --tree BUGA`, etc
  Procedure:
    be set --apend mixins bug:dependency
  Where we've defined
    becommands/depends.py, but it is hidden until the mixin is activated
    libbe/mixins/bug/dependency.Mixin (inheriting from BugMixin)
      to
        parse/generate comma seperated dependency uuids for saving/loading
        pretty-print the dependency list (e.g. uuid-&gt;shortname)
        walk the dependency tree and check target bug status.

With more complicated mixins, there could be inter-mixin dependencies,
e.g. a dependency tracker that searches depends based on bug.status
might depend on the base dependency mixin.  This way people who need
it could make rich interfaces without confusing the people who don't.

How does that sound?</body>
  </comment>
  <comment>
    <uuid>ec133a4e-c9ff-4499-b469-cb0a2ca9a685</uuid>
    <short-name>bea/7ec/ec1</short-name>
    <in-reply-to>401950a0-a5ff-46f3-afac-a9cfb300f94b</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:40:54 +0000</date>
    <content-type>text/plain</content-type>
    <body>In Aaron's Tue, 25 Nov 2008 09:32:29 -0500 email:

&gt;&gt; 7ec:om: Arbitrary tags
&gt;&gt; Sensible
&gt;
&gt; Implemented as a free-form value field similar to target?  A
&gt; comma-seperated list of tags?

I believe I planned to store it as an alpha-sorted, one-entry-per-line
list, so it would support merging easily.

&gt;  Perhaps once we have per-bug/comment
&gt; attribute searching it would be easier to have a 'create-attribute'
&gt; becommand, e.g.
&gt;   be create-attribute [-valid=X,Y,Z] [bugdir|bug|comment] [NAME] [DEFAULT]

Well, it really depends how much semantics you want to embed in the data
format.  Some values are scalars, some may be sets (i.e. tags), some may
be ordered lists or even mappings.  How much you want to reflect that in
the data format is up to you.

&gt; Extend and make more consitent the settings_property() attributes.
&gt; Create becommand/(create/remove)-attribute for logic-less attributes.
&gt; Create a few mix-ins for logic-ed attributes

I don't find the term mix-in very intuitive here.

&gt; Usage example:
&gt;   Goal:
&gt;     set up for `be depends BUGA BUGB`, `be depends --tree BUGA`, etc
&gt;   Procedure:
&gt;     be set --apend mixins bug:dependency

"append" usually has two "p"s.  Is the omission deliberate?

&gt;   Where we've defined
&gt;     becommands/depends.py, but it is hidden until the mixin is activated
&gt;     libbe/mixins/bug/dependency.Mixin (inheriting from BugMixin)
&gt;       to
&gt;       parse/generate comma seperated dependency uuids for saving/loading
&gt;       pretty-print the dependency list (e.g. uuid-&gt;shortname)
&gt;       walk the dependency tree and check target bug status.
&gt;
&gt; With more complicated mixins, there could be inter-mixin dependencies,
&gt; e.g. a dependency tracker that searches depends based on bug.status
&gt; might depend on the base dependency mixin.  This way people who need
&gt; it could make rich interfaces without confusing the people who don't.
&gt;
&gt; How does that sound?

It sounds pretty complicated.  I would probably use a type system rather
than "mixins", and define types as "scalar", "set" and maybe "list" and
"map".  Dependencies would be a set, and their special behaviour would
be hardcoded according to their name, not a property of their type.</body>
  </comment>
  <comment>
    <uuid>bb988ed4-d3d5-4e49-b67e-c7ccb8ae44d3</uuid>
    <short-name>bea/7ec/bb9</short-name>
    <in-reply-to>ec133a4e-c9ff-4499-b469-cb0a2ca9a685</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 20:42:12 +0000</date>
    <content-type>text/plain</content-type>
    <body>From my Tue, 25 Nov 2008 13:27:12 -0500 email:

&gt; &gt;&gt; 7ec:om: Arbitrary tags
&gt; &gt;&gt; Sensible
&gt; &gt;
&gt; &gt; Implemented as a free-form value field similar to target?  A
&gt; &gt; comma-seperated list of tags?
&gt;

That is a much better format than my unmergable one ;).

&gt; "append" usually has two "p"s.  Is the omission deliberate?

Nope, sorry :p

&gt; It sounds pretty complicated.  I would probably use a type system rather
&gt; than "mixins", and define types as "scalar", "set" and maybe "list" and
&gt; "map".  Dependencies would be a set, and their special behaviour would
&gt; be hardcoded according to their name, not a property of their type.

Ok.  I'm just worried about bloat.  It's pretty easy to move things
around at the moment, but I'm worried that adding lots of attributes
with special code will start a slippery slope of trying to satisfy
everybody internally.  Then things start looking more like Arch, with
newbies scared off by the confusion.  I know the Arch people like the
power, but it took me several hours to figure out how to create a
repository ;).  Some people like bug dependencies, and some do not
  e.g.
    https://bugs.launchpad.net/malone/+bug/95419
    http://trac.edgewall.org/ticket/31

From the *long* Trac post, you can see that this is divisive issue.

I would be in favor of emulating TracCrossReferences
(http://trac.edgewall.org/wiki/TracCrossReferences) in our core.  We
could have references and backlinks fields for bugs (and comments?).
But I'd rather not add blocking, etc.  However, having a seperate
plugin obviously doesn't work for some people ;).  We'd like to bundle
lots of functionality, but keep the core fairly clean and flexible.

Therefore, I'd like a way to put non-core implememtation code in a
seperate submod.  We already call our libbe code "plugins", and we're
extending the builtin BugDir, Bug, etc code, so I thought we'd call
the non-core submods mixins (see http://en.wikipedia.org/wiki/Mixin).

Anyhow, just my 2c.</body>
  </comment>
  <comment>
    <uuid>f87fd684-6af1-498d-98d5-f915bcee76a9</uuid>
    <short-name>bea/7ec/f87</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 21:29:32 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged from bug 17921fbc-e7f0-4f31-8cdd-598e5ba7237b</body>
  </comment>
    <comment>
      <uuid>6010e186-0260-44e5-8442-8df2269910ce</uuid>
      <short-name>bea/7ec/601</short-name>
      <in-reply-to>f87fd684-6af1-498d-98d5-f915bcee76a9</in-reply-to>
      <author>abentley</author>
      <date>Mon, 17 Apr 2006 20:59:15 +0000</date>
      <content-type>text/plain</content-type>
      <body>It's tricky to say whether we should have dependencies or reverse dependencies
or both.

In the case where a bug is removed, normal dependencies mean that its
dependencies are erased from this system.</body>
    </comment>
  <comment>
    <uuid>c2b78df3-641a-4d4d-ba94-33b26eda6364</uuid>
    <short-name>bea/7ec/c2b</short-name>
    <in-reply-to>f87fd684-6af1-498d-98d5-f915bcee76a9</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 21:29:13 +0000</date>
    <content-type>text/plain</content-type>
    <body>This could be implemented with an external frontend storing the
dependency data in arbitrary tags.</body>
  </comment>
  <comment>
    <uuid>80780fa9-69f8-438c-8fbf-5a702b3badc1</uuid>
    <short-name>bea/7ec/807</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 25 Jun 2009 12:39:26 +0000</date>
    <content-type>text/plain</content-type>
    <body>Arbitrary tagging now supported via `be tag'.
Dependencies supported via `be depend'.</body>
  </comment>
</bug>
<bug>
  <uuid>cb56c990-a757-4aef-9888-a30918a7b3d7</uuid>
  <short-name>bea/cb5</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:06:10 +0000</created>
  <summary>Beweb: Stripey tables</summary>
</bug>
<bug>
  <uuid>17921fbc-e7f0-4f31-8cdd-598e5ba7237b</uuid>
  <short-name>bea/179</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:05:37 +0000</created>
  <summary>Indicate bug dependencies</summary>
  <comment>
    <uuid>6010e186-0260-44e5-8442-8df2269910ce</uuid>
    <short-name>bea/179/601</short-name>
    <author>abentley</author>
    <date>Mon, 17 Apr 2006 20:59:15 +0000</date>
    <content-type>text/plain</content-type>
    <body>It's tricky to say whether we should have dependencies or reverse dependencies
or both.

In the case where a bug is removed, normal dependencies mean that its
dependencies are erased from this system.</body>
  </comment>
  <comment>
    <uuid>c2b78df3-641a-4d4d-ba94-33b26eda6364</uuid>
    <short-name>bea/179/c2b</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 21:29:13 +0000</date>
    <content-type>text/plain</content-type>
    <body>This could be implemented with an external frontend storing the
dependency data in arbitrary tags.</body>
  </comment>
  <comment>
    <uuid>c531727a-9d0f-486f-aa0e-d4d2f2236640</uuid>
    <short-name>bea/179/c53</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 22 Jun 2009 21:29:33 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged into bug 7ec2c071-9630-42b0-b08a-9854616f9144</body>
  </comment>
</bug>
<bug>
  <uuid>a63bd76a-cd43-4f97-88ba-2323546d4572</uuid>
  <short-name>bea/a63</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:05:20 +0000</created>
  <summary>Beweb: New comment button should save any changes</summary>
</bug>
<bug>
  <uuid>27bb8bc2-05c2-417a-9d09-928471380d7a</uuid>
  <short-name>bea/27b</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Tue, 20 Dec 2005 19:37:03 +0000</created>
  <summary>Are dates still a problem?</summary>
</bug>
<bug>
  <uuid>b8d95763-1825-4e09-bf52-cbd884b916af</uuid>
  <short-name>bea/b8d</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created>Thu, 07 Apr 2005 16:09:10 +0000</created>
  <summary>support multi-rcs configurations</summary>
  <comment>
    <uuid>ae56365e-7a9c-4cc3-ba67-7addbeeeff49</uuid>
    <short-name>bea/b8d/ae5</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 13:48:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>Aaron said this was closeable in Nov. 24th email to the BE list.</body>
  </comment>
</bug>
<bug>
  <uuid>7d182ab9-9c0c-4b4f-885e-c5762d7a2437</uuid>
  <short-name>bea/7d1</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>BEweb fails to set bug creation date</summary>
</bug>
<bug>
  <uuid>b1bc6f39-8166-46c5-a724-4c4a3e1e7d74</uuid>
  <short-name>bea/b1b</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Comments do not appear in web UI</summary>
</bug>
<bug>
  <uuid>e0155831-499f-421a-ad02-cd15fc3fecf1</uuid>
  <short-name>bea/e01</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>No way to commit/update from beweb</summary>
</bug>
<bug>
  <uuid>0ca2d112-b5bb-4df1-8ac0-e46db6cdd442</uuid>
  <short-name>bea/0ca2</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Organize list by target, and whether it's assigned to current be id</summary>
</bug>
<bug>
  <uuid>ee681951-f254-43d3-a53a-1b36ae415d5c</uuid>
  <short-name>bea/ee6</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Support rcs configuration</summary>
  <extra-string>BLOCKS:4fc71206-4285-417f-8a3c-ed6fb31bbbda</extra-string>
</bug>
<bug>
  <uuid>f65b680b-4309-43a2-ae2d-e65811c9d107</uuid>
  <short-name>bea/f65</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>friendly name is created, but not used</summary>
</bug>
<bug>
  <uuid>9f910ee0-ff0f-4fa3-b1e3-79a4118e48e9</uuid>
  <short-name>bea/9f9</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>prevent collisions in different branches</summary>
</bug>
<bug>
  <uuid>2aa60b34-2c8d-4f41-bb97-a57309523262</uuid>
  <short-name>bea/2aa</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>implement message-change log</summary>
  <comment>
    <uuid>f21bec0d-cad0-44d2-a301-bfb11adce313</uuid>
    <short-name>bea/2aa/f21</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:21:08 +0000</date>
    <content-type>text/plain</content-type>
    <body>Aaron said this was closeable in Nov. 24th email to the BE list.</body>
  </comment>
</bug>
<bug>
  <uuid>8cb9045c-7266-4c40-9a76-65f3c5d5bb60</uuid>
  <short-name>bea/8cb</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 07 Feb 2009 17:27:48 +0000</created>
  <summary>Refactor the web interface into its own file.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>d63d0bdd-e025-4f7c-9fcf-47a71de6d4d4</uuid>
  <short-name>bea/d63</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sun, 01 Feb 2009 22:55:13 +0000</created>
  <summary>Reset the state of the values when choosing "Discard Changes."</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>42716dc2-6201-4537-b5fd-e1280812a53d</uuid>
  <short-name>bea/4271</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 05:17:45 +0000</created>
  <summary>Document the packaging and install.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>35b962a0-a64a-4b5c-82c5-ea740e8a6322</uuid>
  <short-name>bea/35b</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 05:17:34 +0000</created>
  <summary>Document the code for the alpha release.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>870d5dbe-6449-4ec4-ae6f-e84bebadbce0</uuid>
  <short-name>bea/870</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 05:17:08 +0000</created>
  <summary>Refine graphic design for the alpha version.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>55e76f74-37fb-4254-8498-54b703ba54f6</uuid>
  <short-name>bea/55e</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 03:01:09 +0000</created>
  <summary>Fix the footer width.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>fd96c69d-6f78-4c0c-af6e-e01e9b8516d3</uuid>
  <short-name>bea/fd9</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 03:00:08 +0000</created>
  <summary>Implement adding comments.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>545311df-8c88-4504-9f83-11d7c5d8aa50</uuid>
  <short-name>bea/545</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 02:59:54 +0000</created>
  <summary>Implement bug updating (not comments).  Check on the whitespace of the summary field while you're at it.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>88d54d29-7312-4bb3-bc50-1970bdb2bb0e</uuid>
    <short-name>bea/545/88d</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sun, 01 Feb 2009 22:49:29 +0000</date>
    <content-type>text/plain</content-type>
    <body>Apparently the summary can only be one line.  That makes the whitespace issue less relevant.</body>
  </comment>
</bug>
<bug>
  <uuid>bef126a0-27be-402f-84fa-85f6342c97c0</uuid>
  <short-name>bea/bef</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 02:59:35 +0000</created>
  <summary>Implement bug creation.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>528b2e84-a944-4628-a18f-cc1def1c7e16</uuid>
  <short-name>bea/528</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 02:59:28 +0000</created>
  <summary>Implement viewing of a single bug (with comments).</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>decc6e78-a3db-4cd3-ad23-2bf8ed77cb0d</uuid>
  <short-name>bea/dec</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 02:58:44 +0000</created>
  <summary>Implement the target filters.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>984472f6-98f5-48fc-b521-70a1e5f60614</uuid>
  <short-name>bea/984</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 00:22:40 +0000</created>
  <summary>Implement the status filters.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>4286c0f8-5703-4bc1-b256-414dc408f067</uuid>
  <short-name>bea/428</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 00:14:34 +0000</created>
  <summary>Get the layout rhythm right.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>e645d562-6f84-4df2-b8ee-86ef42546c16</uuid>
  <short-name>bea/e64</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Fri, 30 Jan 2009 03:19:19 +0000</created>
  <summary>Package everything into something easy to download and use.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>d5ffa1c4-f435-4a9a-99f3-2a7bc3072051</uuid>
    <short-name>bea/e64/d5f</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sat, 31 Jan 2009 06:00:40 +0000</date>
    <content-type>text/plain</content-type>
    <body>This will not be incredibly easy.  It will require reworking of the repository roots.</body>
  </comment>
  <comment>
    <uuid>aea21508-69c2-4d6b-ada1-4fbadac14c56</uuid>
    <short-name>bea/e64/aea</short-name>
    <in-reply-to>d5ffa1c4-f435-4a9a-99f3-2a7bc3072051</in-reply-to>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sat, 31 Jan 2009 06:31:12 +0000</date>
    <content-type>text/plain</content-type>
    <body>I agree.  (Test message).</body>
  </comment>
  <comment>
    <uuid>f1fd8249-ded3-4e3c-a6ef-967d0a0edcd9</uuid>
    <short-name>bea/e64/f1f</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sat, 31 Jan 2009 06:48:21 +0000</date>
    <content-type>text/plain</content-type>
    <body>This is a comment.

With several lines.</body>
  </comment>
</bug>
<bug>
  <uuid>9daa72ee-0721-4f68-99ee-f06fec0b340e</uuid>
  <short-name>bea/9da</short-name>
  <severity>minor</severity>
  <status>closed</status>
  <assigned>abentley</assigned>
  <creator>abentley</creator>
  <created></created>
  <summary>Organize list by whether it's assigned to the current target</summary>
</bug>
<bug>
  <uuid>68ba7f0c-ca5f-4f49-a508-e39150c07e13</uuid>
  <short-name>bea/68b</short-name>
  <severity>wishlist</severity>
  <status>closed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Support per-tree settings for severity, target, BE ids</summary>
  <comment>
    <uuid>be64734c-d9a8-4f6d-83eb-e9b6c9adc0bf</uuid>
    <short-name>bea/68b/be6</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:29:30 +0000</date>
    <content-type>text/plain</content-type>
    <body>Per-tree severity and target are now supported.

I'm not sure what Aaron meant be "BE ids".</body>
  </comment>
</bug>
<bug>
  <uuid>4fc71206-4285-417f-8a3c-ed6fb31bbbda</uuid>
  <short-name>bea/4fc</short-name>
  <severity>target</severity>
  <status>closed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 06 Dec 2009 00:37:16 +0000</created>
  <summary>patch-52</summary>
  <extra-string>BLOCKED-BY:47c8fd5f-1f5a-4048-bef7-bb4c9a37c411</extra-string>
  <extra-string>BLOCKED-BY:ee681951-f254-43d3-a53a-1b36ae415d5c</extra-string>
  <extra-string>BLOCKS:bd0ebb56-fb46-45bc-af08-1e4a94e8ef3c</extra-string>
</bug>
<bug>
  <uuid>f51dc5a7-37b7-4ce1-859a-b7cb58be6494</uuid>
  <short-name>bea/f51</short-name>
  <severity>fatal</severity>
  <status>fixed</status>
  <creator>Aaron Bentley</creator>
  <created></created>
  <summary>Can't create bugs</summary>
  <extra-string>BLOCKS:47c8fd5f-1f5a-4048-bef7-bb4c9a37c411</extra-string>
</bug>
<bug>
  <uuid>b3c6da51-3a30-42c9-8c75-587c7a1705c5</uuid>
  <short-name>bea/b3c</short-name>
  <severity>critical</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 23 Nov 2008 13:48:01 +0000</created>
  <summary>Slow be commands due to bugdir loading, go back to lazy bug loading.</summary>
</bug>
<bug>
  <uuid>c7251ff9-24e4-402d-8d4e-605a78b9a91d</uuid>
  <short-name>bea/c72</short-name>
  <severity>critical</severity>
  <status>fixed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Thu, 25 Jun 2009 21:41:02 +0000</created>
  <summary>Document the installation.</summary>
  <extra-string>BLOCKS:e23d7982-7e32-4c78-b62e-83ecc42b4cd7</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>109b09ce-663e-46e3-97b9-4707ec0a9540</uuid>
    <short-name>bea/c72/109</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 21 Jul 2009 14:23:37 +0000</date>
    <content-type>text/plain</content-type>
    <body>This seems to already have been done in the README.</body>
  </comment>
  <comment>
    <uuid>07145a34-6c86-4eed-ac62-5ecd00193bc7</uuid>
    <short-name>bea/c72/071</short-name>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 26 Jun 2010 19:38:51 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed with doc/http.txt.</body>
  </comment>
</bug>
<bug>
  <uuid>8e1bbda4-35b6-4579-849d-117b1596ee99</uuid>
  <short-name>bea/8e1</short-name>
  <severity>serious</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Thu, 27 Nov 2008 13:39:25 +0000</created>
  <summary>be &lt;cmmd&gt; &lt;argopt&gt; --options doesn't raise GetOptions</summary>
  <comment>
    <uuid>4d642e39-a8f3-41d8-93da-bea7e05ef9a6</uuid>
    <short-name>bea/8e1/4d6</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 27 Nov 2008 14:26:18 +0000</date>
    <content-type>text/plain</content-type>
    <body>A rough implemention is now sketched out in becommands/list.py</body>
  </comment>
  <comment>
    <uuid>bf0c3752-6338-4919-93ba-4c9252945fb1</uuid>
    <short-name>bea/8e1/bf0</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 27 Nov 2008 13:43:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>For example:
  $ be list --status --options
    File "/home/wking/bin/be", line 35, in &lt;module&gt;
      sys.exit(cmdutil.execute(sys.argv[1], sys.argv[2:]))
    File "/home/wking/lib/python2.5/site-packages/libbe/cmdutil.py", line 67, in execute
      get_command(cmd).execute([a.decode(enc) for a in args])
    File "/home/wking/lib/python2.5/site-packages/becommands/list.py", line 36, in execute
      raise Exception, "parsed options"
  Exception: parsed options

The reason for this is that --status takes an argument, so 'be list'
thinks it should list all the bugs with status == "--options".
Ideally what should happen is that an argument-taking option would
check for argument --options, and if so, would raise an exception
returning a list of appropriate completions *for that argument*.</body>
  </comment>
</bug>
<bug>
  <uuid>dac91856-cb6a-4f69-8c03-38ff0b29aab2</uuid>
  <short-name>bea/dac</short-name>
  <severity>serious</severity>
  <status>fixed</status>
  <creator>wking</creator>
  <created>Mon, 17 Nov 2008 15:02:15 +0000</created>
  <summary>BE not notifying git of some changed files</summary>
  <comment>
    <uuid>1182d8e6-5e87-4d0a-b271-c298c36bbc21</uuid>
    <short-name>bea/dac/118</short-name>
    <author>W. Trevor King &lt;wking@example.com&gt;</author>
    <date>Wed, 19 Nov 2008 01:12:37 +0000</date>
    <content-type>text/plain</content-type>
    <body>Problem was due to 
  open-value-file
  write-value-file
  add/update-value-file
which should be (and now is)
  open-value-file
  write-value-file
  close-value-file
  add/update-value-file
since it was getting added before the changes we'd written were flushed out.</body>
  </comment>
  <comment>
    <uuid>8097468f-87a9-4d84-ac20-1772393bb54d</uuid>
    <short-name>bea/dac/809</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 17 Nov 2008 15:03:58 +0000</date>
    <content-type>text/plain</content-type>
    <body>It looks like the mapfiles are not being 'git add'ed after changes.

$ mkdir BEtest
$ cd BEtest
$ git init
$ be set-root .
$ be new 'new'
$ git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached &lt;file&gt;..." to unstage)
#
#       new file: .be/bugs/8f021d79-44f5-479f-af12-c37e2caf3ce1/values
#       new file: .be/settings
#       new file: .be/version
#
# Changed but not updated:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#
#       modified:   .be/bugs/8f021d79-44f5-479f-af12-c37e2caf3ce1/values
#       modified:   .be/settings
#</body>
  </comment>
</bug>
<bug>
  <uuid>73a767f4-75e7-4cde-9e24-91bff99ab428</uuid>
  <short-name>bea/73a</short-name>
  <severity>serious</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>implement comments</summary>
</bug>
<bug>
  <uuid>7ba4bc51-b251-483a-a67a-f1b89c83f6af</uuid>
  <short-name>bea/7ba</short-name>
  <severity>serious</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Add test cases</summary>
  <comment>
    <uuid>db2c18d9-9573-4d68-88a5-ee47ed24b813</uuid>
    <short-name>bea/7ba/db2</short-name>
    <author>abentley</author>
    <date>Thu, 24 Mar 2005 17:04:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>The commands that can easily be tested are now being tested</body>
  </comment>
  <comment>
    <uuid>ec16300f-529a-4492-8327-f9a72e4447c2</uuid>
    <short-name>bea/7ba/ec1</short-name>
    <author>abentley</author>
    <date>Thu, 24 Mar 2005 13:05:13 +0000</date>
    <content-type>text/plain</content-type>
    <body>We've got coverage of set_root and new.  This leaves
close, comment, list, open, severity, show, target, upgrade

It's quite nice, though, that doctest captures stdout.</body>
  </comment>
</bug>
<bug>
  <uuid>312fb152-0155-45c1-9d4d-f49dd5816fbb</uuid>
  <short-name>bea/312</short-name>
  <severity>serious</severity>
  <status>fixed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Thu, 25 Jun 2009 21:38:38 +0000</created>
  <summary>Revamp the layout/design.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>206d9b07-6e30-4c8b-9594-ee98e3c646e7</uuid>
  <short-name>bea/206</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>gour &lt;gour@gaura-nitai&gt;</reporter>
  <creator>gour &lt;gour@gaura-nitai&gt;</creator>
  <created>Sun, 11 Jul 2010 17:46:52 +0000</created>
  <summary>'BugDir' object has no attribute 'bug_shortname' (cfbe)</summary>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>9e75984a-fc76-46ec-a1f3-ac80014b0c41</uuid>
    <short-name>bea/206/9e7</short-name>
    <author>gour &lt;gour@gaura-nitai&gt;</author>
    <date>Sun, 11 Jul 2010 17:48:17 +0000</date>
    <content-type>text/plain</content-type>
    <body>Attempt to edit some bug details gives 500 Internal Server Error with:

[11/Jul/2010:17:28:26] HTTP Traceback (most recent call last):
  File "/usr/lib/python2.6/site-packages/cherrypy/_cprequest.py", line
  606, in respond
    cherrypy.response.body = self.handler()
  File "/usr/lib/python2.6/site-packages/cherrypy/_cpdispatch.py",
  line 25, in __call__
    return self.callable(*self.args, **self.kwargs)
  File "/home/gour/repos/git/gour-be/interfaces/web/web.py", line 161,
  in edit
    shortname = self.bd.bug_shortname(bug)
AttributeError: 'BugDir' object has no attribute 'bug_shortname'</body>
  </comment>
  <comment>
    <uuid>5bcce533-03bb-4b3a-ab77-92d32a7aa054</uuid>
    <short-name>bea/206/5bc</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 15 Jul 2010 10:35:43 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed by replacing

  '/bug?id=%s' % shortname

with

  '/bug?%s' % urlencode({'id':bug.id.long_user()})
</body>
  </comment>
</bug>
<bug>
  <uuid>27549110-e491-4651-81ab-84de2ed8e14a</uuid>
  <short-name>bea/275</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>Chris Ball &lt;cjb@laptop.org&gt;</reporter>
  <creator>Chris Ball &lt;cjb@laptop.org&gt;</creator>
  <created>Thu, 24 Jun 2010 22:17:35 +0000</created>
  <summary>Fix Unicode handling.</summary>
  <extra-string>BLOCKS:77399855-6300-41a8-91a3-decbb915a3ff</extra-string>
  <extra-string>TAG:CFBE</extra-string>
  <comment>
    <uuid>6724994b-61de-45f1-b5e9-474a76b49311</uuid>
    <short-name>bea/275/672</short-name>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Fri, 25 Jun 2010 17:02:09 +0000</date>
    <content-type>text/plain</content-type>
    <body>Same output here, so it doesn't feel like locale:

UTF-8
UTF-8

Note that bea/12c is the only bug that I've found to trigger this
(because it's the only one containing UTF-8 in a comment).</body>
  </comment>
  <comment>
    <uuid>aa30c0f4-f428-4cbb-9597-f64cfaf06728</uuid>
    <short-name>bea/275/aa3</short-name>
    <in-reply-to>6724994b-61de-45f1-b5e9-474a76b49311</in-reply-to>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 25 Jun 2010 17:25:20 +0000</date>
    <content-type>text/plain</content-type>
    <body>This should fix it.</body>
  </comment>
  <comment>
    <uuid>9f03980b-d572-45bf-8b9a-3fc959798bc6</uuid>
    <short-name>bea/275/9f0</short-name>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Fri, 25 Jun 2010 20:31:34 +0000</date>
    <content-type>text/plain</content-type>
    <body>
Tested working.  Thanks!</body>
  </comment>
  <comment>
    <uuid>27c70465-387e-442e-afb3-e193de42c829</uuid>
    <short-name>bea/275/27c</short-name>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Thu, 24 Jun 2010 22:18:34 +0000</date>
    <content-type>text/plain</content-type>
    <body>When loading a bug containing UTF-8 (bea/12c), I see:

Traceback (most recent call last):
   File "/usr/lib/python2.6/site-packages/cherrypy/_cpwsgi.py", line 168, in next
      chunk = chunk.encode("ISO-8859-1")
UnicodeEncodeError: 'latin-1' codec can't encode character u'\u201c' in position 11563: ordinal not in range(256)</body>
  </comment>
  <comment>
    <uuid>72582f6f-ef8f-4e8f-9d24-f98ad874a3f7</uuid>
    <short-name>bea/275/725</short-name>
    <in-reply-to>27c70465-387e-442e-afb3-e193de42c829</in-reply-to>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 25 Jun 2010 16:21:56 +0000</date>
    <content-type>text/plain</content-type>
    <body>Hmm, it works for me.  Maybe your locale is funny.  I get:

  $ python -c 'import libbe.util.encoding as e;
               import libbe.ui.util.pager as p;
               print e.get_encoding();
               p.run_pager();
               print e.get_encoding()'
  UTF-8
  UTF-8

but perhaps you're getting ISO-8859-1 for one of those?</body>
  </comment>
</bug>
<bug>
  <uuid>5920ef40-ce56-44e0-9e2d-e9b888ab2880</uuid>
  <short-name>bea/592</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>Eric Kow &lt;eric.kow@gmail.com&gt;</reporter>
  <creator>Eric Kow &lt;eric.kow@gmail.com&gt;</creator>
  <created>Mon, 29 Mar 2010 15:50:39 +0000</created>
  <summary>Fancy _darcs/prefs/author contents confuse be</summary>
  <comment>
    <uuid>285006ba-16fc-4d09-86f1-893ff515e487</uuid>
    <short-name>bea/592/285</short-name>
    <author>Eric Kow &lt;eric.kow@gmail.com&gt;</author>
    <date>Mon, 29 Mar 2010 15:52:53 +0000</date>
    <content-type>text/plain</content-type>
    <body>If I have just "foo@example.com" in _darcs/prefs/author, be is perfectly happy.

But having instead "Foo Bar &lt;foo@example.com&gt;" causes this error on be new:
libbe.mapfile.IllegalValue: Illegal value "Foo Bar &lt;foo@example.com&gt;\n"</body>
  </comment>
  <comment>
    <uuid>1b21dabc-a90c-4687-bea0-7e9e69956e23</uuid>
    <short-name>bea/592/1b2</short-name>
    <in-reply-to>285006ba-16fc-4d09-86f1-893ff515e487</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 19 May 2010 11:16:23 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; libbe.mapfile.IllegalValue: Illegal value "Foo Bar &lt;foo@example.com&gt;\n"

The trailing endline was the problem.  Fixed now.</body>
  </comment>
</bug>
<bug>
  <uuid>b3562f08-ad27-4b9f-8d21-8b58ba6d9eac</uuid>
  <short-name>bea/b35</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>Anton Batenev &lt;abbat@abbat&gt;</reporter>
  <creator>Anton Batenev &lt;abbat@abbat&gt;</creator>
  <created>Tue, 16 Mar 2010 12:40:01 +0000</created>
  <summary>UTF-8 problems</summary>
  <comment>
    <uuid>854eec21-2eeb-4ed4-af35-7a4a2e1f2e98</uuid>
    <short-name>bea/b35/854</short-name>
    <author>Anton Batenev &lt;abbat@abbat&gt;</author>
    <date>Tue, 16 Mar 2010 12:53:45 +0000</date>
    <content-type>text/plain</content-type>
    <body>When I try to create bug with utf8 string I get error:

$ be new 'utf8 string'
Traceback (most recent call last):
  File "/usr/bin/be", line 64, in &lt;module&gt;
    sys.exit(cmdutil.execute(args[0], args[1:]))
  File "/usr/lib/python2.6/site-packages/libbe/cmdutil.py", line 82, in execute
    manipulate_encodings=manipulate_encodings)
  File "/usr/lib/python2.6/site-packages/becommands/new.py", line 54, in execute
    bug = bd.new_bug(summary=summary.strip())
  File "/usr/lib/python2.6/site-packages/libbe/bugdir.py", line 584, in new_bug
    bg.save()
  File "/usr/lib/python2.6/site-packages/libbe/bug.py", line 388, in save
    self.save_settings()
  File "/usr/lib/python2.6/site-packages/libbe/bug.py", line 373, in save_settings
    mapfile.map_save(self.vcs, path, self._get_saved_settings())
  File "/usr/lib/python2.6/site-packages/libbe/mapfile.py", line 110, in map_save
    vcs.set_file_contents(path, contents, allow_no_vcs)
  File "/usr/lib/python2.6/site-packages/libbe/vcs.py", line 354, in set_file_contents
    f.write(contents)
  File "/usr/lib/python2.6/codecs.py", line 686, in write
    return self.writer.write(data)
  File "/usr/lib/python2.6/codecs.py", line 351, in write
    data, consumed = self.encode(object, self.errors)
UnicodeDecodeError: 'ascii' codec can't decode byte 0xd0 in position 95: ordinal not in range(128)
---

$ python
Python 2.6.1 (r261:67515, Jan  8 2010, 16:07:38)
[GCC 4.3.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import locale
&gt;&gt;&gt; sys.getdefaultencoding()
'ascii'
&gt;&gt;&gt; locale.getdefaultlocale()
('ru_RU', 'UTF-8')

I think it is more correct to use UTF-8 everywhere or use locale.getdefaultlocale() instead sys.getdefaultencoding().</body>
  </comment>
  <comment>
    <uuid>2a51d90a-d47e-4a67-abe7-cce19c1eafad</uuid>
    <short-name>bea/b35/2a5</short-name>
    <in-reply-to>854eec21-2eeb-4ed4-af35-7a4a2e1f2e98</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 19 Mar 2010 11:16:16 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; $ be new 'utf8 string'
&gt; Traceback (most recent call last):
&gt;   ...
&gt; UnicodeDecodeError: 'ascii' codec can't decode byte 0xd0 in position 95: ordinal not in range(128)

(bug reported against cjb@laptop.org-20091006145647-kqkmoh481tl5hvt4)

This was fixed with revision
  wking@drexel.edu-20091117145118-jltbju9thsn5xvkv
in my branch on Nov. 17, 2009.

&gt; I think it is more correct to use UTF-8 everywhere or use
&gt; locale.getdefaultlocale() instead sys.getdefaultencoding().

We try to use unicode strings internally, it's input/output that's
difficult.  This particular bug turned out to be related to our
mapfile storage handling.  Take a look at the be.unicode-hg branch
leading up to revision
  wking@drexel.edu-20091117145118-jltbju9thsn5xvkv
for details.</body>
  </comment>
</bug>
<bug>
  <uuid>01e7151c-6113-4c8f-9fc5-4d594431bd2b</uuid>
  <short-name>bea/01e</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>Gianluca Montecchi &lt;gian@grys.it&gt;</reporter>
  <creator>Gianluca Montecchi &lt;gian@grys.it&gt;</creator>
  <created>Tue, 09 Feb 2010 23:03:33 +0000</created>
  <summary>Short the files name used by the be html command</summary>
  <comment>
    <uuid>2f9beed6-4008-442a-8d44-a45cb7ce0a36</uuid>
    <short-name>bea/01e/2f9</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 20 Feb 2010 18:10:42 +0000</date>
    <content-type>text/plain</content-type>
    <body>I'm not sure that changing the URLs is a good idea.  I'd rather use
.htaccess and mod_rewrite to redirect short URLs to their permanent
long equivalents.  Nobody else seems to mind though, so I've merged
Gianluca's solution with a few changes:
  * Since we're truncating bug IDs, truncate comment IDs too.
  * Use libbe.util.id._truncate to generate the short IDs, so that `be
    html` truncation is consistent with general BE truncation.
  * Updated cross-linking code to match.</body>
  </comment>
</bug>
<bug>
  <uuid>8fc5d6fa-cae1-451f-9817-3e4da6d0aac1</uuid>
  <short-name>bea/8fc</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 24 Jan 2010 16:28:06 +0000</created>
  <summary>be crashes on outdated id-cache</summary>
  <comment>
    <uuid>e3d802cf-1fff-4a48-a61c-a07578969333</uuid>
    <short-name>bea/8fc/e3d</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 25 Jan 2010 00:50:17 +0000</date>
    <content-type>text/plain</content-type>
    <body>Work around by removing id-cache (forcing recreation).

A better solution would be detecting the problem and recreating the
cache automatically.</body>
  </comment>
  <comment>
    <uuid>432e994f-3759-42bf-a80d-7cd626c7ce7c</uuid>
    <short-name>bea/8fc/432</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 24 Jan 2010 16:29:46 +0000</date>
    <content-type>text/plain</content-type>
    <body>For example, after merging in a branch with new bugs, the id-cache is
incomplete.  An example traceback (from `be list`) is

Traceback (most recent call last):
  File "./be", line 21, in &lt;module&gt;
    sys.exit(libbe.ui.command_line.main())
  File ".../be.wtk/libbe/ui/command_line.py", line 327, in main
    ret = dispatch(ui, command, args)
  File ".../be.wtk/libbe/ui/command_line.py", line 267, in dispatch
    ret = ui.run(command, options, args)
  File ".../be.wtk/libbe/command/base.py", line 504, in run
    return command.run(options, args)
  File ".../be.wtk/libbe/command/base.py", line 233, in run
    self.status = self._run(**params)
  File ".../be.wtk/libbe/command/list.py", line 168, in _run
    bugs = self._sort_bugs(bugs, cmp_list)
  File ".../be.wtk/libbe/command/list.py", line 229, in _sort_bugs
    bugs.sort(cmp_fn)
  File ".../be.wtk/libbe/bug.py", line 818, in __call__
    val = comparison(bug_1, bug_2)
  File ".../be.wtk/libbe/bug.py", line 798, in cmp_comments
    comms_1 = sorted(bug_1.comments(), key = lambda comm : comm.uuid)
  File ".../be.wtk/libbe/bug.py", line 687, in comments
    for comment in self.comment_root.traverse():
  File ".../be.wtk/libbe/storage/util/properties.py", line 297, in _fget
    value = generator(self)
  File ".../be.wtk/libbe/bug.py", line 225, in _get_comment_root
    return comment.load_comments(self, load_full=load_full)
  File ".../be.wtk/libbe/comment.py", line 85, in load_comments
    bug.id.storage())):
  File ".../be.wtk/libbe/storage/base.py", line 314, in children
    return self._children(*args, **kwargs)
  File ".../be.wtk/libbe/storage/vcs/base.py", line 804, in _children
    path = self.path(id, revision, relpath=False)
  File ".../be.wtk/libbe/storage/vcs/base.py", line 705, in path
    path = self._cached_path_id.path(id)
  File ".../be.wtk/libbe/storage/vcs/base.py", line 242, in path
    raise InvalidID(uuid)
libbe.storage.base.InvalidID: cf56e648-3b09-4131-8847-02dff12b4db2 in revision None</body>
  </comment>
</bug>
<bug>
  <uuid>ed5eac05-80ed-411d-88a4-d2261b879713</uuid>
  <short-name>bea/ed5</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sat, 02 Jan 2010 22:56:08 +0000</created>
  <summary>Slow and ugly diff implementation</summary>
  <comment>
    <uuid>9c4b8921-7b43-4bb6-b650-34144b414dc0</uuid>
    <short-name>bea/ed5/9c4</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 02 Jan 2010 22:58:31 +0000</date>
    <content-type>text/plain</content-type>
    <body>Ok, time to fix the issue I mentioned in this commit message:

revno: 473.1.63
revision-id: wking@drexel.edu-20091215114420-sbdnvm5jlx0ampbg

...
duplicate_bugdir() works, but for the vcs backends, it could require
shelling out for _every_ file read.  This could, and probably will, be
horribly slow.  Still it works ;).
    
I'm not sure what a better implementation would be.  The old
implementation checked out the entire earlier state into a temporary
directory
  pros: single shell out, simple upgrade implementation
  cons: wouldn't work well for HTTP backens
    
I think a good solution would run along the lines of the currently
commented out code in duplicate_bugdir(), where a
  VersionedStorage.changed_since(revision)
call would give you a list of changed files.  diff could work off of
that directly, without the need to generate a whole duplicate bugdir.
I'm stuck on how to handle upgrades though...
...</body>
  </comment>
    <comment>
      <uuid>c664b7be-ded5-42dd-a16a-82b2bdb52e36</uuid>
      <short-name>bea/ed5/c66</short-name>
      <in-reply-to>9c4b8921-7b43-4bb6-b650-34144b414dc0</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sat, 02 Jan 2010 23:04:01 +0000</date>
      <content-type>text/plain</content-type>
      <body>&gt; I'm stuck on how to handle upgrades though...

I've satisfied myself with the solution mentioned in bea86499-824e-4e77-b085-2d581fa9ccab/1100c966-9671-4bc6-8b68-6d408a910da1/bd1207ef-f97e-4078-8c5d-046072012082,
namely, upgrading on disk the way we've always done, and not
supporting on-the-fly upgrading at all.  This isn't important for this
bug, but I didn't want to just ignore that part of the commit message.</body>
    </comment>
  <comment>
    <uuid>9525e3f3-a044-4fa9-b311-56336267b8b5</uuid>
    <short-name>bea/ed5/952</short-name>
    <in-reply-to>9c4b8921-7b43-4bb6-b650-34144b414dc0</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 03 Jan 2010 12:25:03 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; I think a good solution would run along the lines of the currently
&gt; commented out code in duplicate_bugdir(), where a
&gt;   VersionedStorage.changed_since(revision)
&gt; call would give you a list of changed files.  diff could work off of
&gt; that directly, without the need to generate a whole duplicate bugdir.

This is definately the way to go.  Rough approach for the VCS family:

1) Parse `bzr diff` or such to get a list of new,changed,moved,removed
   paths.
2) Convert those paths to ids.
3) Return a list of ids to duplicate_bugdir().
4) Provide Storage.parent(id, revision), so duplicate_bugdir() could
   figure out what type of id we were dealing with (bugdir, bug,
   comment, other?), and construct the appropriate difference tree.

There could be a DupBugDir class which stored that diff tree and a
link to the current bugdir, which would make diffs much easier (work
already done, just copy the diff tree), and provide faster access to
unchanged files (just use the current version).</body>
  </comment>
</bug>
<bug>
  <uuid>1100c966-9671-4bc6-8b68-6d408a910da1</uuid>
  <short-name>bea/110</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 08 Dec 2009 00:48:27 +0000</created>
  <summary>Reoranize BE for more flexible backend / frontend</summary>
  <comment>
    <uuid>bb406a33-92b6-46dd-950c-c7cfb5440e7b</uuid>
    <short-name>bea/110/bb4</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 08 Dec 2009 01:06:12 +0000</date>
    <content-type>text/plain</content-type>
    <body>Rather than all the hackery that goes on with email-bugs, the email
interface, etc., it would be nice for distribution if be provided a
uniform issue/bug tracking library and a number of interfaces and
backends.

Current backends:
  filesystem (with assorted VCSs)
Current UIs:
  command line (be)
  email (be-handle-mail)
  web (CFBE)

Future backend architecture:
  be --repo REPO ...
where --repo REPO replaces and extends the current --dir DIR.  Example
REPOs could be
  path/to/repo                              (the current DIR)
  http://some-server.com:port/path/to/repo  (http interface)
  mysql://user@server:port/?db=db-name;pwd=password
  ...
Each repo would have to support a few get/set commands at the bugdir,
bug, and comment level.

The UIs would all load BugDir(REPO), and thus be backend agnostic.
This way a GUI app that let you work on your own machine could also be
used to work on a public repository.  Setting up a public repository
would just consist of exposing one of the wire-capable REPO formats
(e.g. http via a future `be serve MY-URL`) with public write
permissions.</body>
  </comment>
  <comment>
    <uuid>bd1207ef-f97e-4078-8c5d-046072012082</uuid>
    <short-name>bea/110/bd1</short-name>
    <in-reply-to>bb406a33-92b6-46dd-950c-c7cfb5440e7b</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 15 Dec 2009 12:21:11 +0000</date>
    <content-type>text/plain</content-type>
    <body>Some additional thoughts, as I've been developing this idea:

Different BE storage versions will be difficult to handle.
We currently do disk upgrades via
  libbe.storage.util.upgrade
which browses through the .be/ directory, making appropriate changes.

The new formats know very little about paths, which brought on the
whole libbe.storage.vcs.base.CachedPathID bit.  Still, most VCSs
seem to be able to handle renames, e.g.
  $ bzr cat -r 200 ./libbe/command/new.py
works, when as of revision 200, the file was
  ./becommands/new.py
In fact, bzr recognizes both names:
  $ diff &lt;(bzr cat -r 200 ./becommands/new.py) \
         &lt;(bzr cat -r 200 ./libbe/commands/new.py)
returns nothing.  Still, I'm not sure this is something we should
require in a storage backend.  Which means we'd need to have a
version-dependent id-to-path(version) function.

We also have the unfortunate situation of duplicate UUIDs from the old
  be merge
implemtation.  This means that id-to-path is not a well defined
mapping with single-uuid ids.  That's ok though, we get a bit uglier
and send the long_user() id into the storage backend instead.  While
not so elegant, this will avoid the need for the cached id/path table.

Ok, you say, we're fine if we have the compound bugdir/bug/comment ids
going out to storage, with the upgrader upgrading the file
appropriately for each file type.  Almost.  You'll still run into
trouble with upgrades like dir format v1.2 to 1.3 where targets
moved from a per-bug string to a seperate-bugs-with-dependencies.
Now you need to create virtual-target-bugs on the fly when you're
loading the old bugs.  Yuck.

All of this makes me wonder how much we care about being able to
see bug diffs for any repository format older than the current one.
I think that we don't really care ;).  After all, the on-disk
format should settle down as BE matures :p.  When you _do_ want
to see the long-term history of a particular bug, there's always
  bzr log .be/123/bugs/456/values
or the equivalent for your VCS.  If access to the raw log ends
up being important, it should be very easy to add
  libbe.storage.base.VersionedStorage.log(id)
  libbe.command.log</body>
  </comment>
  <comment>
    <uuid>3646e056-a2df-46e5-b877-88608c7cc5af</uuid>
    <short-name>bea/110/364</short-name>
    <in-reply-to>bd1207ef-f97e-4078-8c5d-046072012082</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 28 Dec 2009 12:12:45 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; We also have the unfortunate situation of duplicate UUIDs from the old
&gt;   be merge
&gt; implemtation.  This means that id-to-path is not a well defined
&gt; mapping with single-uuid ids.  That's ok though, we get a bit uglier
&gt; and send the long_user() id into the storage backend instead.  While
&gt; not so elegant, this will avoid the need for the cached id/path table.

The situation is worse than just the old `be merge` effects, because
the existence, children, and parents of a particular UUID may be
revision dependent.  A UUID will always refer to the same
bugdir/bug/comment, but that bugdir/bug/comment may have different
relatives.  Another point in favor of long_user()-style storage ids,
but that just pushes relation-tracking up to the command level.  I'm
still figuring out a good way to deal with this...</body>
  </comment>
  <comment>
    <uuid>7812d2e5-9d4b-4621-b071-22e91e8757d2</uuid>
    <short-name>bea/110/781</short-name>
    <in-reply-to>3646e056-a2df-46e5-b877-88608c7cc5af</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 29 Dec 2009 16:20:06 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; The situation is worse than just the old `be merge` effects, because
&gt; the existence, children, and parents of a particular UUID may be
&gt; revision dependent.  A UUID will always refer to the same
&gt; bugdir/bug/comment, but that bugdir/bug/comment may have different
&gt; relatives.

I'm not sure how to support .children(revision) in the Arch backend
or the older versions of Darcs without checking out a pristine tree
for the revision in question.  That's how we used to support
  BugDir.duplicate_bugdir()
but it doesn't fit well with the new Storage system.  Since I don't
feel strongly about tla or old Darcs support, I'm leaving that
functionality unimplemented.</body>
  </comment>
</bug>
<bug>
  <uuid>56506b73-36cc-4e32-a578-258a219edba8</uuid>
  <short-name>bea/565</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Fri, 20 Nov 2009 13:26:59 +0000</created>
  <summary>be email-bugs for bug submission from bzr-less users</summary>
  <comment>
    <uuid>0a995544-20dc-42a6-8d3f-348ebbc8921e</uuid>
    <short-name>bea/565/0a9</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 20 Nov 2009 13:31:25 +0000</date>
    <content-type>text/plain</content-type>
    <body>Since we'll be distributing a non-bzr-repo version, it would be nice
to adapt our 'submit bug' procedure
  $ be new "The demuxulizer is broken"
  Created bug with ID 48f
  $ be comment 48f
  &lt;Describe bug&gt;
  $ bzr commit --message "Reported bug in demuxulizer"
  $ bzr send --mail-to "be-devel@bugseverywhere.org"
to one that works with this setup.  Without guaranteed versioning,
that would probably be something along the lines of
  $ be new "The demuxulizer is broken"
  Created bug with ID 48f
  $ be comment 48f
  &lt;Describe bug&gt;
  $ be email-bugs [--to be-devel@bugseverywhere.org] 48f
With interfaces/email/interactive listening on the recieving end to
grab new-bug emails and import them into an incoming bug repository.</body>
  </comment>
  <comment>
    <uuid>4068c833-0c06-475e-8b7e-6701bc416dee</uuid>
    <short-name>bea/565/406</short-name>
    <in-reply-to>0a995544-20dc-42a6-8d3f-348ebbc8921e</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 29 Nov 2009 01:19:05 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; With interfaces/email/interactive listening on the recieving end to
&gt; grab new-bug emails and import them into an incoming bug repository.

The email-bugs -&gt; be-handle-mail import is based on `be import-xml`.
The current import-xml implementation allows good control over what
gets overwritten during a merge by overriding only those fields
defined in the incoming XML.

For clients without the versioned bugdir (e.g. they installed via a
release tarball or their distro's packaging system), `be email-bugs`
will not know what fields have been changed/added/etc., so it sets
_all_ the fields in the outgoing XML.  Importing that XML file will
override any changes that may have been made to the listed
bugs/comments between the release and your current source version, so
you may have to do some manual tweaking of the post-merge bugdir.

One possible workaround would be to change the merge algorithm in
import-xml to take advantage of version information given in the XML
file.  import-xml could checkout the shared root version of any
modified bugs, and compute the changes made by the remote user and
those made in the local tree.  It could then merge these changes more
intelligently, by prompting the user, keeping the local changes,
keeping the remote changes, etc.

While the more automated approach might be better, it's also more
complicated, so for now we'll stick with the simple "override all
fields defined in the XML" approach.</body>
  </comment>
</bug>
<bug>
  <uuid>764b812f-a0bb-4f4d-8e2f-c255c9474a0e</uuid>
  <short-name>bea/764</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Mon, 31 Aug 2009 13:57:54 +0000</created>
  <summary>Add docstrings explaining role of the libbe submodules.</summary>
</bug>
<bug>
  <uuid>51930348-9ccc-4165-af41-6c7450de050e</uuid>
  <short-name>bea/519</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 16 Aug 2009 19:05:59 +0000</created>
  <summary>Upgrade path for on-disk representation</summary>
  <extra-string>BLOCKS:22b6f620-d2f7-42a5-a02e-145733a4e366</extra-string>
  <extra-string>BLOCKS:427e0ca7-17f5-4a5a-8c68-98cc111a2495</extra-string>
  <comment>
    <uuid>f1479ecf-4154-4cd4-bbd6-0ed6275b9f98</uuid>
    <short-name>bea/519/f14</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 16 Aug 2009 19:07:06 +0000</date>
    <content-type>text/plain</content-type>
    <body>There is no obvious means of using
".be/version"/"libbe.bugdir.TREE_VERSION_STRING".  In the past I've
worked around this by keeping all the disk-reading backwards
compatible (e.g. homemade mapfile -&gt; YAML, the "From" hack in
libbe.comment.Comment.load_settings, possibly others).  However, this
is not the road to easily maintainable code.

Most projects only need to maintain backwards compatibility with the
last few versions of their disk cache, to allow users an easy upgrade
path.  The difficulties come with "be diff", which must be able to
read _every_ disk-image of the bugdir ever committed into something
comparible with the current cutting edge.  This makes sweeping changes
very difficult.  VCSs themselves avoid this by never showing their
disk-cache to another program, but we've shown ours to the VCS, and
it's difficult (or impossible, depending on the VCS) to change history
to match the current format.</body>
  </comment>
  <comment>
    <uuid>d304f93b-faf2-477e-9ff8-c77e301fd9f9</uuid>
    <short-name>bea/519/d30</short-name>
    <in-reply-to>f1479ecf-4154-4cd4-bbd6-0ed6275b9f98</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 31 Aug 2009 16:29:50 +0000</date>
    <content-type>text/plain</content-type>
    <body>Added libbe/upgrade.py to handle upgrading on-disk bugdirs.

When upgrade.BUGDIR_DISK_VERSION changes, a series of Updater
classes handle the upgrade.  For example, if 
  BUGDIR_DISK_VERSIONS = ["v1", "v2", "v3"]
and the on-disk version is "v1", you should have defined classes
  class Upgrade_1_to_2 (Upgrader):
      initial_version = "v1"
      final_version = "v2"
      def _upgrade():
          ....
  class Upgrade_2_to_3 (Upgrader):
      initial_version = "v2"
      final_version = "v3"
      def _upgrade():
          ....
and added them to upgraders:
  upgraders = [Upgrade_1_to_2, Upgrade_2_to_3]
If the on-disk version is v2, then only Upgrade_2_to_3.upgrade() is
run.  If the on-disk version is v1, then Upgrade_1_to_2.upgrade() is
run, followed by Upgrade_2_to_3.upgrade().

You can optionally define shortcut upgrades (e.g. Upgrade_1_to_3) for
efficiency or to avoid data loss.

This upgrade occurs during BugDir.load(), which is called by
BugDir.__init__(from_disk=True), before any processing of the on-disk
data except for the access of .be/version to determine if an upgrade
was necessary.</body>
  </comment>
</bug>
<bug>
  <uuid>427e0ca7-17f5-4a5a-8c68-98cc111a2495</uuid>
  <short-name>bea/427e</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Mon, 03 Aug 2009 23:10:02 +0000</created>
  <summary>Terminology: Version control system vs. RCS</summary>
  <extra-string>BLOCKED-BY:51930348-9ccc-4165-af41-6c7450de050e</extra-string>
  <comment>
    <uuid>a92f97a4-e9fe-43f7-bf56-5862b03a2641</uuid>
    <alt-id>&lt;87d49879v7.fsf@benfinney.id.au&gt;</alt-id>
    <short-name>bea/427e/a92</short-name>
    <author>Ben Finney &lt;ben@benfinney.id.au&gt;</author>
    <date>Sat, 13 Jun 2009 19:37:16 +1000</date>
    <content-type>text/plain</content-type>
    <body>Howdy all,

Currently, the code and interface of Bugs Everywhere speaks loosely
about the term “RCS”. Sometimes it means “revision control system”
referring in general to these types of system, and sometimes it talks
about GNU RCS, a specific system.

I propose that “Version Control System” (“VCS”) has emerged as a
consensus term to refer to such systems in general, with no specific
reference to any particular system.

So I'd like to modify the Bugs Everywhere code to disambiguate: the term
“VCS” will be used consistently to refer to version control systems in
general, and “RCS” will only ever refer to GNU RCS.

This will change some interface (e.g. the ‘rcs_name’ configuration
setting, and some of the methods on objects), but making this change
while Bugs Everywhere is small will be much less painful than making it
later.

Any objections? Any alternative suggestions?

-- 
 \       “I watched the Indy 500, and I was thinking that if they left |
  `\         earlier they wouldn't have to go so fast.” —Steven Wright |
_o__)                                                                  |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>29ad0d9e-c05b-4793-bb8b-e8bf237f51b3</uuid>
    <short-name>bea/427e/29a</short-name>
    <in-reply-to>a92f97a4-e9fe-43f7-bf56-5862b03a2641</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 03 Aug 2009 23:26:22 +0000</date>
    <content-type>text/plain</content-type>
    <body>&gt; Currently, the code and interface of Bugs Everywhere speaks loosely
&gt; about the term “RCS”. Sometimes it means “revision control system”
&gt; referring in general to these types of system, and sometimes it talks
&gt; about GNU RCS, a specific system.

I don't think we ever rever to GNU RCS.  Our current libbe.rcs.RCS
default implementation is a "don't version" backend for BE, but
perhaps this is what you're refereing to.

&gt; I propose that “Version Control System” (“VCS”) has emerged as a
&gt; consensus term to refer to such systems in general, with no specific
&gt; reference to any particular system.

Fair enough.

&gt; This will change some interface (e.g. the ‘rcs_name’ configuration
&gt; setting, and some of the methods on objects), but making this change
&gt; while Bugs Everywhere is small will be much less painful than making it
&gt; later.

Hmm, we really need a method for upgrading the on-disk BugDir version.
It's hard when you need to maintain backwards compatibilty with
earlier versions in the VCS history....</body>
  </comment>
</bug>
<bug>
  <uuid>dcca51b3-bf8f-4482-8f67-662cfbcb9c6c</uuid>
  <short-name>bea/dcc</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>Gianluca Montecchi &lt;gian@grys.it&gt;</reporter>
  <creator>Gianluca Montecchi &lt;gian@grys.it&gt;</creator>
  <created>Mon, 03 Aug 2009 20:30:43 +0000</created>
  <summary>BE should not crash if user.email  and user.name are not defined</summary>
  <comment>
    <uuid>d4a87066-c5f4-49f1-9bd9-a872c8e4ffe6</uuid>
    <short-name>bea/dcc/d4a</short-name>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Mon, 03 Aug 2009 20:33:30 +0000</date>
    <content-type>text/plain</content-type>
    <body>BE should not crash when be list|show is used on a git repository that
have not the config variables user.name and user.email defined in the
.git/config file.

To view the bug, in my opinion shold not be mandatory to have these two options
defined


Traceroute:

galactica:~/Devel/dumb&gt; be show 996
Traceback (most recent call last):
  File "/usr/bin/be", line 62, in &lt;module&gt;
    sys.exit(cmdutil.execute(args[0], args[1:]))
  File "/usr/lib/python2.5/site-packages/libbe/cmdutil.py", line 76, in execute
    ret = cmd.execute([a.decode(enc) for a in args])
  File "/usr/lib/python2.5/site-packages/becommands/show.py", line 60, in execute
    bd = bugdir.BugDir(from_disk=True, manipulate_encodings=not test)
  File "/usr/lib/python2.5/site-packages/libbe/bugdir.py", line 302, in __init__
    self.load()
  File "/usr/lib/python2.5/site-packages/libbe/bugdir.py", line 382, in load
    self.load_settings()
  File "/usr/lib/python2.5/site-packages/libbe/bugdir.py", line 411, in load_settings
    self._setup_user_id(self.user_id)
  File "/usr/lib/python2.5/site-packages/libbe/properties.py", line 293, in _fget
    value = generator(self)
  File "/usr/lib/python2.5/site-packages/libbe/bugdir.py", line 177, in _guess_user_id
    return self.rcs.get_user_id()
  File "/usr/lib/python2.5/site-packages/libbe/rcs.py", line 258, in get_user_id
    id = self._rcs_get_user_id()
  File "/usr/lib/python2.5/site-packages/libbe/git.py", line 56, in _rcs_get_user_id
    status,output,error = self._u_invoke_client("config", "user.name")
  File "/usr/lib/python2.5/site-packages/libbe/rcs.py", line 458, in _u_invoke_client
    return self._u_invoke(cl_args, stdin=stdin,expect=expect,cwd=directory)
  File "/usr/lib/python2.5/site-packages/libbe/rcs.py", line 450, in _u_invoke
    raise CommandError(args, status, error)
libbe.rcs.CommandError: Command failed (1):


while executing
  ['git', 'config', 'user.name']
galactica:~/Devel/dumb&gt;</body>
  </comment>
</bug>
<bug>
  <uuid>f77fc673-c852-4c81-bfa2-1d59de2661c8</uuid>
  <short-name>bea/f77</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>Gianluca Montecchi &lt;gian@grys.it&gt;</reporter>
  <creator>Gianluca Montecchi &lt;gian@grys.it&gt;</creator>
  <created>Tue, 21 Jul 2009 21:39:52 +0000</created>
  <summary>Comment should be threaded in the "be html" output</summary>
</bug>
<bug>
  <uuid>e4ed63f6-9000-4d0b-98c3-487269140141</uuid>
  <short-name>bea/e4e</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sat, 11 Jul 2009 15:48:32 +0000</created>
  <summary>utf8 problems in xml parsing</summary>
  <comment>
    <uuid>faa686bf-c0eb-48bf-8a0b-d9a2e02bd132</uuid>
    <short-name>bea/e4e/faa</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 12 Jul 2009 11:31:13 +0000</date>
    <content-type>text/plain</content-type>
    <body>Isolated problem to:

python -c 'from xml.etree import ElementTree; a=u"&lt;body&gt;\u1234&lt;/body&gt;"; print type(a), a; b=ElementTree.XML(a);'

Output attached below</body>
  </comment>
    <comment>
      <uuid>520a9829-8d90-43ce-be64-868b8321e5b0</uuid>
      <short-name>bea/e4e/520</short-name>
      <in-reply-to>faa686bf-c0eb-48bf-8a0b-d9a2e02bd132</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sun, 12 Jul 2009 11:42:16 +0000</date>
      <content-type>text/plain</content-type>
      <body>It looks like etree wants a byte string, not unicode input</body>
    </comment>
    <comment>
      <uuid>8b54e56e-c693-4594-998f-5bd6c1f385d7</uuid>
      <short-name>bea/e4e/8b5</short-name>
      <in-reply-to>520a9829-8d90-43ce-be64-868b8321e5b0</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sun, 12 Jul 2009 11:46:57 +0000</date>
      <content-type>text/plain</content-type>
      <body>For example, this works:

python -c 'from xml.etree import ElementTree; a=u"&lt;body&gt;\u1234&lt;/body&gt;"; print type(a), a; b=ElementTree.XML(a.encode("unicode_escape")); print type(b.text), unicode(b.text).decode("unicode_escape");'

Ugly though :p.  Ah well.</body>
    </comment>
  <comment>
    <uuid>07fc448f-c42e-4846-929a-8924de485766</uuid>
    <short-name>bea/e4e/07f</short-name>
    <in-reply-to>faa686bf-c0eb-48bf-8a0b-d9a2e02bd132</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 12 Jul 2009 11:34:22 +0000</date>
    <content-type>text/plain</content-type>
    <body>&lt;type 'unicode'&gt; &lt;body&gt;�&lt;/body&gt;
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.5/xml/etree/ElementTree.py", line 963, in XML
    parser.feed(text)
  File "/usr/lib/python2.5/xml/etree/ElementTree.py", line 1245, in feed
    self._parser.Parse(data, 0)
UnicodeEncodeError: 'ascii' codec can't encode character u'\u1234' in position 6: ordinal not in range(128)</body>
  </comment>
  <comment>
    <uuid>bb124fd9-08f5-4f82-a035-6355e8403075</uuid>
    <short-name>bea/e4e/bb1</short-name>
    <in-reply-to>07fc448f-c42e-4846-929a-8924de485766</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 12 Jul 2009 11:37:55 +0000</date>
    <content-type>text/plain</content-type>
    <body>That's with Python 2.5.2 and ElementTree "2326 2005-03-17 07:45:21Z fredrik"</body>
  </comment>
</bug>
<bug>
  <uuid>2b81b428-fc43-4970-9469-b442385b9c0d</uuid>
  <short-name>bea/2b8</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <reporter>gianluca &lt;gian@galactica&gt;</reporter>
  <creator>gianluca &lt;gian@galactica&gt;</creator>
  <created>Wed, 08 Jul 2009 21:27:37 +0000</created>
  <summary>Use the get_parser in becommands/html.py</summary>
</bug>
<bug>
  <uuid>f7ccd916-b5c7-4890-a2e3-8c8ace17ae3a</uuid>
  <short-name>bea/f7c</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 25 Nov 2008 02:30:35 +0000</created>
  <summary>UTF-8 encoding trouble with pipes in becommands/show</summary>
  <comment>
    <uuid>15602c0c-25e4-4c2c-9e24-79bdb90721b1</uuid>
    <short-name>bea/f7c/156</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 25 Nov 2008 02:36:16 +0000</date>
    <content-type>text/plain</content-type>
    <body>$ be show 31cd490d-a1c2-4ab3-8284-d80395e34dd2

works as expected, but

$ be show 31cd490d-a1c2-4ab3-8284-d80395e34dd2 | grep something
Traceback (most recent call last):
  File "/home/wking/bin/be", line 30, in &lt;module&gt;
    sys.exit(cmdutil.execute(sys.argv[1], sys.argv[2:]))
  File "/home/wking/src/fun/be-bugfix/libbe/cmdutil.py", line 57, in execute
  File "/home/wking/src/fun/be/be.wtk/becommands/show.py", line 44, in execute
    print bug.string(show_comments=True)
UnicodeEncodeError: 'ascii' codec can't encode character u'\u2019' in position 2100: ordinal not in range(128)

By the way, u2019 is a fancy apostrophe.</body>
  </comment>
  <comment>
    <uuid>028d2e8d-5b0f-4c43-a913-35a1709b2276</uuid>
    <short-name>bea/f7c/028</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 25 Nov 2008 19:41:02 +0000</date>
    <content-type>text/plain</content-type>
    <body>Wrote/borrowed libbe/encoding.py.
Now the following works:

python -c 'import libbe.encoding as e; print e.get_encoding(); e.set_IO_stream_encodings(e.get_encoding()) ;print u"\u2019"' | cat</body>
  </comment>
  <comment>
    <uuid>3f556a48-c538-4569-8609-3e829b561d78</uuid>
    <short-name>bea/f7c/3f5</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 25 Nov 2008 03:02:59 +0000</date>
    <content-type>text/plain</content-type>
    <body>Solution here
http://www.amk.ca/python/howto/unicode

You need to encode before printing.

This is unfortunate, because we're currently very glib about just
printing info to the terminal.  This makes it much more important to
have a single bugdir-wide encoding specification...</body>
  </comment>
  <comment>
    <uuid>f376debf-9f7e-4347-807f-00e7263487c7</uuid>
    <short-name>bea/f7c/f37</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 11 Jul 2009 18:28:57 +0000</date>
    <content-type>text/plain</content-type>
    <body>Test unicode �quotes�</body>
  </comment>
</bug>
<bug>
  <uuid>496edad5-1484-413a-bc68-4b01274a65eb</uuid>
  <short-name>bea/496</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sat, 22 Nov 2008 18:38:32 +0000</created>
  <summary>Early del-cleanup with Arch backend</summary>
  <comment>
    <uuid>8d927822-eff9-42c4-9541-8b784b3f7db2</uuid>
    <short-name>bea/496/8d9</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 22 Nov 2008 18:53:20 +0000</date>
    <content-type>text/plain</content-type>
    <body>I was having problems with `python test.py bugdir` with the Arch
backend.  Commits were failing with `archive not registered'.

Adding some trace information to arch.Arch._rcs_init() and
._rcs_cleanup() (the traceback module is great :p), I found
that the problem was coming from bugdir.BugDir.guess_rcs().

The Arch backend deletes any auto-created archives when it is cleaned
up (RCS.__del__ -&gt; RCS.cleanup -&gt; Arch._rcs_cleanup).  This means that
whatever instance is used to init the archive in guess_rcs() must be
kept around.  I had been doing:
  * installed_rcs() -&gt; Arch-instance-A
  * Arch-instance-A.init()
  * store Arch-instnance-A.name as bugdir.rcs_name
  * future calls to bugdir.rcs get new instance Arch-instance-B
  * eventually Arch-instance-A cleaned up
  * archive dissapears &amp; tests crash

I switched things around so .rcs is the `master attribute' and
.rcs_name follows it.  Now just save whichever rcs you used to init
your archive as .rcs.

In order to implement the fix, I had to tweak the memory/file-system
interaction a bit.  Instead of saving the settings *every*time* a
setting_property changed, we now save only if the .be file exists.
This file serves as a 'file-system-bugdir-active' flag.  Before it is
created (e.g., by a .save()), the BugDir lives purely in memory, and
can freely go about configuring .rcs, .rcs_name, etc until it get's
to the point where it's ready to go to disk.</body>
  </comment>
</bug>
<bug>
  <uuid>8e83da06-26f1-4763-a972-dae7e7062233</uuid>
  <short-name>bea/8e8</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Fri, 21 Nov 2008 18:41:03 +0000</created>
  <summary>test.py removes path to bzrlib</summary>
  <comment>
    <uuid>2ae039de-5b0d-4a4f-aa80-6c81d1345367</uuid>
    <short-name>bea/8e8/2ae</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 21 Nov 2008 19:12:42 +0000</date>
    <content-type>text/plain</content-type>
    <body>Aha, a final os.chdir('/') line is required to clean up after the
set_root.py doctest.</body>
  </comment>
  <comment>
    <uuid>13e88b64-117b-4f8b-8cba-8f4a9bc394f5</uuid>
    <short-name>bea/8e8/13e</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 21 Nov 2008 18:41:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>File "/home/wking/src/fun/be-bugfix/becommands/status.py", line 25, in becommands.status.execute
Failed example:
    bd = bugdir.simple_bug_dir()
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.status.execute[1]&gt;", line 1, in &lt;module&gt;
        bd = bugdir.simple_bug_dir()
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 293, in simple_bug_dir
        bugdir = BugDir(dir.path, sink_to_existing_root=False, allow_rcs_init=True)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 99, in __init__
        rcs = self.guess_rcs(allow_rcs_init)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 165, in guess_rcs
        rcs = installed_rcs()
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 53, in installed_rcs
        return _get_matching_rcs(lambda rcs: rcs.installed())
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 37, in _get_matching_rcs
        if matchfn(rcs) == True:
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 53, in &lt;lambda&gt;
        return _get_matching_rcs(lambda rcs: rcs.installed())
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 180, in installed
        self._rcs_help()
      File "/home/wking/src/fun/be-bugfix/libbe/bzr.py", line 32, in _rcs_help
        status,output,error = self._u_invoke_client("--help")
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 362, in _u_invoke_client
        return self._u_invoke(cl_args, expect, cwd=directory)
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 355, in _u_invoke
        raise CommandError(error, status)
    CommandError: Command failed (1): 'import site' failed; use -v for traceback
    bzr: ERROR: Couldn't import bzrlib and dependencies.
    Please check bzrlib is on your PYTHONPATH.

    Traceback (most recent call last):
      File "/usr/bin/bzr", line 64, in &lt;module&gt;
        import bzrlib
    ImportError: No module named bzrlib</body>
  </comment>
  <comment>
    <uuid>a492508e-0be7-4403-bbd0-9cdc0a46b06b</uuid>
    <short-name>bea/8e8/a49</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 21 Nov 2008 19:01:19 +0000</date>
    <content-type>text/plain</content-type>
    <body>Hysteretic!  test.py severity passes, then fails.

Problem caused somewhere in set_root?  Doctest?  Bzr?

libbe/plugin.py adds the BE-path to sys.path, but it is done by the
time the TestRunner fires up...  Wierd.

$ python test.py severity set_root severity
Doctest: becommands.severity.execute ... ok
Doctest: becommands.set_root.execute ... FAIL
Doctest: becommands.severity.execute ... FAIL

======================================================================
FAIL: Doctest: becommands.set_root.execute
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib/python2.5/doctest.py", line 2128, in runTest
    raise self.failureException(self.format_failure(new.getvalue()))
AssertionError: Failed doctest test for becommands.set_root.execute
  File "/home/wking/src/fun/be-bugfix/becommands/set_root.py", line 22, in execute

----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/set_root.py", line 41, in becommands.set_root.execute
Failed example:
    print rcs.name
Expected:
    Arch
Got:
    bzr
----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/set_root.py", line 43, in becommands.set_root.execute
Failed example:
    execute([])
Expected:
    Using Arch for revision control.
    Directory initialized.
Got:
    Using bzr for revision control.
    Directory initialized.


======================================================================
FAIL: Doctest: becommands.severity.execute
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib/python2.5/doctest.py", line 2128, in runTest
    raise self.failureException(self.format_failure(new.getvalue()))
AssertionError: Failed doctest test for becommands.severity.execute
  File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 22, in execute

----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 25, in becommands.severity.execute
Failed example:
    bd = bugdir.simple_bug_dir()
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.severity.execute[1]&gt;", line 1, in &lt;module&gt;
        bd = bugdir.simple_bug_dir()
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 293, in simple_bug_dir
        bugdir = BugDir(dir.path, sink_to_existing_root=False, allow_rcs_init=True)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 99, in __init__
        rcs = self.guess_rcs(allow_rcs_init)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 165, in guess_rcs
        rcs = installed_rcs()
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 53, in installed_rcs
        return _get_matching_rcs(lambda rcs: rcs.installed())
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 37, in _get_matching_rcs
        if matchfn(rcs) == True:
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 53, in &lt;lambda&gt;
        return _get_matching_rcs(lambda rcs: rcs.installed())
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 180, in installed
        self._rcs_help()
      File "/home/wking/src/fun/be-bugfix/libbe/bzr.py", line 32, in _rcs_help
        status,output,error = self._u_invoke_client("--help")
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 362, in _u_invoke_client
        return self._u_invoke(cl_args, expect, cwd=directory)
      File "/home/wking/src/fun/be-bugfix/libbe/rcs.py", line 355, in _u_invoke
        raise CommandError(error, status)
    CommandError: Command failed (1): 'import site' failed; use -v for traceback
    bzr: ERROR: Couldn't import bzrlib and dependencies.
    Please check bzrlib is on your PYTHONPATH.

    Traceback (most recent call last):
      File "/usr/bin/bzr", line 64, in &lt;module&gt;
        import bzrlib
    ImportError: No module named bzrlib

----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 26, in becommands.severity.execute
Failed example:
    os.chdir(bd.root)
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.severity.execute[2]&gt;", line 1, in &lt;module&gt;
        os.chdir(bd.root)
    NameError: name 'bd' is not defined
----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 27, in becommands.severity.execute
Failed example:
    execute(["a"])
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.severity.execute[3]&gt;", line 1, in &lt;module&gt;
        execute(["a"])
      File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 40, in execute
        bd = bugdir.BugDir(loadNow=True)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 85, in __init__
        root = os.getcwd()
    OSError: [Errno 2] No such file or directory
----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 29, in becommands.severity.execute
Failed example:
    execute(["a", "wishlist"])
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.severity.execute[4]&gt;", line 1, in &lt;module&gt;
        execute(["a", "wishlist"])
      File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 40, in execute
        bd = bugdir.BugDir(loadNow=True)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 85, in __init__
        root = os.getcwd()
    OSError: [Errno 2] No such file or directory
----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 30, in becommands.severity.execute
Failed example:
    execute(["a"])
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.severity.execute[5]&gt;", line 1, in &lt;module&gt;
        execute(["a"])
      File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 40, in execute
        bd = bugdir.BugDir(loadNow=True)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 85, in __init__
        root = os.getcwd()
    OSError: [Errno 2] No such file or directory
----------------------------------------------------------------------
File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 32, in becommands.severity.execute
Failed example:
    execute(["a", "none"])
Expected:
    Traceback (most recent call last):
    UserError: Invalid severity level: none
Got:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest becommands.severity.execute[6]&gt;", line 1, in &lt;module&gt;
        execute(["a", "none"])
      File "/home/wking/src/fun/be-bugfix/becommands/severity.py", line 40, in execute
        bd = bugdir.BugDir(loadNow=True)
      File "/home/wking/src/fun/be-bugfix/libbe/bugdir.py", line 85, in __init__
        root = os.getcwd()
    OSError: [Errno 2] No such file or directory


----------------------------------------------------------------------
Ran 3 tests in 8.719s

FAILED (failures=2)</body>
  </comment>
</bug>
<bug>
  <uuid>31cd490d-a1c2-4ab3-8284-d80395e34dd2</uuid>
  <short-name>bea/31c</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>wking</creator>
  <created>Thu, 13 Nov 2008 16:45:24 +0000</created>
  <summary>elementtree module moved in Python 2.5</summary>
  <comment>
    <uuid>b2a333f7-eda6-42b9-8940-177f61ca7f48</uuid>
    <short-name>bea/31c/b2a</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 13 Nov 2008 17:27:17 +0000</date>
    <content-type>text/plain</content-type>
    <body>$ python test.py 
**********************************************************************
File "/home/wking/src/fun/be/libbe/plugin.py", line 31, in libbe.plugin.iter_plugins
Failed example:
    "plugin" in [n for n,m in iter_plugins("libbe")]
Exception raised:
    Traceback (most recent call last):
      File "/usr/lib/python2.5/doctest.py", line 1228, in __run
        compileflags, 1) in test.globs
      File "&lt;doctest libbe.plugin.iter_plugins[1]&gt;", line 1, in &lt;module&gt;
        "plugin" in [n for n,m in iter_plugins("libbe")]
      File "/home/wking/src/fun/be/libbe/plugin.py", line 38, in iter_plugins
        yield modfile[:-3], my_import(prefix+"."+modfile[:-3])
      File "/home/wking/src/fun/be/libbe/plugin.py", line 21, in my_import
        module = __import__(mod_name)
      File "/home/wking/src/fun/be/libbe/restconvert.py", line 27, in &lt;module&gt;
        from elementtree import ElementTree
    ImportError: No module named elementtree
**********************************************************************
1 items had failures:
   1 of   2 in libbe.plugin.iter_plugins
***Test Failed*** 1 failures.
Traceback (most recent call last):
  File "test.py", line 32, in &lt;module&gt;
    for module in plugin.iter_plugins("libbe"):
  File "/home/wking/src/fun/be/libbe/plugin.py", line 38, in iter_plugins
    yield modfile[:-3], my_import(prefix+"."+modfile[:-3])
  File "/home/wking/src/fun/be/libbe/plugin.py", line 21, in my_import
    module = __import__(mod_name)
  File "/home/wking/src/fun/be/libbe/restconvert.py", line 27, in &lt;module&gt;
    from elementtree import ElementTree
ImportError: No module named elementtree


Looking into ElementTree, I found their webpage:
http://effbot.org/zone/element-index.htm

  It’s common practice to import ElementTree under an alias, both to
  minimize typing, and to make it easier to switch between different
  implementations:

  $ python
  &gt;&gt;&gt; import elementtree.ElementTree as ET
  &gt;&gt;&gt; import cElementTree as ET
  &gt;&gt;&gt; import lxml.etree as ET
  &gt;&gt;&gt; import xml.etree.ElementTree as ET # Python 2.5

Using new import style, fall back to old if that fails.
Affected files:
 libbe/restconvert.py
 Bugs-Everywhere-Web/beweb/formatting.py</body>
  </comment>
</bug>
<bug>
  <uuid>c4ea43d5-4964-49ea-a1eb-2bab2bde8e2e</uuid>
  <short-name>bea/c4e</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>wking</creator>
  <created>Thu, 13 Nov 2008 16:31:41 +0000</created>
  <summary>Usage of be/test.py is unclear</summary>
  <comment>
    <uuid>b3fabbe0-f05d-42a1-9037-e59e628a83e2</uuid>
    <short-name>bea/c4e/b3f</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 13 Nov 2008 16:38:36 +0000</date>
    <content-type>text/plain</content-type>
    <body>Ideally the tests would fail gracefully with some simple message like
"tla version control system not found", and we could skip the message
in the test.py docstring.</body>
  </comment>
  <comment>
    <uuid>acbecd72-988c-4899-a340-fea370ce15a8</uuid>
    <short-name>bea/c4e/acb</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 19 Nov 2008 17:11:51 +0000</date>
    <content-type>text/plain</content-type>
    <body>I rewrote test.py, so I suppose I'm the person who understands it
better now ;).  The usage is now documented in the test.py lead
comment.  The becommand tests now attempt to run with the first
*installed* versioning system, which should reduce cryptic errors.</body>
  </comment>
  <comment>
    <uuid>2ca25dd6-e9d1-4581-bd29-50f2eaa32fe4</uuid>
    <short-name>bea/c4e/2ca</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 13 Nov 2008 16:35:24 +0000</date>
    <content-type>text/plain</content-type>
    <body>When running `python test.py` I recieved lots of errors due to 'tla'
(the GNU Arch revision control system binary) not being installed.
I had expected test.py to only test the backends for installed VCSs.

I've added a note saying that `python test.py` tests *all* the
backends, but someone who understands the usage better can probably
write a nicer version.</body>
  </comment>
</bug>
<bug>
  <uuid>40dac9af-951e-4b98-8779-9ba02c37f8a1</uuid>
  <short-name>bea/40d</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>wking</creator>
  <created>Thu, 13 Nov 2008 15:54:45 +0000</created>
  <summary>Popen OSErrors not caught</summary>
  <comment>
    <uuid>e1ff6c81-37d8-43ee-9dcf-17a89e07556a</uuid>
    <short-name>bea/40d/e1f</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 13 Nov 2008 15:58:18 +0000</date>
    <content-type>text/plain</content-type>
    <body>Calls to Popen() while running `test.py` raised OSError because of
missing binaries (tla was not installed).  Added catches to produce
more useful error messages in the backtrace.</body>
  </comment>
</bug>
<bug>
  <uuid>0cad2ac6-76ef-4a88-abdf-b2e02de76f5c</uuid>
  <short-name>bea/0cad</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>hubert</creator>
  <created>Mon, 23 Jun 2008 04:57:22 +0000</created>
  <summary>set-root in git repository fails</summary>
  <comment>
    <uuid>202e0dc6-61bf-4b17-a8bd-f8a27482cb68</uuid>
    <short-name>bea/0cad/202</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 16 Nov 2008 20:36:20 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed another bug in git.strip_git().  lstrip() wasn't what I had thought.

&gt;&gt;&gt; "/a.b/.be/x/y".lstrip("/a.b/")
'e/x/y'

So I went back to just droping the first N chars

&gt;&gt;&gt; "/a.b/.be/x/y"[len("/a.b/"):]
'.be/x/y'</body>
  </comment>
  <comment>
    <uuid>6a0080c4-d684-4c2c-afaa-c15cc43d68ad</uuid>
    <short-name>bea/0cad/6a0</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 13 Nov 2008 19:31:04 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed with a simpler patch.</body>
  </comment>
  <comment>
    <uuid>16ba77d3-dfc9-4732-8d08-0e471f400d85</uuid>
    <short-name>bea/0cad/16b</short-name>
    <author>hubert</author>
    <date>Mon, 23 Jun 2008 05:02:22 +0000</date>
    <content-type>text/plain</content-type>
    <body>When I try to do set-root on a git repository, I get:
# be set-root .
Traceback (most recent call last):
  File "/usr/local/bin/be", line 55, in &lt;module&gt;
    sys.exit(execute(sys.argv[1], sys.argv[2:]))
  File "/usr/lib/python2.5/site-packages/libbe/cmdutil.py", line 105, in execute
  File "/usr/lib/python2.5/site-packages/becommands/set_root.py", line 57, in execute
  File "/usr/lib/python2.5/site-packages/libbe/bugdir.py", line 110, in create_bug_dir
  File "/usr/lib/python2.5/site-packages/libbe/bugdir.py", line 70, in set_version
  File "/usr/lib/python2.5/site-packages/libbe/git.py", line 51, in set_file_contents
  File "/usr/lib/python2.5/site-packages/libbe/git.py", line 38, in add_id
  File "/usr/lib/python2.5/site-packages/libbe/git.py", line 33, in invoke_client
  File "/usr/lib/python2.5/site-packages/libbe/rcs.py", line 63, in invoke
  File "/usr/lib/python2.5/subprocess.py", line 594, in __init__
    errread, errwrite)
  File "/usr/lib/python2.5/subprocess.py", line 1147, in _execute_child
    raise child_exception
OSError: [Errno 2] No such file or directory: ''

because the cwd argument for Popen is set to '' (the empty string).

The following patch fixes the issue:
--- libbe/git.py 2008-06-22 19:52:14.000000000 -0400
+++ libbe/git.py 2008-06-23 00:53:39.000000000 -0400
@@ -26,7 +26,7 @@
     return filename
 
 def invoke_client(*args, **kwargs):
-    directory = kwargs['directory']
+    directory = kwargs['directory'] or None
     expect = kwargs.get('expect', (0, 1))
     cl_args = ["git"]
     cl_args.extend(args)</body>
  </comment>
  <comment>
    <uuid>7e733393-8ba0-4345-a0e3-4140101d32f0</uuid>
    <short-name>bea/0cad/7e7</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 13 Nov 2008 20:18:02 +0000</date>
    <content-type>text/plain</content-type>
    <body>Oops, missed a case.  I now see what Hubert was saying about absolute
paths :p.  In git.strip_git(), the output of git_repo_for_path('.')
was being subtracted from an absolute path.  Obviously, if the path
was returning '.', you'd get things like

filename=
/home/wking/src/fun/testbe/.be/bugs/c3bf839b-88f9-4609-89a2-6a5b75c415b8/values

stripping 2 chars ('.' and '/')], returns
ome/wking/src/fun/testbe/.be/bugs/c3bf839b-88f9-4609-89a2-6a5b75c415b8/values


Now we convert the git_repo_for_path output to an absolute path and get

filename=
/home/wking/src/fun/testbe/.be/bugs/c3bf839b-88f9-4609-89a2-6a5b75c415b8/values
absRepoPath=
/home/wking/src/fun/testbe
absRepoSlashedDir=
/home/wking/src/fun/testbe/
returns
.be/bugs/c3bf839b-88f9-4609-89a2-6a5b75c415b8/values</body>
  </comment>
  <comment>
    <uuid>17a2217e-fc1d-4d7a-a569-4fd2a4a2261e</uuid>
    <short-name>bea/0cad/17a</short-name>
    <author>hubert</author>
    <date>Tue, 24 Jun 2008 02:45:18 +0000</date>
    <content-type>text/plain</content-type>
    <body>It looks like the problems with the git backend are more than just in the
site-init command.  It looks like several places expect that git_dir_for_path
and git_repo_for_path return absolute paths, while in the current
implementation, it may not be the case.  Here is an updated patch to fix this.
This replaces the previous patch that I gave in this bug.  It seems to work for
me, but I haven't heavily tested it.

--- libbe/git.py	2008-06-22 19:52:14.000000000 -0400
+++ /libbe/git.py	2008-06-23 22:39:17.000000000 -0400
@@ -102,11 +102,16 @@
     """Find the root of the deepest repository containing path."""
     # Assume that nothing funny is going on; in particular, that we aren't
     # dealing with a bare repo.
-    return os.path.dirname(git_dir_for_path(path))
+    # "git rev-parse --show-cdup" gives the relative path to the top-level
+    # directory of the repository.  We then join that to the requested path,
+    # and then use realpath to turn it into an absolute path and to get rid of
+    # ".." components.
+    return os.path.realpath(os.path.join(path,invoke_client("rev-parse", "--show-cdup", directory=path)[1].rstrip()))
 
 def git_dir_for_path(path):
     """Find the git-dir of the deepest repo containing path."""
-    return invoke_client("rev-parse", "--git-dir", directory=path)[1].rstrip()
+    repo = git_repo_for_path(path)
+    return os.path.join(repo,invoke_client("rev-parse", "--git-dir", directory=repo)[1].rstrip())
 
 def export(spec, bug_dir, revision_dir):
     """Check out commit 'spec' from the git repo containing bug_dir into</body>
  </comment>
</bug>
<bug>
  <uuid>c45e5ece-63e3-4fd2-b33f-0bfd06820cf4</uuid>
  <short-name>bea/c45</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>j</creator>
  <created>Mon, 14 Apr 2008 16:42:37 +0000</created>
  <summary>use python instead of python2.4 in Bugs-Everywhere-Web/start-beweb.py</summary>
  <comment>
    <uuid>1cb7063f-07ce-4a76-98f9-d184e1ee7282</uuid>
    <short-name>bea/c45/1cb</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 24 Nov 2008 13:23:43 +0000</date>
    <content-type>text/plain</content-type>
    <body>Looks like j@oil21.org fixed this in 211.3.1.</body>
  </comment>
  <comment>
    <uuid>04d71e10-9e44-4006-ab37-b4cc71647671</uuid>
    <short-name>bea/c45/04d</short-name>
    <author>j</author>
    <date>Mon, 14 Apr 2008 16:43:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>Bugs-Everywhere-Web/start-beweb.py should call python not python2.4
it works great with python2.5</body>
  </comment>
</bug>
<bug>
  <uuid>508ea95e-7bc6-4b9b-9e36-a3a87014423d</uuid>
  <short-name>bea/508</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>jelmer</creator>
  <created>Sun, 15 Jul 2007 13:33:03 +0000</created>
  <summary>should check not just EDITOR but also VISUAL.</summary>
  <comment>
    <uuid>e173c09a-1b3e-4d8a-a86a-6b8c94a76247</uuid>
    <short-name>bea/508/e17</short-name>
    <author>jelmer</author>
    <date>Sun, 15 Jul 2007 13:34:52 +0000</date>
    <content-type>text/plain</content-type>
    <body>the $VISUAL environment variable is common for setting a users preferred 
editor. It would be nice if this would be supported by be.</body>
  </comment>
  <comment>
    <uuid>1ba36272-7ae1-4f95-8002-7b45e62e6790</uuid>
    <short-name>bea/508/1ba</short-name>
    <in-reply-to>e173c09a-1b3e-4d8a-a86a-6b8c94a76247</in-reply-to>
    <author>abentley</author>
    <date>Mon, 16 Jul 2007 15:23:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>Note that VISUAL means interactive editors like vi, emacs.  It compares with
EDITOR, which originally meant line editors like ex (or edlin?).</body>
  </comment>
</bug>
<bug>
  <uuid>e2f6514c-5f9f-4734-a537-daf3fbe7e9a0</uuid>
  <short-name>bea/e2f</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Thu, 14 Sep 2006 16:47:57 +0000</created>
  <summary>Add a reporter field</summary>
  <comment>
    <uuid>e5decfc6-050b-4283-8776-977bf85b2c99</uuid>
    <short-name>bea/e2f/e5d</short-name>
    <author>abentley</author>
    <date>Thu, 14 Sep 2006 18:03:41 +0000</date>
    <content-type>text/plain</content-type>
    <body>Jens Mueller:
Referring to the fields describing a bug, I suggest the following:
The field 'Creator' should be named 'Reporter' (minor issue).</body>
  </comment>
  <comment>
    <uuid>bcd6e5d4-8d03-43ad-a10d-17619735d077</uuid>
    <short-name>bea/e2f/bcd</short-name>
    <in-reply-to>e5decfc6-050b-4283-8776-977bf85b2c99</in-reply-to>
    <author>abentley</author>
    <date>Thu, 14 Sep 2006 18:05:48 +0000</date>
    <content-type>text/plain</content-type>
    <body>There is definitely a difference between the person who reports a bug and the
person who enters it in the system.  For example, you are reporting bugs to me,
and I am entering them in the Bugs Everywhere bug list.

Perhaps there should be two fields.</body>
  </comment>
</bug>
<bug>
  <uuid>a4d38ba7-ec28-4096-a4f3-eb8c9790ffb2</uuid>
  <short-name>bea/a4d</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Mon, 10 Apr 2006 23:22:17 +0000</created>
  <summary>be diff doesn't work with bzr in directories that have no commits</summary>
  <comment>
    <uuid>3415fbd7-5a7e-4a7f-af30-82f8ce6ca85b</uuid>
    <short-name>bea/a4d/341</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 24 Nov 2008 13:05:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed by 273.  Probably around 253.</body>
  </comment>
  <comment>
    <uuid>b0e7165b-7099-45ca-9513-412225f7bd52</uuid>
    <short-name>bea/a4d/b0e</short-name>
    <author>abentley</author>
    <date>Mon, 10 Apr 2006 23:23:25 +0000</date>
    <content-type>text/plain</content-type>
    <body>Err, perhaps we should use revision ids.  Or status.  Or something...


$ be diff
Traceback (most recent call last):
  File "/usr/bin/be", line 55, in ?
    sys.exit(execute(sys.argv[1], sys.argv[2:]))
  File "/usr/lib/python2.4/site-packages/libbe/cmdutil.py", line 105, in execute    return get_command(cmd).execute([a.decode(encoding) for a in args])
  File "/usr/lib/python2.4/site-packages/becommands/diff.py", line 33, in execute
    diff.diff_report(diff.reference_diff(tree, spec), tree)
  File "/usr/lib/python2.4/site-packages/libbe/diff.py", line 41, in reference_diff
    return diff(bugdir.get_reference_bugdir(spec), bugdir)
  File "/usr/lib/python2.4/site-packages/libbe/diff.py", line 22, in diff
    old_bug_map = old_tree.bug_map()
  File "/usr/lib/python2.4/site-packages/libbe/bugdir.py", line 169, in bug_map
    for bug in self.list():
  File "/usr/lib/python2.4/site-packages/libbe/bugdir.py", line 164, in list
    for uuid in self.list_uuids():
  File "/usr/lib/python2.4/site-packages/libbe/bugdir.py", line 177, in list_uuids
    for uuid in os.listdir(self.bugs_path):
OSError: [Errno 2] No such file or directory: '/home/abentley/.bzrrevs/None/.be/bugs'</body>
  </comment>
</bug>
<bug>
  <uuid>2103f60c-36e5-4b05-b57c-8c6fee2d80d4</uuid>
  <short-name>bea/210</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Sat, 01 Apr 2006 18:29:33 +0000</created>
  <summary>target (and others?) aren't parsed properly</summary>
  <comment>
    <uuid>b8bbd433-9017-4c04-a038-2a7370a3adc7</uuid>
    <short-name>bea/210/b8b</short-name>
    <author>abentley</author>
    <date>Sat, 01 Apr 2006 18:32:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>Target takes no options, so it does no parsing.  Bad.  We should probably
use a framework more like bzr's.  In any case, EVERY command should accept -h.</body>
  </comment>
  <comment>
    <uuid>e5db7c9b-de48-4302-905b-9570bb6e7ade</uuid>
    <short-name>bea/210/e5d</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 14 Nov 2008 05:00:43 +0000</date>
    <content-type>text/plain</content-type>
    <body>This seems to be taken care of.</body>
  </comment>
</bug>
<bug>
  <uuid>6622c06a-ed84-4d45-8011-a082fca219b6</uuid>
  <short-name>bea/662</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Mon, 30 Jan 2006 20:03:25 +0000</created>
  <summary>Better word wrapping in comments.  (kill &lt;pre&gt;.)</summary>
</bug>
<bug>
  <uuid>a403de79-8f39-41f2-b9ec-15053b175ee2</uuid>
  <short-name>bea/a40</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:07:25 +0000</created>
  <summary>Beweb should support declaring username</summary>
  <comment>
    <uuid>0fd8ba95-d9ea-49b3-9f5a-b0eb723cdbe1</uuid>
    <short-name>bea/a40/0fd</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 25 Nov 2008 02:24:04 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged from bug c894f10f-197d-4b22-9c5b-19f394df40d4</body>
  </comment>
    <comment>
      <uuid>208595bd-35b8-44c2-bf97-fc5ef9e7a58d</uuid>
      <short-name>bea/a40/208</short-name>
      <in-reply-to>0fd8ba95-d9ea-49b3-9f5a-b0eb723cdbe1</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sat, 22 Nov 2008 21:43:29 +0000</date>
      <content-type>text/plain</content-type>
      <body>Example:

We're working happily in a versioned bugdir, and our RCS knows who we
are.  We create a temporary repository copy from a previous revision
for diff generation.  We set the RCS for the copy to "None", since we
didn't bother initializing our normal RCS in the snapshot copy.  But
now the BugDir instantized on the copy doesn't know who we are!

Solution:

Track user id in the bugdir settings file.  If you
bugdir.settings["user_id"], it will be saved and loaded.  When loaded,
it will also set bugdir.user_id.  If you set rcs.user_id, it will be
returned by rcs.get_user_id(), instead of returing the output of
rcs._rcs_get_user_id().  We should be caching the output of
_rcs_get_user_id() anyway.</body>
    </comment>
  <comment>
    <uuid>25c67b0b-1afd-4613-a787-e0f018614966</uuid>
    <short-name>bea/a40/25c</short-name>
    <in-reply-to>0fd8ba95-d9ea-49b3-9f5a-b0eb723cdbe1</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 23 Nov 2008 12:37:57 +0000</date>
    <content-type>text/plain</content-type>
    <body>This bug duplicates a403de79-8f39-41f2-b9ec-15053b175ee2</body>
  </comment>
</bug>
<bug>
  <uuid>65776f00-34d8-4b58-874d-333196a5e245</uuid>
  <short-name>bea/657</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:07:08 +0000</created>
  <summary>Select severity filter</summary>
</bug>
<bug>
  <uuid>2929814b-2163-45d0-87ba-f7d1ef0a32a9</uuid>
  <short-name>bea/292</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Wed, 04 Jan 2006 21:03:27 +0000</created>
  <summary>More types of closed bugs</summary>
  <comment>
    <uuid>6d7072de-89b6-4c53-a435-6879c644a0e8</uuid>
    <short-name>bea/292/6d7</short-name>
    <author>abentley</author>
    <date>Wed, 04 Jan 2006 21:03:54 +0000</date>
    <content-type>text/plain</content-type>
    <body>We should support:

WONTFIX

EMPTY</body>
  </comment>
</bug>
<bug>
  <uuid>dba25cfd-aa15-457c-903a-b53ecb5a3b2c</uuid>
  <short-name>bea/dba</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Tue, 27 Dec 2005 16:59:49 +0000</created>
  <summary>there's a tyop in the wx example gui (in the line that appends ../../ to sys.path)</summary>
</bug>
<bug>
  <uuid>381555eb-f2e3-4ef0-8303-d759c00b390a</uuid>
  <short-name>bea/381</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Tue, 17 May 2005 13:39:02 +0000</created>
  <summary>Ensure .be is source in Arch</summary>
  <comment>
    <uuid>9aa88bbd-71d0-44fa-804d-3562171f9539</uuid>
    <short-name>bea/381/9aa</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 13:44:33 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged from bug 4f7a4c3b-31e3-4023-8c9d-e67f627a34f0</body>
  </comment>
  <comment>
    <uuid>9e33512e-e3cb-42ec-bc99-8e77587d0d3f</uuid>
    <short-name>bea/381/9e3</short-name>
    <author>abentley</author>
    <date>Tue, 17 May 2005 13:42:52 +0000</date>
    <content-type>text/plain</content-type>
    <body>Trees created with tla make dotfiles precious by default, so add 
"source ^\.be$" to the root .arch-inventory.

Optionally, only do this if inventory --source doesn't list .be</body>
  </comment>
  <comment>
    <uuid>b76434a3-5cf9-4d2c-820b-64444289c09f</uuid>
    <short-name>bea/381/b76</short-name>
    <in-reply-to>9e33512e-e3cb-42ec-bc99-8e77587d0d3f</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 13:46:32 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed with Arch._adjust_naming_conventions on a per-tree basis instead.</body>
  </comment>
</bug>
<bug>
  <uuid>ecc91b94-7f3f-44a7-af58-03191d327a7f</uuid>
  <short-name>bea/ecc</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Tue, 17 May 2005 13:27:33 +0000</created>
  <summary>no tests for missing $EDITOR</summary>
</bug>
<bug>
  <uuid>7bfc591e-584a-476e-8e11-b548f1afcaa6</uuid>
  <short-name>bea/7bf</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Tue, 17 May 2005 13:27:18 +0000</created>
  <summary>no tests for --help, -h, help, etc.</summary>
  <comment>
    <uuid>2f6b71c5-45b3-473f-bd14-a1fe41bafcee</uuid>
    <short-name>bea/7bf/2f6</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 24 Nov 2008 13:08:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>Fixed at least by commit 273, probably way before.</body>
  </comment>
  <comment>
    <uuid>5a6b44f5-9d1d-4e2e-a42c-f5423c43a1dc</uuid>
    <short-name>bea/7bf/5a6</short-name>
    <author>abentley</author>
    <date>Wed, 21 Dec 2005 21:53:47 +0000</date>
    <content-type>text/plain</content-type>
    <body>It's hard to report bugs if you can't even get it working.</body>
  </comment>
</bug>
<bug>
  <uuid>4f7a4c3b-31e3-4023-8c9d-e67f627a34f0</uuid>
  <short-name>bea/4f7</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created>Thu, 07 Apr 2005 16:07:51 +0000</created>
  <summary>Automatically set .be as source for arch</summary>
  <comment>
    <uuid>a8f35fca-8a15-4833-b568-326f0cc89bfa</uuid>
    <short-name>bea/4f7/a8f</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 13:44:33 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged into bug 381555eb-f2e3-4ef0-8303-d759c00b390a</body>
  </comment>
</bug>
<bug>
  <uuid>74cccfbf-069d-4e99-8cab-adaa35f9a2eb</uuid>
  <short-name>bea/74c</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Can't close bugs</summary>
</bug>
<bug>
  <uuid>f5c06914-dc64-4658-8ec7-32a026a53f55</uuid>
  <short-name>bea/f5c</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Implement bug tree diff</summary>
  <extra-string>BLOCKS:bd0ebb56-fb46-45bc-af08-1e4a94e8ef3c</extra-string>
</bug>
<bug>
  <uuid>c592a1e8-f2c8-4dfb-8550-955123073947</uuid>
  <short-name>bea/c59</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Needs ability to create comments</summary>
</bug>
<bug>
  <uuid>02223264-e28a-4720-9f20-1e7a27a7041d</uuid>
  <short-name>bea/022</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Needs more test cases</summary>
</bug>
<bug>
  <uuid>3613e6e9-db9e-4775-8914-f31f0b4b81ac</uuid>
  <short-name>bea/361</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>auto-add files to revision control</summary>
</bug>
<bug>
  <uuid>0e0c806c-5443-4839-aa60-9615c8c10853</uuid>
  <short-name>bea/0e0</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>fix up command listings</summary>
</bug>
<bug>
  <uuid>372f8a5c-a1ce-4b07-a7b1-f409033a7eec</uuid>
  <short-name>bea/372</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>implement severity on bug creation</summary>
</bug>
<bug>
  <uuid>ae998b27-a11b-4243-abf6-11841e5b8242</uuid>
  <short-name>bea/ae9</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <creator>abentley</creator>
  <created></created>
  <summary>Customizable severity levels?</summary>
  <comment>
    <uuid>ae0f9aea-960c-42b4-82df-943bbbe17d58</uuid>
    <short-name>bea/ae9/ae0</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:07:25 +0000</date>
    <content-type>text/plain</content-type>
    <body>Per-tree severity and status levels are now supported.</body>
  </comment>
  <comment>
    <uuid>2628eeca-96c6-4933-8484-d55bb1dbf985</uuid>
    <short-name>bea/ae9/262</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:05:49 +0000</date>
    <content-type>text/plain</content-type>
    <body>Merged from bug 4a4609c8-1882-47de-9d30-fee410b8a802</body>
  </comment>
  <comment>
    <uuid>942cd941-583d-4020-99e4-80de7e836129</uuid>
    <short-name>bea/ae9/942</short-name>
    <in-reply-to>2628eeca-96c6-4933-8484-d55bb1dbf985</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 15:42:07 +0000</date>
    <content-type>text/plain</content-type>
    <body>Implemented.</body>
  </comment>
</bug>
<bug>
  <uuid>00f26f04-9202-4288-8744-b29abc2342d6</uuid>
  <short-name>bea/00f</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <assigned>Ben Finney &lt;ben+python@benfinney.id.au&gt;</assigned>
  <creator>benf</creator>
  <created>Fri, 18 Apr 2008 11:18:58 +0000</created>
  <summary>Address is outdated for FSF offices</summary>
  <comment>
    <uuid>4be73baf-e46b-4acb-a58e-4719e57c550b</uuid>
    <short-name>bea/00f/4be</short-name>
    <author>benf</author>
    <date>Fri, 18 Apr 2008 11:21:03 +0000</date>
    <content-type>text/plain</content-type>
    <body>The FSF offices are no longer at Temple Place, and there is a revised
text of the GPLv2 giving the correct address and other textual
clean-ups. 

The COPYING file should be updated to the new GPLv2 text, and the
copyright notices throughout the working tree should be updated for
the new boilerplate how-to-use-the-GPL text. </body>
  </comment>
  <comment>
    <uuid>d5ed4f87-f1a1-4138-b0ad-190e4a49d820</uuid>
    <short-name>bea/00f/d5e</short-name>
    <in-reply-to>4be73baf-e46b-4acb-a58e-4719e57c550b</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 11 Jul 2009 14:08:45 +0000</date>
    <content-type>text/plain</content-type>
    <body>We could add this functionality to update_copyright.sh</body>
  </comment>
</bug>
<bug>
  <uuid>0a234f51-2fdf-4001-a04f-b7e02c2fa47b</uuid>
  <short-name>bea/0a2</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Sat, 31 Jan 2009 03:03:52 +0000</created>
  <summary>Humanize empty result pages.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>3e331b72-51fd-4408-bc0d-b6c5ac3b9f3e</uuid>
  <short-name>bea/3e3</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <assigned>W. Trevor King &lt;wking@drexel.edu&gt;</assigned>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 19:27:04 +0000</created>
  <summary>subscribe/unsubscribe (bug #..., "new bugs", "all", etc.)</summary>
  <comment>
    <uuid>85a2d1ac-200a-4ae7-841f-9f4e87795dbf</uuid>
    <short-name>bea/3e3/85a</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 21 Jul 2009 19:34:20 +0000</date>
    <content-type>text/plain</content-type>
    <body>Obviously via the control interface:
  subscribe #BUG-ID
  subscribe new
  subscribe all
  unsubscribe #BUG-ID
  ...
Implemented via .extra_strings, although we'll need
BugDir.extra_strings for the repo-wide new/all.</body>
  </comment>
    <comment>
      <uuid>f72f8640-2e50-471e-aebe-0ddb8cdd5a2a</uuid>
      <short-name>bea/3e3/f72</short-name>
      <in-reply-to>85a2d1ac-200a-4ae7-841f-9f4e87795dbf</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Wed, 22 Jul 2009 18:54:06 +0000</date>
      <content-type>text/plain</content-type>
      <body>The intereface changed a bit as I implemented it.  See "be help
subscribe" for details.</body>
    </comment>
    <comment>
      <uuid>950ac308-f3e1-4956-885a-e79ce3025fd5</uuid>
      <short-name>bea/3e3/950</short-name>
      <in-reply-to>85a2d1ac-200a-4ae7-841f-9f4e87795dbf</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Tue, 21 Jul 2009 19:34:32 +0000</date>
      <content-type>text/plain</content-type>
      <body>This creates an interesting situation:
  Person P subscribes to bug B in repo R.
  Repo S merges repo R.
  Person Q comments on B in S.
  S notifies P :).
which is nice.  However
  Person P subscribes to bug B in repo R.
  Person Q comments on B in repo S.
  R merges S.
  P never notified about Q's comment.</body>
    </comment>
    <comment>
      <uuid>303986f2-0b17-4589-bf76-ed1461699c3e</uuid>
      <short-name>bea/3e3/303</short-name>
      <in-reply-to>950ac308-f3e1-4956-885a-e79ce3025fd5</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Tue, 21 Jul 2009 19:52:25 +0000</date>
      <content-type>text/plain</content-type>
      <body>Perhaps something like
  be-handle-mail --notify-since &lt;revision-id&gt;
to tell subscribers about changes since the specified revision.

This would duplicate mail to P in our first example above, but that's
not too annoying, and P might _want_ to know what R had merged from Q.

On the other hand it would be annoying if 10 other repos merged Q and
ran the notification.

We could make the subscription something like
  subscribe BUG-ID HOST-LIST
e.g.
  subscribe 1234 bugseverywhere.org,fancy_branch.com
  subscribe abcd *
To allow users to whitelist hosts they want updates from.</body>
    </comment>
  <comment>
    <uuid>478443b3-dd69-4719-b79a-b1279f75b8e4</uuid>
    <short-name>bea/3e3/478</short-name>
    <in-reply-to>85a2d1ac-200a-4ae7-841f-9f4e87795dbf</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 21 Jul 2009 19:53:02 +0000</date>
    <content-type>text/plain</content-type>
    <body>"all" and "new" might be valid shortnames?

Nope, UUID string representations are restricted to hex (0-9a-f) and
"-" as per RFC 4122 section 3.</body>
  </comment>
  <comment>
    <uuid>287d3cc1-1cd0-449a-b280-87c529e33951</uuid>
    <short-name>bea/3e3/287</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 22 Jul 2009 19:07:28 +0000</date>
    <content-type>text/plain</content-type>
    <body>Hmm, perhaps my thinking has been too revision-centric.  I'm not
really sure what other level of granularity is appropriate though.
Both notifications and commits should be generated on a "per-session"
level, so maybe I'll just ignore Arch and Mercurial (for whom revising
history is difficult, so per-session commits can be more work) for the
time being ;).

In that case, _every_ commit will be a
  notify-since &lt;revision-id&gt;
sort of change, so I'll just use libbe.diff :).</body>
  </comment>
</bug>
<bug>
  <uuid>cf77c72d-b099-413a-802e-a8892ac8c26b</uuid>
  <short-name>bea/cf7</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <assigned>abentley</assigned>
  <creator>abentley</creator>
  <created></created>
  <summary>date-stamp bugs</summary>
</bug>
<bug>
  <uuid>301724b1-3853-4aff-8f23-44373df7cf1c</uuid>
  <short-name>bea/301</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <assigned>abentley</assigned>
  <creator>abentley</creator>
  <created></created>
  <summary>Per-tree configuration: default-assigneed?</summary>
  <comment>
    <uuid>0d8af004-8352-4254-b747-d96a40a5d457</uuid>
    <short-name>bea/301/0d8</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 04 Dec 2008 17:40:08 +0000</date>
    <content-type>text/plain</content-type>
    <body>Implemented</body>
  </comment>
</bug>
<bug>
  <uuid>b187fbce-fb10-4819-ace2-c8b0b4a45c57</uuid>
  <short-name>bea/b18</short-name>
  <severity>minor</severity>
  <status>fixed</status>
  <assigned>benf</assigned>
  <creator>benf</creator>
  <created>Mon, 21 Apr 2008 03:21:35 +0000</created>
  <summary>Manual page for 'be' command</summary>
  <comment>
    <uuid>e757d2ae-085a-4539-99be-096386de5352</uuid>
    <short-name>bea/b18/e75</short-name>
    <author>benf</author>
    <date>Mon, 21 Apr 2008 03:24:11 +0000</date>
    <content-type>text/plain</content-type>
    <body>The 'be' command should have a Unix manpage, describing it like any
other command on the system. </body>
  </comment>
</bug>
<bug>
  <uuid>529c290e-b1cf-4800-be7e-68f1ecb9565c</uuid>
  <short-name>bea/529</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 17:19:22 +0000</created>
  <summary>How should we version BE?</summary>
  <comment>
    <uuid>1847f1f8-525a-42c4-ae2b-e9377459d2a6</uuid>
    <alt-id>&lt;87d43gn8ju.fsf_-_@benfinney.id.au&gt;</alt-id>
    <short-name>bea/529/184</short-name>
    <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
    <date>Wed, 18 Nov 2009 13:30:29 +0000</date>
    <content-type>text/plain</content-type>
    <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; On Tue, Nov 17, 2009 at 01:41:26PM -0300, Nicolas Alvarez wrote:
&gt; &gt; I'm using the latest version available on Debian
&gt; &gt; (0.0.193+bzr.r217-2). I should ask for an updated package...
&gt;
[…]

&gt; There is also an outstanding Debian bug for updating the Debian package
&gt;   http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=544515
&gt; so there may be a more current package on the way, but I don't know
&gt; about timeframes for that sort of thing.

It would make it much easier on the Debian package maintainer if the
Bugs Everywhere project would make conventional tarball releases, with
conventional version numbers, with a changelog describing what has
changed between versions.

Trying to maintain a package of a project that is only made available by
undifferentiated VCS revision numbers is a lot more effort, and so
doesn't happen very often.

-- 
 \             “Roll dice!” “Why?” “Shut up! I don't need your fucking |
  `\     *input*, I need you to roll dice!” —Luke Crane, demonstrating |
_o__)                       his refined approach to play testing, 2009 |
Ben Finney</body>
  </comment>
  <comment>
    <uuid>72a519e3-3d6b-4f0f-b412-1310efd255eb</uuid>
    <alt-id>&lt;m3ocn09310.fsf@pullcord.laptop.org&gt;</alt-id>
    <short-name>bea/529/72a</short-name>
    <in-reply-to>1847f1f8-525a-42c4-ae2b-e9377459d2a6</in-reply-to>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Tue, 17 Nov 2009 22:53:31 +0000</date>
    <content-type>text/plain</content-type>
    <body>Hi,

   &gt; It would make it much easier on the Debian package maintainer if
   &gt; the Bugs Everywhere project would make conventional tarball
   &gt; releases, with conventional version numbers, with a changelog
   &gt; describing what has changed between versions.

Fair point.

How do people feel about pushing for a 1.0 release, with Trevor's tree
plus a finished cfbe merge?  Or would we rather wait until afterwards
to try for cfbe?

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;
One Laptop Per Child

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>a4720227-43cf-49aa-8f9f-f49f46e3e809</uuid>
    <alt-id>&lt;20091118011403.GB9503@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/529/a47</short-name>
    <in-reply-to>72a519e3-3d6b-4f0f-b412-1310efd255eb</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Wed, 18 Nov 2009 01:14:03 +0000</date>
    <content-type>text/plain</content-type>
    <body>On Tue, Nov 17, 2009 at 05:53:31PM -0500, Chris Ball wrote:
&gt;   &gt; It would make it much easier on the Debian package maintainer if
&gt;   &gt; the Bugs Everywhere project would make conventional tarball
&gt;   &gt; releases, with conventional version numbers, with a changelog
&gt;   &gt; describing what has changed between versions.
&gt; How do people feel about pushing for a 1.0 release, with Trevor's tree
&gt; plus a finished cfbe merge?  Or would we rather wait until afterwards
&gt; to try for cfbe?

Sounds good to me.  Not that my tree is much ahead of the trunk at the
moment.  We've talked over most of these issues a few times, so I'll
just summarize where I think we stand on the steps needed to make a
release.

** cfbe integration

Postpone until we work out bzr/hg versioning [1]?

** Conventional version number

Set to "1.0.0" using libbe.version._VERSION.

** NEWS file

Depending on our level of masochism, either something starting out
along the lines of [2]
  bzr log --gnu-changelog -n1 -r 200..
(commit 200, or
  aaron.bentley@utoronto.ca-20060411035623-9b8d222282a26ce1
 was the last time anyone touched the NEWS file),
or a much abbreviated entry [3,4], along the lines of my current NEWS
file (changed just a few minutes ago).

** Tag bzr commit

  bzr tag 1.0.0

** Create tarball

From Ben[5]:
  bzr export /tmp/be-1.0.0.tar.gz


References:

[1]
On Thu, Jul 23, 2009 at 05:38:03PM -0400, Steve Losh wrote:
&gt; On Jul 21, 2009, at 9:59 AM, W. Trevor King wrote:
&gt; &gt; Steve's also versioning it with Mercurial.  Will he mind changing to
&gt; &gt; Bazaar?
&gt;
&gt; Yeah, I've tried bazaar but really don't like the interface at all.  If 
&gt; everyone else really wants me to move it over I guess I can though.

[2]
On Tue, Jul 14, 2009 at 11:05:38AM -0400, Chris Ball wrote:
&gt; Actually, there's a `bzr log --gnu-changelog` now, and `bzr help
&gt; log-formats` offers some more styles.  (None of them seem to match
&gt; my preferred style for release announcements exactly, which would
&gt; be `git shortlog`-style.)

[3]
On Thu, Jul 16, 2009 at 07:21:10PM +1000, Ben Finney wrote:
&gt; I actually don't think the commit log needs to be part of the release at
&gt; all. It's of interest only to those who want fine-level detail about
&gt; changes to every file, and for that purpose I think read access to the
&gt; VCS is much better. Packaging a static copy of the commit log as plain
&gt; text seems pointless.
&gt; 
&gt; Rather, we should treat a user-changes level “NEWS” file (or whatever
&gt; name we choose for it) as part of the documentation, and set the
&gt; expectation among the team that it will be updated for each user-visible
&gt; change being worked on, like any other documentation.

[4]
On Tue, Jul 14, 2009 at 11:11:31AM -0400, Chris Ball wrote:
&gt; Hi,
&gt; 
&gt;    &gt; That's not a changelog, that's a commit log of every source-level
&gt;    &gt; commit made. Far too much detail for a changelog of
&gt;    &gt; *user-visible* changes associated with a release.
&gt; 
&gt; I think I agree with both of you. :) It seems like it's both true that
&gt; there's no point in keeping a GNU-style ChangeLog these days, and that
&gt; if we make a release we should write an announce mail that directly
&gt; mentions new user-visible changes as well as attaching the commit log.
&gt; That smaller list of highly user-visible changes could live in NEWS,
&gt; or in the announce mail, or both.

[5]
On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; Even better: ‘bzr export /tmp/foo.tar.gz’ will create a source tarball
&gt; of all the files in the branch's VCS inventory. All we need to do is
&gt; start the practice of tagging a release in the VCS, and export the
&gt; tarball at that time.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
  <comment>
    <uuid>49e0425b-3332-4d0e-b371-300eccd55370</uuid>
    <alt-id>&lt;873a4cmjw5.fsf@benfinney.id.au&gt;</alt-id>
    <short-name>bea/529/49e</short-name>
    <in-reply-to>a4720227-43cf-49aa-8f9f-f49f46e3e809</in-reply-to>
    <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
    <date>Wed, 18 Nov 2009 22:23:06 +0000</date>
    <content-type>text/plain</content-type>
    <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; ** NEWS file

Speaking as the package maintainer, I would like a ‘ChangeLog’ file
separate from a ‘NEWS’ file.

The ‘NEWS’ file would continue to be hand-edited, and would be a
high-level view of user-visible changes in the project each version.
Users could reasonably expect to be interested in this file when
installing a new version. It would also make sense to retire old news
From this file once it becomes sufficiently old, to keep it relevant to
users to read.


The ‘ChangeLog’ would be an automatically-generated changelog of
low-level changes, not for general human consumption but for letting
recipients have a fighting chance at knowing the historical context of a
particular change without access to the VCS. It would probably be best
done as Trevor says:

&gt; Depending on our level of masochism, either something starting out
&gt; along the lines of [2]
&gt;   bzr log --gnu-changelog -n1 -r 200..

That makes it necessary to add the changelog file to the tarball, since
it won't be a file tracked by VCS and therefore won't be exported. Not a
problem::

    $ release_version="1.0.0"
    $ release_name="be-$release_version"
    $ tarball_file=../$release_name.tar.gz
    $ work_dir=$(mktemp -t -d)
    $ export_dir=$work_dir/$release_name
    $ changelog_file=$export_dir/ChangeLog

    $ bzr export $export_dir
    $ bzr log --gnu-changelog -n1 -r ..tag:"$release_version" &gt; $changelog_file
    $ tar -czf $tarball_file $export_dir
    $ rm -r $work_dir/

    $ ls $tarball_file
    ../be-1.0.0.tar.gz
    $ tar -tzf $tarball_file | grep ChangeLog
    be-1.0.0/ChangeLog

-- 
 \        “I bought a dog the other day. I named him Stay. It's fun to |
  `\     call him. ‘Come here, Stay! Come here, Stay!’ He went insane. |
_o__)         Now he just ignores me and keeps typing.” —Steven Wright |
Ben Finney</body>
  </comment>
  <comment>
    <uuid>96abea83-9867-4c21-8eb8-9e1b1093cba4</uuid>
    <alt-id>&lt;20091120132219.GA17577@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/529/96a</short-name>
    <in-reply-to>49e0425b-3332-4d0e-b371-300eccd55370</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 20 Nov 2009 13:22:19 +0000</date>
    <content-type>text/plain</content-type>
    <body>I've written up a little release script that bundles all the steps
we've mentioned so far into a single command.  Of course, we'll still
have to keep NEWS up to date on our own.

The output prints a trace of what's going on:

  $ ./release.py 1.0.0
  set libbe.version._VERSION = '1.0.0'
  updating AUTHORS
  updating ./becommands/assign.py
  updating ./becommands/html.py
  ...
  commit current status: Bumped to version 1.0.0
  tag current revision 1.0.0
  export current revision to be-1.0.0
  generate libbe/_version.py
  copy libbe/_version.py to be-1.0.0/libbe/_version.py
  generate ChangeLog file be-1.0.0/ChangeLog up to tag 1.0.0
  set vcs_name in be-1.0.0/.be/settings to None
  create tarball be-1.0.0.tar.gz
  remove be-1.0.0

Since we'll be distributing a non-bzr-repo version, it would be nice
to adapt our 'submit bug' procedure (outlined on the main page) to one
that works with this setup.  Without guaranteed versioning, that would
probably be something along the lines of
  be email-bugs [--to be-devel@bugseverywhere.org] BUG-ID ...
With interfaces/email/interactive listening on the recieving end to
grab new-bug emails and import them into an incoming bug repository.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
  <comment>
    <uuid>f92c6180-0ed8-4acc-8ced-22995a0c016b</uuid>
    <short-name>bea/529/f92c</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 20 Nov 2009 21:45:50 +0000</date>
    <content-type>text/plain</content-type>
    <body>Verdict: run releases.py periodically, and post the tarballs on the
web.</body>
  </comment>
  <comment>
    <uuid>cdf15bdd-d3fe-4251-9d0b-f1b687e9a26c</uuid>
    <alt-id>&lt;20090714110543.GB4855@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/529/cdf</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Tue, 14 Jul 2009 07:05:43 -0400</date>
    <content-type>text/plain</content-type>
    <body>Currently setup.py sets the version number for BE to 0.0.193 and the
url to http://panoramicfeedback.com/opensource/.  These are both a bit
outdated ;).  I've switched my branch over to the current url, and
moved to last-commit-timestamp version numbers.  This removes the
"prefered branch" issues with the old scheme, and version numbers
should increase monotonically, but it looses any stability information
suggested by the preceding 0.0.

We can add those back in if people want.  Does the first 0 mean
"interfaces in flux" and the second 0 mean "lots of bugs"?  If so, I
think we're up to 0.1, since the major features are pretty calm.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
    <comment>
      <uuid>2bb7b4d0-6290-4771-9fff-4aa2e8086b1a</uuid>
      <alt-id>&lt;87hbxdhtkp.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/529/2bb</short-name>
      <in-reply-to>cdf15bdd-d3fe-4251-9d0b-f1b687e9a26c</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Thu, 16 Jul 2009 19:21:10 +1000</date>
      <content-type>text/plain</content-type>
      <body>Chris Ball &lt;cjb@laptop.org&gt; writes:

&gt; Hi,
&gt; 
&gt;    &gt; That's not a changelog, that's a commit log of every source-level
&gt;    &gt; commit made. Far too much detail for a changelog of
&gt;    &gt; *user-visible* changes associated with a release.
&gt; 
&gt; I think I agree with both of you. :) It seems like it's both true that
&gt; there's no point in keeping a GNU-style ChangeLog these days

I think I have a better understanding of why this apparent disagreement
occurred, and it was due to my sloppy use of terms.

Looking into it further, it seems there is a certain expectation (set,
in part, by the long-standing GNU coding conventions) that a “GNU-style
ChangeLog” contains not only a particular *format*, but information at
a particular level of *detail*.

That is, a GNU ChangeLog is intended for the style of work where one
logs all the changes made to every file in the tree each working day,
and then makes a new day's entry above that, and so on. This is, of
course, entirely redundant with a VCS revision history, which makes all
the commit messages available on request.

So to disambiguate, that's not what I meant. I'm more familiar with a
less-frequently-updated and less-fine-detail change log; perhaps more
akin to the GNU-style “NEWS” file.

&gt; and that if we make a release we should write an announce mail that
&gt; directly mentions new user-visible changes as well as attaching the
&gt; commit log. That smaller list of highly user-visible changes could
&gt; live in NEWS, or in the announce mail, or both.

Yes, that's mostly what I meant.

I actually don't think the commit log needs to be part of the release at
all. It's of interest only to those who want fine-level detail about
changes to every file, and for that purpose I think read access to the
VCS is much better. Packaging a static copy of the commit log as plain
text seems pointless.

Rather, we should treat a user-changes level “NEWS” file (or whatever
name we choose for it) as part of the documentation, and set the
expectation among the team that it will be updated for each user-visible
change being worked on, like any other documentation.

-- 
 \            “… Nature … is seen to do all things Herself and through |
  `\         herself of own accord, rid of all gods.” —Titus Lucretius |
_o__)                                                 Carus, c. 40 BCE |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>fdb615a4-168a-467b-8090-875c998455e5</uuid>
      <alt-id>&lt;87d481ht1s.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/529/fdb</short-name>
      <in-reply-to>cdf15bdd-d3fe-4251-9d0b-f1b687e9a26c</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Thu, 16 Jul 2009 19:32:31 +1000</date>
      <content-type>text/plain</content-type>
      <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; &gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; Please, no. Timestamps aren't version strings, that's conflating
&gt; &gt; &gt; &gt; two pieces of information with very different meanings.
&gt; &gt; &gt; &gt; Correlating the two is the job of a [NEWS file].
&gt;
&gt; &gt; If you want a monotonically-increasing indicator of which revision
&gt; &gt; we're up to, that's immediately available with the revision number
&gt; &gt; from VCS on the main branch. That also has the advantage of
&gt; &gt; producing consecutive numbers for each revision, by definition.
&gt; 
&gt; But not during branch-switches, while my method skips large regions,
&gt; but probably increases during any reasonable branch-switch.

I've read this several times now, and I don't see what it's saying.

The assumption I'm making is that there is a single canonical “main
branch”, from which releases will be made. The version number set in
that branch is the one which determines the version of Bugs Everywhere
as a whole.

The revision number is only useful in the context of the branch, so it
only matters when comparing versions within a branch. When you switch
between branches, if you're interested in the revision number you'll
still need to know which branch you're talking about.

Switching between branches doesn't change the canonical version string.

&gt; For example, when I upgraded to rich root to pull Ben's patch, I'm not
&gt; sure if Chris upgraded the trunk and merged my branch, or just ditched
&gt; the trunk and cloned my branch. Using actual bzr revision numbers
&gt; would make switching branches that either wrong (in the case of rev-id
&gt; decreases) or confusing (in the case of a single non-consecutive
&gt; increase).

This, then, is an argument for not having the revision number in the
version string at all. The version then becomes a more traditional
“major.minor.patch” tuple, and is only ever updated when some release
manager of the canonical branch decides it's correct to do so.

If we use the ‘bzr version-info --format=python &gt; foo_version.py’
command in some build routine, the branch's revision number will be
available directly within Python by importing that module. That would
allow it to be output in some UI, if that's what you're interested in
seeing.

-- 
 \     “Never do anything against conscience even if the state demands |
  `\                                             it.” —Albert Einstein |
_o__)                                                                  |
Ben Finney</body>
    </comment>
    <comment>
      <uuid>f925e56f-26f9-4620-82fb-a0f160f27921</uuid>
      <alt-id>&lt;20090716103855.GA8579@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/529/f925</short-name>
      <in-reply-to>fdb615a4-168a-467b-8090-875c998455e5</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Thu, 16 Jul 2009 06:38:55 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Thu, Jul 16, 2009 at 07:32:31PM +1000, Ben Finney wrote:
&gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; 
&gt; &gt; On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; &gt; &gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; &gt; 
&gt; &gt; &gt; &gt; On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; &gt; Please, no. Timestamps aren't version strings, that's conflating
&gt; &gt; &gt; &gt; &gt; two pieces of information with very different meanings.
&gt; &gt; &gt; &gt; &gt; Correlating the two is the job of a [NEWS file].
&gt; &gt;
&gt; &gt; &gt; If you want a monotonically-increasing indicator of which revision
&gt; &gt; &gt; we're up to, that's immediately available with the revision number
&gt; &gt; &gt; from VCS on the main branch. That also has the advantage of
&gt; &gt; &gt; producing consecutive numbers for each revision, by definition.
&gt; &gt; 
&gt; &gt; But not during branch-switches, while my method skips large regions,
&gt; &gt; but probably increases during any reasonable branch-switch.
&gt; 
&gt; I've read this several times now, and I don't see what it's saying.
&gt; 
&gt; The assumption I'm making is that there is a single canonical “main
&gt; branch”, from which releases will be made.

I don't think you need to assume this.  See my "virtual branch"
argument below.

&gt; The version number set in that branch is the one which determines
&gt; the version of Bugs Everywhere as a whole.

If you are suggesting that the dev branches adjust their release
number _by_hand_ to match the current trunk release number, that
allows switching, but sounds like a lot of work and isn't correct
anyway, since they are not in the same state as the trunk.

&gt; The revision number is only useful in the context of the branch, so it
&gt; only matters when comparing versions within a branch. When you switch
&gt; between branches, if you're interested in the revision number you'll
&gt; still need to know which branch you're talking about.

I think this is our main disagreement.  I see all the branches as part
of the same codebase, with monotonically increasing timestamp patch
numbers.  If you were to collapse all the commit snapshots down into a
single chronological "virtual branch", it would still make sense, it
would just be a bit unorganized.  We do all try to move in the same
general direction ;).

&gt; Switching between branches doesn't change the canonical version string.

Different released code should have different version numbers.

&gt; &gt; For example, when I upgraded to rich root to pull Ben's patch, I'm not
&gt; &gt; sure if Chris upgraded the trunk and merged my branch, or just ditched
&gt; &gt; the trunk and cloned my branch. Using actual bzr revision numbers
&gt; &gt; would make switching branches that either wrong (in the case of rev-id
&gt; &gt; decreases) or confusing (in the case of a single non-consecutive
&gt; &gt; increase).
&gt; 
&gt; This, then, is an argument for not having the revision number in the
&gt; version string at all. The version then becomes a more traditional
&gt; “major.minor.patch” tuple, and is only ever updated when some release
&gt; manager of the canonical branch decides it's correct to do so.

It is an argument for not using the revision number.  You can avoid
revision numbers by using hand-coded patch numbers, or by using
timestamps, which is what we're trying to decide on :p.

&gt; If we use the ‘bzr version-info --format=python &gt; foo_version.py’
&gt; command in some build routine, the branch's revision number will be
&gt; available directly within Python by importing that module. That would
&gt; allow it to be output in some UI, if that's what you're interested in
&gt; seeing.

True.  Which means that whichever version string wins out, the other
side will still be able to access the info we both want included ;).
We can certainly suggest that bug reporters submit their
  be --verbose-version
when they submit bugs.  The only role of the official "version string"
is to make life easy for packagers.  If they woln't be switching
branches, then either of our proposals are fine.  If they will, then
I think timestamps work better.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
    <comment>
      <uuid>c35835c0-8f9f-4090-ba92-1f616867e486</uuid>
      <alt-id>&lt;200907172337.49779.gian@grys.it&gt;</alt-id>
      <short-name>bea/529/c35</short-name>
      <in-reply-to>f925e56f-26f9-4620-82fb-a0f160f27921</in-reply-to>
      <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
      <date>Fri, 17 Jul 2009 23:37:49 +0200</date>
      <content-type>text/plain</content-type>
      <body>On Thursday 16 July 2009 12:38:55 W. Trevor King wrote:
&gt; On Thu, Jul 16, 2009 at 07:32:31PM +1000, Ben Finney wrote:
&gt; &gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; &gt; On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; &gt; &gt; &gt; On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; &gt; &gt; Please, no. Timestamps aren't version strings, that's conflating
&gt; &gt; &gt; &gt; &gt; &gt; two pieces of information with very different meanings.
&gt; &gt; &gt; &gt; &gt; &gt; Correlating the two is the job of a [NEWS file].
&gt; &gt; &gt; &gt;
&gt; &gt; &gt; &gt; If you want a monotonically-increasing indicator of which revision
&gt; &gt; &gt; &gt; we're up to, that's immediately available with the revision number
&gt; &gt; &gt; &gt; from VCS on the main branch. That also has the advantage of
&gt; &gt; &gt; &gt; producing consecutive numbers for each revision, by definition.
&gt; &gt; &gt;
&gt; &gt; &gt; But not during branch-switches, while my method skips large regions,
&gt; &gt; &gt; but probably increases during any reasonable branch-switch.
&gt; &gt;
&gt; &gt; I've read this several times now, and I don't see what it's saying.
&gt; &gt;
&gt; &gt; The assumption I'm making is that there is a single canonical “main
&gt; &gt; branch”, from which releases will be made.
&gt;
&gt; I don't think you need to assume this.  See my "virtual branch"
&gt; argument below.

But if we have a canonical "main branch" that  we release, and the packager 
get, we can refer to it as the stable branch, that it is not a bad idea.



&gt; &gt; The version number set in that branch is the one which determines
&gt; &gt; the version of Bugs Everywhere as a whole.
&gt;
&gt; If you are suggesting that the dev branches adjust their release
&gt; number _by_hand_ to match the current trunk release number, that
&gt; allows switching, but sounds like a lot of work and isn't correct
&gt; anyway, since they are not in the same state as the trunk.

The version number of trunk _is_ should be the official version number of the 
Bugs Everywhere releases. 
The version number in branch does not means nothing outside the branch.
At least we can have a mechanism to build a version number scheme that is 
consistent for us to be able to merge branch easily.

&gt; &gt; The revision number is only useful in the context of the branch, so it
&gt; &gt; only matters when comparing versions within a branch. When you switch
&gt; &gt; between branches, if you're interested in the revision number you'll
&gt; &gt; still need to know which branch you're talking about.
&gt;
&gt; I think this is our main disagreement.  I see all the branches as part
&gt; of the same codebase, with monotonically increasing timestamp patch
&gt; numbers.  If you were to collapse all the commit snapshots down into a
&gt; single chronological "virtual branch", it would still make sense, it
&gt; would just be a bit unorganized.  We do all try to move in the same
&gt; general direction ;).

I don't think that, outside the developers, a version number like

cjb@laptop.org-20090713154540-ve4pmydqzb1ghgvc

is a good choice, not for the user of BE, not for the packager of BE


&gt; &gt; This, then, is an argument for not having the revision number in the
&gt; &gt; version string at all. The version then becomes a more traditional
&gt; &gt; “major.minor.patch” tuple, and is only ever updated when some release
&gt; &gt; manager of the canonical branch decides it's correct to do so.
&gt;
&gt; It is an argument for not using the revision number.  You can avoid
&gt; revision numbers by using hand-coded patch numbers, or by using
&gt; timestamps, which is what we're trying to decide on :p.

We can use both.
During the development we can use version number like

x.y.z.timestamp

As we decide to release a stable version, the release manager set the version 
number to a more traditional x.y.z format, and create a branch (stable branch)

This way we have these advantages:

1) an user have a simple version number to use for bug report/feature 
request/help request

2) a packager have an easy life to choose to package a stable or a trunk 
version, knowing what are they doing

bonus) we can maintain a stable and a developmente source tree/branch, where 
in the development tree we can make also backward incompatible modification to 
the source without making any damage to the users/packagers, while in the 
stable branch we can make only bugfix/security fix or port from the devel branch 
some interesting features as long as they don't break compatibility.

bye
Gianluca

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>a845096e-3cdf-41ed-a0e3-283439665b92</uuid>
      <alt-id>&lt;20090718105008.GA31639@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/529/a84</short-name>
      <in-reply-to>c35835c0-8f9f-4090-ba92-1f616867e486</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sat, 18 Jul 2009 06:50:08 -0400</date>
      <content-type>text/plain</content-type>
      <body>I don't think anyone's changing their mind ;), so tallying the
comments so far:

On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; I still disagree that a timestamp is the right thing to use there. If
&gt; you want a monotonically-increasing indicator of which revision we're up
&gt; to, that's immediately available with the revision number from VCS on
&gt; the main branch. That also has the advantage of producing consecutive
&gt; numbers for each revision, by definition.

+1 for trunk version number.

On Tue, Jul 14, 2009 at 05:27:52PM +0200, Elena of Valhalla wrote:
&gt; I also have a weak preference for version numbers, as long as they
&gt; give useful informations on the state the release.

+1 for trunk version number.

On Tue, Jul 14, 2009 at 02:29:10PM -0400, Aaron Bentley wrote:
&gt; We don't do that.  We have official releases every 4 weeks, but we do
&gt; believe that running bzr.dev is pretty safe, because it's always tested
&gt; and our test suite is quite thorough.

+1 for by hand version bumps.

On Fri, Jul 17, 2009 at 11:37:49PM +0200, Gianluca Montecchi wrote:
&gt; The version number of trunk _is_ should be the official version number of the 
&gt; Bugs Everywhere releases. 
&gt; The version number in branch does not means nothing outside the branch.
&gt; At least we can have a mechanism to build a version number scheme that is 
&gt; consistent for us to be able to merge branch easily.

+1 for trunk version number.

And me with my timestamps ;).

Sounds like we should go with trunk version number, but that it should
be set by hand whenever Chris decides to release something, since the
rest of us don't know what version the trunk is on.  Unless we do
something like:
  bzr log -n 0 | grep -B2 'nick: be$' | head -n1 | sed 's/ *revno: \([0-9]*\).*/\1/'
to extract the last trunk commit referenced from our branch.

Implementation preferences? (i.e. Chris vs. regexp matching :p)

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
    <comment>
      <uuid>744435b7-1521-4059-a55d-f0c403d7b4d8</uuid>
      <alt-id>&lt;87ocrnjvat.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/529/744</short-name>
      <in-reply-to>cdf15bdd-d3fe-4251-9d0b-f1b687e9a26c</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Tue, 14 Jul 2009 22:36:26 +1000</date>
      <content-type>text/plain</content-type>
      <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; Currently setup.py sets the version number for BE to 0.0.193 and the
&gt; url to http://panoramicfeedback.com/opensource/. These are both a bit
&gt; outdated ;).

Right, that should change.

&gt; I've switched my branch over to the current url, and moved to
&gt; last-commit-timestamp version numbers.

Please, no. Timestamps aren't version strings, that's conflating two
pieces of information with very different meanings. Correlating the two
is the job of a changelog.

&gt; This removes the "prefered branch" issues with the old scheme, and
&gt; version numbers should increase monotonically

The English word “should” is ambiguous in this context. Are you saying
this is desirable, or are you predicting that it will likely be the
case?

I don't see how it's either, so am doubly confused :-)

&gt; but it looses any stability information suggested by the preceding
&gt; 0.0.

The convention for three-part version strings is often:

  * Major release number (big changes in how the program works,
    increasing monotonically per major release, with “0”indicating no
    major release yet)

  * Minor release number (smaller impact on how the program works,
    increasing monotonically per minor release, with “0” indicating no
    minor release yet since the previous major)

  * Patch release number (bug-fix and other changes that don't affect
    the documented interface, increasing monotonically per patch
    release, with “0” indicating no patch release since the previous
    major or minor)

Obviously there's no standard or enforcement for this, but that's the
interpretation I usually give to dotted version strings in the absence
of more formal declaration specific to the project.

&gt; We can add those back in if people want. Does the first 0 mean
&gt; "interfaces in flux" and the second 0 mean "lots of bugs"? If so, I
&gt; think we're up to 0.1, since the major features are pretty calm.

I disagree with your interpretation and prefer mine, above; on that
basis, I agree that we're at least up to version 0.1 by now :-)

-- 
 \         “A lot of water has been passed under the bridge since this |
  `\                    variation has been played.” chess book, Russia |
_o__)                                                                  |
Ben Finney</body>
    </comment>
    <comment>
      <uuid>ea01c122-e629-4d5c-afa7-b180f4a8748b</uuid>
      <alt-id>&lt;20090714133732.GB6160@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/529/ea0</short-name>
      <in-reply-to>744435b7-1521-4059-a55d-f0c403d7b4d8</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Tue, 14 Jul 2009 09:37:32 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; I've switched my branch over to the current url, and moved to
&gt; &gt; last-commit-timestamp version numbers.
&gt; 
&gt; Please, no. Timestamps aren't version strings, that's conflating two
&gt; pieces of information with very different meanings. Correlating the two
&gt; is the job of a changelog.

Which we don't bother keeping (also NEWS), since "bzr log" works so nicely.
If you really want an standard changelog, see
  http://mail.gnome.org/archives/desktop-devel-list/2007-September/msg00186.html

&gt; &gt; This removes the "prefered branch" issues with the old scheme, and
&gt; &gt; version numbers should increase monotonically
&gt; 
&gt; The English word “should” is ambiguous in this context. Are you saying
&gt; this is desirable, or are you predicting that it will likely be the
&gt; case?

Both.

&gt; I don't see how it's either, so am doubly confused :-)

The timestamp should at least replace the patch release number, which
you agree is-desirable-to increase motonically ;).  I also predict
that it will increase monotonically for any given branch, since the
branch HEAD will have both the most recent commit and the highest
version number.  The only problem I can think of is having your clock
_way_ off, and that is unlikely enough to ignore.  If you hop between
branches, the timestamp is much more likely to increase going to the
more modern branch than the bzr revision number, which desynchronize
between branches fairly quickly.

&gt; The convention for three-part version strings is often:
&gt; 
&gt;   * Major release number (big changes in how the program works,
&gt;     increasing monotonically per major release, with “0”indicating no
&gt;     major release yet)
&gt; 
&gt;   * Minor release number (smaller impact on how the program works,
&gt;     increasing monotonically per minor release, with “0” indicating no
&gt;     minor release yet since the previous major)
&gt; 
&gt;   * Patch release number (bug-fix and other changes that don't affect
&gt;     the documented interface, increasing monotonically per patch
&gt;     release, with “0” indicating no patch release since the previous
&gt;     major or minor)

One problem is that we don't actually have "releases".  People just
clone a branch, install, and go.  If you're worried about stability,
just clone from a more stable branch (i.e., Chris' trunk).  I think
this is good for distributed development, but maybe makes it hard to
package into a conventional release-based system.  With the bzr patch
number in setup.py as the patch release number, I would be releasing
my 0.1.363 while Chris releases his 0.1.314, even though they're at
about the same point.  I would rather be releasing my
  0.1.20090714121347
while Chris releases his
  0.1.20090713154540
Since then the similarity is clearer.

At any rate, I think the two approaches are close enough that an
auto-updating timestamp beats a manually bumped patch number, since
no-one ever actually bumps the patch number ;).

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
      <comment>
        <uuid>0c40c13a-3515-4b45-a8c3-142cceab9254</uuid>
        <alt-id>&lt;20090714142942.GA5717@ukfsn.org&gt;</alt-id>
        <short-name>bea/529/0c4</short-name>
        <in-reply-to>ea01c122-e629-4d5c-afa7-b180f4a8748b</in-reply-to>
        <author>James Rowe &lt;jnrowe@gmail.com&gt;</author>
        <date>Tue, 14 Jul 2009 15:29:42 +0100</date>
        <content-type>text/plain</content-type>
        <body>* W. Trevor King (wking@drexel.edu) wrote:
&gt; One problem is that we don't actually have "releases".  People just
&gt; clone a branch, install, and go.

  This is actually the main reason I've manually mirrored the tree in
the past, so that users of our projects can get BE.  If tarballs were
available I probably wouldn't even bother, but bzr really isn't a nice
dependency for just submitting/commenting on bugs.

  Isn't there a bzr web interface that at least supports creating
tarballs/zips?  It is pretty standard functionality for most other VCS'
web interfaces so I'm guessing there must be, but loggerhead seems not
to support it.

  If it is a case of not having the hardware to host a more featureful
web UI I may be able to offer some assistance.

&gt; If you're worried about stability, just clone from a more stable branch
&gt; (i.e., Chris' trunk).  I think &gt; this is good for distributed development,
&gt; but maybe makes it hard to package into a conventional release-based system.
&gt; With the bzr patch number in setup.py as the patch release number, I would be
&gt; releasing my 0.1.363 while Chris releases his 0.1.314, even though they're at
&gt; about the same point.  I would rather be releasing my
&gt;   0.1.20090714121347
&gt; while Chris releases his
&gt;   0.1.20090713154540
&gt; Since then the similarity is clearer.

  Both approaches seem pretty odd to me, as a user you would have no
idea if 0.1.200910302359 has the fixes you required in a release you
were using that was numbered 0.1.200907141554.  Surely you'd at least be
{pre,suf}fixing a branch name to the version.

Thanks,

James</body>
      </comment>
      <comment>
        <uuid>1f40efc1-6efc-4dd8-bdd2-97907e5aa624</uuid>
        <alt-id>&lt;20090714171725.GB10445@mjolnir.home.net&gt;</alt-id>
        <short-name>bea/529/1f4</short-name>
        <in-reply-to>0c40c13a-3515-4b45-a8c3-142cceab9254</in-reply-to>
        <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
        <date>Tue, 14 Jul 2009 13:17:25 -0400</date>
        <content-type>text/plain</content-type>
        <body>On Tue, Jul 14, 2009 at 03:29:42PM +0100, James Rowe wrote:
&gt; * W. Trevor King (wking@drexel.edu) wrote:
&gt; &gt; One problem is that we don't actually have "releases".  People just
&gt; &gt; clone a branch, install, and go.
&gt; 
&gt;   This is actually the main reason I've manually mirrored the tree in
&gt; the past, so that users of our projects can get BE.  If tarballs were
&gt; available I probably wouldn't even bother, but bzr really isn't a nice
&gt; dependency for just submitting/commenting on bugs.

Fair enough.  It will be good when we get a commit-able web interface
and/or email interface going.

&gt;   Isn't there a bzr web interface that at least supports creating
&gt; tarballs/zips?  It is pretty standard functionality for most other VCS'
&gt; web interfaces so I'm guessing there must be, but loggerhead seems not
&gt; to support it.

Unfortunately, people would still need bzr to install the versioned source:

  libbe/_version.py:
          bzr version-info --format python &gt; $@

So you'll need a "release" target in the makefile to build a bzr-less
install.  While you're at it, you should probably compile the manpage
too to remove the docbook-to-man dependency.

Do people want a HEAD tarball too?  There must be a bzr equivalent of
  .git/hooks/post-update
but I don't know what it is.

&gt; &gt; If you're worried about stability, just clone from a more stable branch
&gt; &gt; (i.e., Chris' trunk).  I think &gt; this is good for distributed development,
&gt; &gt; but maybe makes it hard to package into a conventional release-based system.
&gt; &gt; With the bzr patch number in setup.py as the patch release number, I would be
&gt; &gt; releasing my 0.1.363 while Chris releases his 0.1.314, even though they're at
&gt; &gt; about the same point.  I would rather be releasing my
&gt; &gt;   0.1.20090714121347
&gt; &gt; while Chris releases his
&gt; &gt;   0.1.20090713154540
&gt; &gt; Since then the similarity is clearer.
&gt; 
&gt;   Both approaches seem pretty odd to me, as a user you would have no
&gt; idea if 0.1.200910302359 has the fixes you required in a release you
&gt; were using that was numbered 0.1.200907141554.  Surely you'd at least be
&gt; {pre,suf}fixing a branch name to the version.

"be --version" currently gives you the revision id:
  wking@drexel.edu-20090714121347-c6rloikst1t3m5yl
which tells you exactly which commit your installed version is based on.
If we want stick with revision numbers, how about:
  major.minor.revno-branch_nick
But then we'd have to pick "unique" branch nicknames...

I'd sliced out the timestamp portion of the revision id so that the
"patch-number" would be an integer and the branch name wasn't
references, so that "upgrading" from one branch to another could be
transparent to the users (who just see an increading timestamp), but
still available to the developers (who know when commits were made to
the branches they track, and the likelyhood of to-the-second commit
collisions in official packages is small).

On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; 
&gt; &gt; On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; &gt; &gt; Please, no. Timestamps aren't version strings, that's conflating two
&gt; &gt; &gt; pieces of information with very different meanings. Correlating the
&gt; &gt; &gt; two is the job of a changelog.
&gt; &gt; 
&gt; &gt; Which we don't bother keeping (also NEWS), since "bzr log" works so
&gt; &gt; nicely.
&gt; 
&gt; That's not a changelog, that's a commit log of every source-level commit
&gt; made. Far too much detail for a changelog of *user-visible* changes
&gt; associated with a release.

I need a user around to help me determine "user-visable" changes ;).
My labmates loose interest after be init/new/comment :p.  None of
which has ever changed, other than set-root -&gt; init ;).

&gt; &gt; The timestamp should at least replace the patch release number, which
&gt; &gt; you agree is-desirable-to increase motonically ;).
&gt; 
&gt; I still disagree that a timestamp is the right thing to use there. If
&gt; you want a monotonically-increasing indicator of which revision we're up
&gt; to, that's immediately available with the revision number from VCS on
&gt; the main branch. That also has the advantage of producing consecutive
&gt; numbers for each revision, by definition.

But not during branch-switches, while my method skips large regions,
but probably increases during any reasonable branch-switch.  For
example, when I upgraded to rich root to pull Ben's patch, I'm not
sure if Chris upgraded the trunk and merged my branch, or just ditched
the trunk and cloned my branch.  Using actual bzr revision numbers
would make switching branches that either wrong (in the case of
rev-id decreases) or confusing (in the case of a single
non-consecutive increase).

On Tue, Jul 14, 2009 at 11:11:31AM -0400, Chris Ball wrote:
&gt;    &gt; I agree that's a problem. I think the solution is to start making
&gt;    &gt; releases, with specific version strings, as source tarballs.
&gt; 
&gt; I'm happy to do this if people think it would be useful, and I don't
&gt; yet have a strong opinion on whether the releases should come with
&gt; version numbers or timestamps.

I imagine the news from 2006 to now will be somewhat abridged ;).

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
      </comment>
        <comment>
          <uuid>ae4f8f1e-6f86-4f81-ba9f-4042deb2ee68</uuid>
          <alt-id>&lt;20090714182034.GA10606@mjolnir.home.net&gt;</alt-id>
          <short-name>bea/529/ae4</short-name>
          <in-reply-to>1f40efc1-6efc-4dd8-bdd2-97907e5aa624</in-reply-to>
          <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
          <date>Tue, 14 Jul 2009 14:20:34 -0400</date>
          <content-type>text/plain</content-type>
          <body>On Tue, Jul 14, 2009 at 01:17:25PM -0400, W. Trevor King wrote:
&gt; On Wed, Jul 15, 2009 at 12:54:05AM +1000, Ben Finney wrote:
&gt; &gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; 
&gt; &gt; &gt; On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; Please, no. Timestamps aren't version strings, that's conflating two
&gt; &gt; &gt; &gt; pieces of information with very different meanings. Correlating the
&gt; &gt; &gt; &gt; two is the job of a changelog.
&gt; &gt; &gt; 
&gt; &gt; &gt; Which we don't bother keeping (also NEWS), since "bzr log" works so
&gt; &gt; &gt; nicely.
&gt; &gt; 
&gt; &gt; That's not a changelog, that's a commit log of every source-level commit
&gt; &gt; made. Far too much detail for a changelog of *user-visible* changes
&gt; &gt; associated with a release.
&gt; 
&gt; I need a user around to help me determine "user-visable" changes ;).
&gt; My labmates loose interest after be init/new/comment :p.  None of
&gt; which has ever changed, other than set-root -&gt; init ;).

Thinking about this some more, I think that the role of the
main-branch is to officially sanction the current state of the code as
"released".  If a series of commits will leave a branch in a
known-unusable form, they should be carried out in some appropriately
named development branch.  Then the log of commits to the main branch
("bzr log -n 1" for bzr &gt; ) should produce a fairly respectable
changelog.  Obviously we are all quite guilty of doing most of our
development in single branches, but it may be a useful model going
forward.  This also means that _every_commit_ to a main branch would
be an official release.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
        </comment>
        <comment>
          <uuid>2c95ee07-462d-42cf-8dc3-8f5389a392cb</uuid>
          <alt-id>&lt;4A5CCE76.9040106@aaronbentley.com&gt;</alt-id>
          <short-name>bea/529/2c9</short-name>
          <in-reply-to>ae4f8f1e-6f86-4f81-ba9f-4042deb2ee68</in-reply-to>
          <author>Aaron Bentley &lt;aaron@aaronbentley.com&gt;</author>
          <date>Tue, 14 Jul 2009 14:29:10 -0400</date>
          <content-type>text/plain</content-type>
          <body>-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

W. Trevor King wrote:
&gt; Thinking about this some more, I think that the role of the
&gt; main-branch is to officially sanction the current state of the code as
&gt; "released".  If a series of commits will leave a branch in a
&gt; known-unusable form, they should be carried out in some appropriately
&gt; named development branch.  Then the log of commits to the main branch
&gt; ("bzr log -n 1" for bzr &gt; ) should produce a fairly respectable
&gt; changelog.

This is how we develop bzr itself.  The mainline is controlled by PQM,
which is a tool that merges feature branches, runs the tests, and
commits only if the tests pass.

$ bzr log --short --limit 10
 4534 Canonical.com Patch Queue Manager	2009-07-14 [merge]
      (abentley) Implement merge --interactive

 4533 Canonical.com Patch Queue Manager	2009-07-14 [merge]
      (jml) Merge in changes from 1.17 branch.

 4532 Canonical.com Patch Queue Manager	2009-07-14 [merge]
      (igc) zc.buildout Windows build support (Sidnei da Silva)

 4531 Canonical.com Patch Queue Manager	2009-07-13 [merge]
      (vila) Delete forgotten debug print

 4530 Canonical.com Patch Queue Manager	2009-07-13 [merge]
      (vila) Isolate some tests from TZ

 4529 Canonical.com Patch Queue Manager	2009-07-13 [merge]
      (igc) Bazaar 2.0 Upgrade Guide

 4528 Canonical.com Patch Queue Manager	2009-07-13 [merge]
      (mbp) correction to news

 4527 Canonical.com Patch Queue Manager	2009-07-13 [merge]
      (jml) Merge in 1.17 branch, updating version numbers and NEWS file.

 4526 Canonical.com Patch Queue Manager	2009-07-10 [merge]
      (mbp, vila) Finish the *_implementation to per_* test renaming

 4525 Canonical.com Patch Queue Manager	2009-07-10 [merge]
      (vila) Quicker check for changes in mutable trees

You can also see all the merges as they come into the mainline:

$ bzr log --short --limit 10 --include-merges
 4534 Canonical.com Patch Queue Manager	2009-07-14 [merge]
      (abentley) Implement merge --interactive

      4526.6.15 Aaron Bentley	2009-07-14
                Update command help

      4526.6.14 Aaron Bentley	2009-07-14
                Use default DiffWriter.

      4526.6.13 Aaron Bentley	2009-07-14
                Add docstring to do_interactive.

      4526.6.12 Aaron Bentley	2009-07-14
                Updates from review.

      4526.6.11 Aaron Bentley	2009-07-13
                Update NEWS.

      4526.6.10 Aaron Bentley	2009-07-13 [merge]
                Merged apply-vocab into merge-interactive.

           4526.7.4 Aaron Bentley	2009-07-13 [merge]
                    Merged bzr.dev into apply-vocab.

       4526.6.9 Aaron Bentley	2009-07-13 [merge]
                Merged apply-vocab into merge-interactive.

           4526.7.3 Aaron Bentley	2009-07-13
                    Test shelve_change.

&gt; This also means that _every_commit_ to a main branch would
&gt; be an official release.

We don't do that.  We have official releases every 4 weeks, but we do
believe that running bzr.dev is pretty safe, because it's always tested
and our test suite is quite thorough.

Aaron
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.9 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iEYEARECAAYFAkpcznIACgkQ0F+nu1YWqI0yhACePTFUUp6u+Dw+8IRwWOWBQRtb
TgsAniJq4lqnDfjNACMr7IEt7xYJhx7m
=BbGG
-----END PGP SIGNATURE-----</body>
        </comment>
      <comment>
        <uuid>6e315abe-a080-4369-8729-4aea2dee8494</uuid>
        <alt-id>&lt;20090714183404.GB26032@ukfsn.org&gt;</alt-id>
        <short-name>bea/529/6e3</short-name>
        <in-reply-to>1f40efc1-6efc-4dd8-bdd2-97907e5aa624</in-reply-to>
        <author>jnrowe@gmail.com</author>
        <date>Tue, 14 Jul 2009 19:34:04 +0100</date>
        <content-type>text/plain</content-type>
        <body>[This time to the list]

* W. Trevor King (wking@drexel.edu) wrote:
&gt; On Tue, Jul 14, 2009 at 03:29:42PM +0100, James Rowe wrote:
&gt; &gt;   Isn't there a bzr web interface that at least supports creating
&gt; &gt; tarballs/zips?  It is pretty standard functionality for most other VCS'
&gt; &gt; web interfaces so I'm guessing there must be, but loggerhead seems not
&gt; &gt; to support it.
&gt; 
&gt; Unfortunately, people would still need bzr to install the versioned source:
&gt; 
&gt;   libbe/_version.py:
&gt;           bzr version-info --format python &gt; $@

  I hadn't even seen that change go in.  The last upstream change in the
version I have installed locally was by you on 2008-11-24.

&gt; So you'll need a "release" target in the makefile to build a bzr-less
&gt; install.  While you're at it, you should probably compile the manpage
&gt; too to remove the docbook-to-man dependency.

  Maybe for others.  Our packages just don't have the manpage as it is only
the "be help" text reformatted, the easy option is sometimes the right
one :)  Also, I've just noticed that it has even less documentation in
the bzr tree[1] making its installation much less compelling unless your
packaging rules require a man page like Debians.

  Out of curiosity why is the Makefile being used for this stuff anyway?
It is going to make it difficult to build locally when we finally get
around to merging.  Examples: If distutils was being used exclusively it
would fix the #! lines in xml/*.  We'd be able to point Python
$version_of_the_day at setup.py instead of having to sed the Makefile or
run setup and manually install other files.

Thanks,

James
  1. http://pullcord.laptop.org:4000/revision/314.1.15/doc/be.1.sgml</body>
      </comment>
      <comment>
        <uuid>31beb504-c72b-4304-95ba-a66d2bcbc46a</uuid>
        <alt-id>&lt;20090714191145.GB10606@mjolnir.home.net&gt;</alt-id>
        <short-name>bea/529/31b</short-name>
        <in-reply-to>6e315abe-a080-4369-8729-4aea2dee8494</in-reply-to>
        <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
        <date>Tue, 14 Jul 2009 15:11:45 -0400</date>
        <content-type>text/plain</content-type>
        <body>On Tue, Jul 14, 2009 at 07:34:04PM +0100, jnrowe@gmail.com wrote:
&gt; [This time to the list]
&gt; 
&gt; * W. Trevor King (wking@drexel.edu) wrote:
&gt; &gt; On Tue, Jul 14, 2009 at 03:29:42PM +0100, James Rowe wrote:
&gt; &gt; &gt;   Isn't there a bzr web interface that at least supports creating
&gt; &gt; &gt; tarballs/zips?  It is pretty standard functionality for most other VCS'
&gt; &gt; &gt; web interfaces so I'm guessing there must be, but loggerhead seems not
&gt; &gt; &gt; to support it.
&gt; &gt; 
&gt; &gt; Unfortunately, people would still need bzr to install the versioned source:
&gt; &gt; 
&gt; &gt;   libbe/_version.py:
&gt; &gt;           bzr version-info --format python &gt; $@
&gt; 
&gt;   I hadn't even seen that change go in.  The last upstream change in the
&gt; version I have installed locally was by you on 2008-11-24.

It's only been in Chris' http://bzr.bugseverywhere.org/be/ branch
since revno: 321, 2009-06-25.  Obviously we may have to adjust the
--verison output once we settle on a versioning scheme, but whatever
we pick, I think having the auto-generated libbe/_version.py around
for pinpointing bugs is worth the trouble of requiring bzr when
building distribution tarballs.

&gt; &gt; So you'll need a "release" target in the makefile to build a bzr-less
&gt; &gt; install.  While you're at it, you should probably compile the manpage
&gt; &gt; too to remove the docbook-to-man dependency.
&gt; 
&gt;   Maybe for others.  Our packages just don't have the manpage as it is only
&gt; the "be help" text reformatted, the easy option is sometimes the right
&gt; one :)  Also, I've just noticed that it has even less documentation in
&gt; the bzr tree[1] making its installation much less compelling unless your
&gt; packaging rules require a man page like Debians.
&gt; 
&gt;   Out of curiosity why is the Makefile being used for this stuff anyway?
&gt; It is going to make it difficult to build locally when we finally get
&gt; around to merging.  Examples: If distutils was being used exclusively it
&gt; would fix the #! lines in xml/*.  We'd be able to point Python
&gt; $version_of_the_day at setup.py instead of having to sed the Makefile or
&gt; run setup and manually install other files.

I speak Makefile better than I speak distutils ;).  I'm not sure how
to translate the be.1 generation/installation or the libbe/_version.py
generation into distutils.  Anyone else?

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
      </comment>
    <comment>
      <uuid>a536cee5-cc8d-4b18-b491-657e0c7998b4</uuid>
      <alt-id>&lt;m3ljmrfgot.fsf@pullcord.laptop.org&gt;</alt-id>
      <short-name>bea/529/a53</short-name>
      <in-reply-to>ea01c122-e629-4d5c-afa7-b180f4a8748b</in-reply-to>
      <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
      <date>Tue, 14 Jul 2009 11:05:38 -0400</date>
      <content-type>text/plain</content-type>
      <body>Hi,

   &gt; Which we don't bother keeping (also NEWS), since "bzr log" works
   &gt; so nicely.  If you really want an standard changelog, see
   &gt; http://mail.gnome.org/archives/desktop-devel-list/2007-September/msg00186.html

Actually, there's a `bzr log --gnu-changelog` now, and `bzr help
log-formats` offers some more styles.  (None of them seem to match
my preferred style for release announcements exactly, which would
be `git shortlog`-style.)

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;</body>
    </comment>
  <comment>
    <uuid>ffbf5ac9-e2f5-47ab-9c3c-33989c81ad42</uuid>
    <alt-id>&lt;87k52bjoxe.fsf_-_@benfinney.id.au&gt;</alt-id>
    <short-name>bea/529/ffb</short-name>
    <in-reply-to>cdf15bdd-d3fe-4251-9d0b-f1b687e9a26c</in-reply-to>
    <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
    <date>Wed, 15 Jul 2009 00:54:05 +1000</date>
    <content-type>text/plain</content-type>
    <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; On Tue, Jul 14, 2009 at 10:36:26PM +1000, Ben Finney wrote:
&gt; &gt; Please, no. Timestamps aren't version strings, that's conflating two
&gt; &gt; pieces of information with very different meanings. Correlating the
&gt; &gt; two is the job of a changelog.
&gt; 
&gt; Which we don't bother keeping (also NEWS), since "bzr log" works so
&gt; nicely.

That's not a changelog, that's a commit log of every source-level commit
made. Far too much detail for a changelog of *user-visible* changes
associated with a release.

&gt; The timestamp should at least replace the patch release number, which
&gt; you agree is-desirable-to increase motonically ;).

I still disagree that a timestamp is the right thing to use there. If
you want a monotonically-increasing indicator of which revision we're up
to, that's immediately available with the revision number from VCS on
the main branch. That also has the advantage of producing consecutive
numbers for each revision, by definition.

&gt; One problem is that we don't actually have "releases". People just
&gt; clone a branch, install, and go.

I agree that's a problem. I think the solution is to start making
releases, with specific version strings, as source tarballs.

James Rowe &lt;jnrowe@gmail.com&gt; writes:

&gt;   Isn't there a bzr web interface that at least supports creating
&gt; tarballs/zips?

Even better: ‘bzr export /tmp/foo.tar.gz’ will create a source tarball
of all the files in the branch's VCS inventory. All we need to do is
start the practice of tagging a release in the VCS, and export the
tarball at that time.

-- 
 \       “Pinky, are you pondering what I'm pondering?” “Well, I think |
  `\   so (hiccup), but Kevin Costner with an English accent?” —_Pinky |
_o__)                                                   and The Brain_ |
Ben Finney</body>
  </comment>
  <comment>
    <uuid>aad59898-8949-44fb-ad0b-2acea6eb2ef8</uuid>
    <alt-id>&lt;m3k52bfgf0.fsf@pullcord.laptop.org&gt;</alt-id>
    <short-name>bea/529/aad</short-name>
    <in-reply-to>ffbf5ac9-e2f5-47ab-9c3c-33989c81ad42</in-reply-to>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Tue, 14 Jul 2009 11:11:31 -0400</date>
    <content-type>text/plain</content-type>
    <body>Hi,

   &gt; That's not a changelog, that's a commit log of every source-level
   &gt; commit made. Far too much detail for a changelog of
   &gt; *user-visible* changes associated with a release.

I think I agree with both of you. :) It seems like it's both true that
there's no point in keeping a GNU-style ChangeLog these days, and that
if we make a release we should write an announce mail that directly
mentions new user-visible changes as well as attaching the commit log.
That smaller list of highly user-visible changes could live in NEWS,
or in the announce mail, or both.

   &gt; I agree that's a problem. I think the solution is to start making
   &gt; releases, with specific version strings, as source tarballs.

I'm happy to do this if people think it would be useful, and I don't
yet have a strong opinion on whether the releases should come with
version numbers or timestamps.

Thanks,

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>b19a8f6a-1d7b-4887-a9df-123d59b0cd9b</uuid>
    <alt-id>&lt;5c5e5c350907140827u218553e8rc5773325d43c2bf2@mail.gmail.com&gt;</alt-id>
    <short-name>bea/529/b19</short-name>
    <in-reply-to>aad59898-8949-44fb-ad0b-2acea6eb2ef8</in-reply-to>
    <author>Elena of Valhalla &lt;elena.valhalla@gmail.com&gt;</author>
    <date>Tue, 14 Jul 2009 17:27:52 +0200</date>
    <content-type>text/plain</content-type>
    <body>On Tue, Jul 14, 2009 at 5:11 PM, Chris Ball&lt;cjb@laptop.org&gt; wrote:
&gt;   &gt; I agree that's a problem. I think the solution is to start making
&gt;   &gt; releases, with specific version strings, as source tarballs.
&gt;
&gt; I'm happy to do this if people think it would be useful, and I don't
&gt; yet have a strong opinion on whether the releases should come with
&gt; version numbers or timestamps.

as an user of be that plans to try and "package" it for openembedded,
a release would be very useful: writing a recipe that downloads a
specific commit from bzr and builds it is probably feasible, but
definitely not ideal.

I also have a weak preference for version numbers, as long as they
give useful informations on the state the release.

-- 
Elena ``of Valhalla''

email: elena.valhalla@gmail.com

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
</bug>
<bug>
  <uuid>d8dba78d-f82a-4674-9003-a0ec569b4a96</uuid>
  <short-name>bea/d8d</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <reporter>gianluca &lt;gian@galactica&gt;</reporter>
  <creator>gianluca &lt;gian@galactica&gt;</creator>
  <created>Fri, 03 Jul 2009 21:18:13 +0000</created>
  <summary>Add the possibility to specify the repository directory to "be html"?</summary>
  <comment>
    <uuid>5b2e1ec8-3bb7-40cd-9f4f-74e5c59838f6</uuid>
    <short-name>bea/d8d/5b2</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 07 Aug 2009 17:58:58 +0000</date>
    <content-type>text/plain</content-type>
    <body>Available with
  be -d DIR html</body>
  </comment>
</bug>
<bug>
  <uuid>c271a802-d324-48a6-b01d-63e4a72aa43e</uuid>
  <short-name>bea/c27</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <reporter>gianluca &lt;gian@galactica&gt;</reporter>
  <creator>gianluca &lt;gian@galactica&gt;</creator>
  <created>Fri, 03 Jul 2009 21:17:41 +0000</created>
  <summary>Add a verbose option to "be html"?</summary>
  <comment>
    <uuid>06e45775-1c46-4793-a34e-2cc86a8db097</uuid>
    <short-name>bea/c27/06e</short-name>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Thu, 08 Oct 2009 20:16:46 +0000</date>
    <content-type>text/plain</content-type>
    <body>Added the option in my be-html branch</body>
  </comment>
</bug>
<bug>
  <uuid>2f048ac5-5564-4b34-b7f9-605357267ed2</uuid>
  <short-name>bea/2f0</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <assigned>Gianluca Montecchi &lt;gian@grys.it&gt;</assigned>
  <reporter>Gianluca Montecchi &lt;gian@grys.it&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 18:43:06 +0000</created>
  <summary>Static html report generation</summary>
  <comment>
    <uuid>e5248100-ea02-4205-a4c1-ac7a577c6362</uuid>
    <alt-id>&lt;200906252203.08535.gian@grys.it&gt;</alt-id>
    <short-name>bea/2f0/e52</short-name>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Thu, 25 Jun 2009 22:03:08 +0200</date>
    <content-type>text/plain</content-type>
    <body>On Thursday 25 June 2009 16:23:04 Steve Losh wrote:
&gt; On Jun 25, 2009, at 10:02 AM, Chris Ball &lt;cjb@laptop.org&gt; wrote:
&gt; &gt;&gt; Oh, and obviously there must still be bugs in BE.  Please submit
&gt; &gt;&gt; more ;).
&gt; &gt;
&gt; &gt; Perhaps it's a good time to merge Steve Losh's CherryPy web interface?
&gt; &gt;
&gt; &gt; http://void.printf.net/pipermail/be-devel/2009-February/000095.html
&gt; &gt; http://bitbucket.org/sjl/cherryflavoredbugseverywhere/
&gt;
&gt; Hey, I haven't touched the web interface in a while, but I should have
&gt; some time to fix some stuff up tonight and tomorrow. Hold off on
&gt; merging it in until then.
&gt;
&gt; I'm still curious as to what people think the role of a web interface
&gt; like this should be. When I wrote it I meant it as a single-user
&gt; interface like the command line one. It could definitely work as a
&gt; public, read-only interface too.

I'd really like to have some sort of web interface for  BE, also in read-only 
mode.

I am thinking to write (actually I wrote some test code) a tool to parse a BE 
repository to output a set of static html pages to put online, like the "ditz 
html" command, but this was before I start to play with BE sourcecode, so now 
I ma thinking to implement it as a BE command.

&gt; If the goal is to allow more than one person to add issues, how should
&gt; commits go? One commit per change? Commit every X minutes if necessary?

I think that a simple web interface should be read-only. 

Eventually, to allow to add issues also from the web interface, it should be 
done to a specific branch, one commit per change.  

just my 2 cents...
bye
Gianluca

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>cb5689f4-7c36-4c44-b380-ca9e06e80bae</uuid>
    <alt-id>&lt;200907032250.17327.gian@grys.it&gt;</alt-id>
    <short-name>bea/2f0/cb5</short-name>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Fri, 03 Jul 2009 22:50:17 +0200</date>
    <content-type>text/plain</content-type>
    <body>Hello to everyone

As i said in a previous mail, I am working on a "html" command for be. 
The goal is to be able to do something like "be html /web/page" to have in the 
/web/page directory some static html pages that basically are the dump of the 
be repository, much like ditz have
This will enable a simple and fast publish of the bus list and details on the 
web, at least in read only mode.

So I'd like to ask some question:
1) is it ok to develop this command ? I know that this is not a fully featured 
web interface, but I am sure that it can be usefull.

I am open to suggestion about it of course.

2) I see that every command is implemented with a python file in the becommand 
dir. For a better code, I'd like to split the command implementation into two 
files: a file that contain the actual code and a second  file that have the html 
related part, any problem with this ? I don't like to have the html part and 
the code part in one big and unreadable file.

I'd like to hear other opinion about this.

Thanks for now
bye
Gianluca


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
    <comment>
      <uuid>1dba8196-654b-4ca0-9a95-fb334af81863</uuid>
      <alt-id>&lt;87y6r5qoyw.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/2f0/1db</short-name>
      <in-reply-to>cb5689f4-7c36-4c44-b380-ca9e06e80bae</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Sat, 04 Jul 2009 10:19:35 +1000</date>
      <content-type>text/plain</content-type>
      <body>Gianluca Montecchi &lt;gian@grys.it&gt; writes:

&gt; 1) is it ok to develop this command ? I know that this is not a fully
&gt; featured web interface, but I am sure that it can be usefull.

Yes, definitely. I can see it being a very easy way to put one's bug
database online for browsing.

&gt; I am open to suggestion about it of course.

Instead of a separate command for each output format, could we have a
single “produce a static report of the bug database” command, and
specify output format as an option?

How about:

    be report
    be report --format ascii
    be report --format rst
    be report --format html

Where the ‘--format’ option has a default of, e.g., “ascii”.

This would mean that you are implementing the ‘html’ format of this
putative command.

&gt; 2) I see that every command is implemented with a python file in the
&gt; becommand dir. For a better code, I'd like to split the command
&gt; implementation into two files: a file that contain the actual code and
&gt; a second file that have the html related part, any problem with this ?

This sounds quite sensible to me. The existence of a command implies a
module of the same name in ‘becommand’, but there's no necessary
implication that that module can't import modules from elsewhere to do
its work.

-- 
 \           “It ain't so much the things we don't know that get us in |
  `\    trouble. It's the things we know that ain't so.” —Artemus Ward |
_o__)                                     (1834–1867), U.S. journalist |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
      <comment>
        <uuid>8c1c4f38-a8d4-4cf9-a9f0-e9846ebbcad8</uuid>
        <alt-id>&lt;200907062218.33895.gian@grys.it&gt;</alt-id>
        <short-name>bea/2f0/8c1</short-name>
        <in-reply-to>1dba8196-654b-4ca0-9a95-fb334af81863</in-reply-to>
        <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
        <date>Mon, 06 Jul 2009 22:18:33 +0200</date>
        <content-type>text/plain</content-type>
        <body>On Saturday 04 July 2009 02:19:35 Ben Finney wrote:
&gt; Gianluca Montecchi &lt;gian@grys.it&gt; writes:

&gt;
&gt; &gt; I am open to suggestion about it of course.
&gt;
&gt; Instead of a separate command for each output format, could we have a
&gt; single “produce a static report of the bug database” command, and
&gt; specify output format as an option?
&gt;
&gt; How about:
&gt;
&gt;     be report
&gt;     be report --format ascii
&gt;     be report --format rst
&gt;     be report --format html
&gt;
&gt; Where the ‘--format’ option has a default of, e.g., “ascii”.
&gt;
&gt; This would mean that you are implementing the ‘html’ format of this
&gt; putative command.
&gt;

This sound like an interesting idea, but what i'd like to do is not, strictly 
speaking, a report. It is a full tree of html pages that are browseable, both 
on line and offline

&gt; &gt; 2) I see that every command is implemented with a python file in the
&gt; &gt; becommand dir. For a better code, I'd like to split the command
&gt; &gt; implementation into two files: a file that contain the actual code and
&gt; &gt; a second file that have the html related part, any problem with this ?
&gt;
&gt; This sounds quite sensible to me. The existence of a command implies a
&gt; module of the same name in ‘becommand’, but there's no necessary
&gt; implication that that module can't import modules from elsewhere to do
&gt; its work.

The "elsewhere"  for now is the same directory, just another module

bye
Gianluca


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
      </comment>
    <comment>
      <uuid>68927fef-6ce1-4a1f-a414-28695d913a50</uuid>
      <alt-id>&lt;20090705143108.GB10709@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/2f0/689</short-name>
      <in-reply-to>1dba8196-654b-4ca0-9a95-fb334af81863</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sun, 5 Jul 2009 10:31:08 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Sat, Jul 04, 2009 at 10:19:35AM +1000, Ben Finney wrote:
&gt; Instead of a separate command for each output format, could we have a
&gt; single "produce a static report of the bug database" command, and
&gt; specify output format as an option?
&gt; 
&gt; How about:
&gt; 
&gt;     be report
&gt;     be report --format ascii
&gt;     be report --format rst
&gt;     be report --format html

Do people like this architecture better than my be-xml-to-mbox
approach?  I think the tradeoff is easy output format implementation
vs cluttered core codebase.  Should we use both, depending on how
useful people think the output format will be?

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
    <comment>
      <uuid>b900f7fd-bab6-48c4-922c-a051f933da58</uuid>
      <alt-id>&lt;m3iqi9thk1.fsf@pullcord.laptop.org&gt;</alt-id>
      <short-name>bea/2f0/b90</short-name>
      <in-reply-to>cb5689f4-7c36-4c44-b380-ca9e06e80bae</in-reply-to>
      <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
      <date>Fri, 03 Jul 2009 20:31:26 -0400</date>
      <content-type>text/plain</content-type>
      <body>Hi Gianluca,

   &gt; As i said in a previous mail, I am working on a "html" command
   &gt; for be.  The goal is to be able to do something like "be html
   &gt; /web/page" to have in the /web/page directory some static html
   &gt; pages that basically are the dump of the be repository, much like
   &gt; ditz have. This will enable a simple and fast publish of the bus
   &gt; list and details on the web, at least in read only mode.

It might be a good idea for "be html" to use the CherryPy web interface
that Steve is working on.  The command could start up the CherryPy app
and scrape all of the available pages to get a stand-alone dump; this
would avoid having to keep two (okay, more than two at this point)
separate sets of HTML templates in the source tree.  What do you think?

   &gt; 2) I see that every command is implemented with a python file in
   &gt; the becommand dir. For a better code, I'd like to split the
   &gt; command implementation into two files: a file that contain the
   &gt; actual code and a second file that have the html related part,
   &gt; any problem with this ? I don't like to have the html part and
   &gt; the code part in one big and unreadable file.

I agree that becommands/*.py commands should not contain any HTML
layout code.  Putting it somewhere else instead sounds fine.

Thanks!

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>da97e18f-33d6-469e-9d93-6457b9a6bfca</uuid>
      <alt-id>&lt;200907062246.54804.gian@grys.it&gt;</alt-id>
      <short-name>bea/2f0/da9</short-name>
      <in-reply-to>b900f7fd-bab6-48c4-922c-a051f933da58</in-reply-to>
      <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
      <date>Mon, 06 Jul 2009 22:46:54 +0200</date>
      <content-type>text/plain</content-type>
      <body>On Saturday 04 July 2009 02:31:26 Chris Ball wrote:
&gt; Hi Gianluca,
&gt;
&gt;    &gt; As i said in a previous mail, I am working on a "html" command
&gt;    &gt; for be.  The goal is to be able to do something like "be html
&gt;    &gt; /web/page" to have in the /web/page directory some static html
&gt;    &gt; pages that basically are the dump of the be repository, much like
&gt;    &gt; ditz have. This will enable a simple and fast publish of the bus
&gt;    &gt; list and details on the web, at least in read only mode.
&gt;
&gt; It might be a good idea for "be html" to use the CherryPy web interface
&gt; that Steve is working on.  The command could start up the CherryPy app
&gt; and scrape all of the available pages to get a stand-alone dump; this
&gt; would avoid having to keep two (okay, more than two at this point)
&gt; separate sets of HTML templates in the source tree.  What do you think?

It can be do, but this implies that CherryPy must be installed and configured, 
a thing that I don't want to impose. My idea is to offer a simpler way to have 
some html pages, where you just need to have BE installed.

My very first implementation was a script that parse directly the .be directory 
to build the pages, without BE itself installed.


&gt;    &gt; 2) I see that every command is implemented with a python file in
&gt;    &gt; the becommand dir. For a better code, I'd like to split the
&gt;    &gt; command implementation into two files: a file that contain the
&gt;    &gt; actual code and a second file that have the html related part,
&gt;    &gt; any problem with this ? I don't like to have the html part and
&gt;    &gt; the code part in one big and unreadable file.
&gt;
&gt; I agree that becommands/*.py commands should not contain any HTML
&gt; layout code.  Putting it somewhere else instead sounds fine.

I am in doubt with the "somewhere else", since for now I put the html template 
into a separate file in the same directory. Suggestion ?

thanks
bye
Gianluca

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>83202b83-eea8-452f-8239-d468940bddba</uuid>
      <alt-id>&lt;20090707013454.GA3721@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/2f0/832</short-name>
      <in-reply-to>da97e18f-33d6-469e-9d93-6457b9a6bfca</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Mon, 6 Jul 2009 21:34:54 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Fri, Jul 03, 2009 at 10:50:17PM +0200, Gianluca Montecchi wrote:
&gt; 
&gt; Hello to everyone
&gt; 
&gt; As i said in a previous mail, I am working on a "html" command for be. 
&gt; The goal is to be able to do something like "be html /web/page" to have in the 
&gt; /web/page directory some static html pages that basically are the dump of the 
&gt; be repository, much like ditz have
&gt; This will enable a simple and fast publish of the bus list and details on the 
&gt; web, at least in read only mode.
&gt; 
&gt; So I'd like to ask some question:
&gt; 1) is it ok to develop this command ? I know that this is not a fully featured 
&gt; web interface, but I am sure that it can be usefull.
&gt; 
&gt; I am open to suggestion about it of course.
&gt; 
&gt; 2) I see that every command is implemented with a python file in the becommand 
&gt; dir. For a better code, I'd like to split the command implementation into two 
&gt; files: a file that contain the actual code and a second  file that have the html 
&gt; related part, any problem with this ? I don't like to have the html part and 
&gt; the code part in one big and unreadable file.
&gt; 
&gt; I'd like to hear other opinion about this.
&gt; 
&gt; Thanks for now
&gt; bye
&gt; Gianluca
&gt; 
&gt; 
&gt; _______________________________________________
&gt; Be-devel mailing list
&gt; Be-devel@bugseverywhere.org
&gt; http://void.printf.net/cgi-bin/mailman/listinfo/be-devel

On Mon, Jul 06, 2009 at 10:18:33PM +0200, Gianluca Montecchi wrote:
&gt; This sound like an interesting idea, but what i'd like to do is not, strictly 
&gt; speaking, a report. It is a full tree of html pages that are browseable, both 
&gt; on line and offline

I'm not sure what distinction you're making about "report".  You're
just producing a static snapshot of the current database status,
right?  The number of pages and completeness of coverage are nice, but
it's still a static entity generated from a particular snapshot, which
is what I mean by "report" ;).

&gt; &gt; &gt; 2) I see that every command is implemented with a python file in the
&gt; &gt; &gt; becommand dir. For a better code, I'd like to split the command
&gt; &gt; &gt; implementation into two files: a file that contain the actual code and
&gt; &gt; &gt; a second file that have the html related part, any problem with this ?
&gt; &gt;
&gt; &gt; This sounds quite sensible to me. The existence of a command implies a
&gt; &gt; module of the same name in ‘becommand’, but there's no necessary
&gt; &gt; implication that that module can't import modules from elsewhere to do
&gt; &gt; its work.
&gt; 
&gt; The "elsewhere"  for now is the same directory, just another module
&gt; 

On Mon, Jul 06, 2009 at 10:38:56PM +0200, Gianluca Montecchi wrote:
&gt; &gt; On Fri, Jul 03, 2009 at 10:50:17PM +0200, Gianluca Montecchi wrote:
&gt; &gt; &gt; The goal is to be able to do something like "be html /web/page" to have
&gt; &gt; &gt; in the /web/page directory some static html pages that basically are the
&gt; &gt; &gt; dump of the be repository, much like ditz have
&gt; &gt;
&gt; &gt; I think truly interactive frontends like Steve's working on need to be
&gt; &gt; build on top of libbe directly, since they'll need to make lots of
&gt; &gt; small changes to the database, and it's to slow to be reloading the
&gt; &gt; database for every change.  Static dumps like my mbox or Gianluca's
&gt; &gt; html could just parse the xml output of `be list' and other be
&gt; &gt; commands.
&gt; 
&gt; Ok, but if I want to have an html dump that is browseable, I need to parse the 
&gt; xml. Am I correct ? 
&gt; If yes, should not be easiear to use directly the libbe ?

Using libbe directly is easier, but also more tightly tied to the be
internals which could weigh down future refactoring.  Partly I'm
afraid of our 2.5 different html-output mechanisms.  Either their
should be a single Right Way that tries to satisfy everyone, or a
smorgasbord of loosely coupled translators, so it's not so painful to
kill them if/when they go out of style :p.

On Mon, Jul 06, 2009 at 10:46:54PM +0200, Gianluca Montecchi wrote:
&gt; On Saturday 04 July 2009 02:31:26 Chris Ball wrote:
&gt; &gt; It might be a good idea for "be html" to use the CherryPy web interface
&gt; &gt; that Steve is working on.  The command could start up the CherryPy app
&gt; &gt; and scrape all of the available pages to get a stand-alone dump; this
&gt; &gt; would avoid having to keep two (okay, more than two at this point)
&gt; &gt; separate sets of HTML templates in the source tree.  What do you think?
&gt; 
&gt; It can be do, but this implies that CherryPy must be installed and configured, 
&gt; a thing that I don't want to impose. My idea is to offer a simpler way to have 
&gt; some html pages, where you just need to have BE installed.

I agree that not needing CherryPy for a static html dump is good.
Also, read-only templates will look different from the CherryPy
interactive templates.  +1 for another quasi-redundant template set
;).

&gt; &gt;    &gt; 2) I see that every command is implemented with a python file in
&gt; &gt;    &gt; the becommand dir. For a better code, I'd like to split the
&gt; &gt;    &gt; command implementation into two files: a file that contain the
&gt; &gt;    &gt; actual code and a second file that have the html related part,
&gt; &gt;    &gt; any problem with this ? I don't like to have the html part and
&gt; &gt;    &gt; the code part in one big and unreadable file.
&gt; &gt;
&gt; &gt; I agree that becommands/*.py commands should not contain any HTML
&gt; &gt; layout code.  Putting it somewhere else instead sounds fine.
&gt; 
&gt; I am in doubt with the "somewhere else", since for now I put the html template 
&gt; into a separate file in the same directory. Suggestion ?

I think that only code intended only for command line use only should
go into becommands, but really, just dump it anywhere and we can shift
it around later :p.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
    <comment>
      <uuid>c7ace551-2982-4683-bca3-b5e66056cce5</uuid>
      <alt-id>&lt;6f719a1c43fdcba8bdbfee1130072595.squirrel@webmail.grys.it&gt;</alt-id>
      <short-name>bea/2f0/c7a</short-name>
      <in-reply-to>83202b83-eea8-452f-8239-d468940bddba</in-reply-to>
      <author>gian@grys.it</author>
      <date>Tue, 07 Jul 2009 14:15:08 +0200</date>
      <content-type>text/plain</content-type>
      <body>&gt; On Mon, Jul 06, 2009 at 10:18:33PM +0200, Gianluca Montecchi wrote:
&gt;&gt; This sound like an interesting idea, but what i'd like to do is not,
&gt;&gt; strictly
&gt;&gt; speaking, a report. It is a full tree of html pages that are browseable,
&gt;&gt; both
&gt;&gt; on line and offline
&gt;
&gt; I'm not sure what distinction you're making about "report".  You're
&gt; just producing a static snapshot of the current database status,
&gt; right?  The number of pages and completeness of coverage are nice, but
&gt; it's still a static entity generated from a particular snapshot, which
&gt; is what I mean by "report" ;).

Mmm, my bad here.
I normally speak about "report" as something that is not browseable, like
the output of a report generator (reportlab or whatever), but I admit that
basically also the html output I am working on is a report.


&gt; On Mon, Jul 06, 2009 at 10:38:56PM +0200, Gianluca Montecchi wrote:
&gt;&gt;
&gt;&gt; Ok, but if I want to have an html dump that is browseable, I need to
&gt;&gt; parse the
&gt;&gt; xml. Am I correct ?
&gt;&gt; If yes, should not be easiear to use directly the libbe ?
&gt;
&gt; Using libbe directly is easier, but also more tightly tied to the be
&gt; internals which could weigh down future refactoring.  Partly I'm
&gt; afraid of our 2.5 different html-output mechanisms.  Either their
&gt; should be a single Right Way that tries to satisfy everyone, or a
&gt; smorgasbord of loosely coupled translators, so it's not so painful to
&gt; kill them if/when they go out of style :p.

I know that using libbe I am more tightly tied to the internals, but
I am trying to keep the command code and the presentation code crearly
separated to minimize this problem. I am not sure this is a real problem
anyway.


&gt; On Mon, Jul 06, 2009 at 10:46:54PM +0200, Gianluca Montecchi wrote:
&gt;&gt; On Saturday 04 July 2009 02:31:26 Chris Ball wrote:
&gt;&gt; &gt; It might be a good idea for "be html" to use the CherryPy web
&gt;&gt; interface
&gt;&gt; &gt; that Steve is working on.  The command could start up the CherryPy app
&gt;&gt; &gt; and scrape all of the available pages to get a stand-alone dump; this
&gt;&gt; &gt; would avoid having to keep two (okay, more than two at this point)
&gt;&gt; &gt; separate sets of HTML templates in the source tree.  What do you
&gt;&gt; think?
&gt;&gt;
&gt;&gt; It can be do, but this implies that CherryPy must be installed and
&gt;&gt; configured,
&gt;&gt; a thing that I don't want to impose. My idea is to offer a simpler way
&gt;&gt; to have
&gt;&gt; some html pages, where you just need to have BE installed.
&gt;
&gt; I agree that not needing CherryPy for a static html dump is good.
&gt; Also, read-only templates will look different from the CherryPy
&gt; interactive templates.  +1 for another quasi-redundant template set
&gt; ;).

The look is not a problem. I can always use the same html Steve is using.
I am also playing with the idea to have the template themeable some time
after I have a fully working version.

&gt;
&gt;&gt; &gt;    &gt; 2) I see that every command is implemented with a python file in
&gt;&gt; &gt;    &gt; the becommand dir. For a better code, I'd like to split the
&gt;&gt; &gt;    &gt; command implementation into two files: a file that contain the
&gt;&gt; &gt;    &gt; actual code and a second file that have the html related part,
&gt;&gt; &gt;    &gt; any problem with this ? I don't like to have the html part and
&gt;&gt; &gt;    &gt; the code part in one big and unreadable file.
&gt;&gt; &gt;
&gt;&gt; &gt; I agree that becommands/*.py commands should not contain any HTML
&gt;&gt; &gt; layout code.  Putting it somewhere else instead sounds fine.
&gt;&gt;
&gt;&gt; I am in doubt with the "somewhere else", since for now I put the html
&gt;&gt; template
&gt;&gt; into a separate file in the same directory. Suggestion ?
&gt;
&gt; I think that only code intended only for command line use only should
&gt; go into becommands, but really, just dump it anywhere and we can shift
&gt; it around later :p.

Of course.

bye
Gianluca


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
    <comment>
      <uuid>3bf57ee7-710f-4a01-a8af-8bb9eb9dc937</uuid>
      <alt-id>&lt;87skh9p8ax.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/2f0/3bf</short-name>
      <in-reply-to>cb5689f4-7c36-4c44-b380-ca9e06e80bae</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Tue, 07 Jul 2009 11:53:58 +1000</date>
      <content-type>text/plain</content-type>
      <body>Gianluca Montecchi &lt;gian@grys.it&gt; writes:

&gt; On Monday 06 July 2009 12:48:39 W. Trevor King wrote:
&gt; &gt; Gianluca is clearly thinking about a static report [for a collection
&gt; &gt; of HTML files as output]:
&gt; 
&gt; You are right, static, but not exactly a report as I think Ben is
&gt; thinking

I think it exactly is a report: multiple, static, browseable pages
reporting the state of the database at a point in time.

What makes you think that term doesn't apply?

-- 
 \        “The problem with television is that the people must sit and |
  `\    keep their eyes glued on a screen: the average American family |
_o__)                 hasn't time for it.” —_The New York Times_, 1939 |
Ben Finney


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
    </comment>
  <comment>
    <uuid>074ef29a-3f1d-46dc-8561-7a56af7e6d67</uuid>
    <alt-id>&lt;87hbxqrckv.fsf@benfinney.id.au&gt;</alt-id>
    <short-name>bea/2f0/074</short-name>
    <in-reply-to>cb5689f4-7c36-4c44-b380-ca9e06e80bae</in-reply-to>
    <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
    <date>Mon, 06 Jul 2009 08:26:24 +1000</date>
    <content-type>text/plain</content-type>
    <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; On Sat, Jul 04, 2009 at 10:19:35AM +1000, Ben Finney wrote:
&gt; &gt; Instead of a separate command for each output format, could we have
&gt; &gt; a single "produce a static report of the bug database" command, and
&gt; &gt; specify output format as an option?
&gt; &gt; […]
&gt; 
&gt; Do people like this architecture better than my be-xml-to-mbox
&gt; approach?

I think this question is illuminated by the related question: Is mbox
output a static report, or another read-write data store?

It can technically be both, of course, which is why the question may be
helpful: it may help show what is the *conceptual* purpose of the mbox
output format for Bugs Everywhere.

-- 
 \         “Time is the great legalizer, even in the field of morals.” |
  `\                                                 —Henry L. Mencken |
_o__)                                                                  |
Ben Finney</body>
  </comment>
  <comment>
    <uuid>55263144-9775-4b18-ab83-29d66ed91a53</uuid>
    <alt-id>&lt;20090706104839.GA19537@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/2f0/552</short-name>
    <in-reply-to>074ef29a-3f1d-46dc-8561-7a56af7e6d67</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Mon, 6 Jul 2009 06:48:39 -0400</date>
    <content-type>text/plain</content-type>
    <body>On Mon, Jul 06, 2009 at 08:26:24AM +1000, Ben Finney wrote:
&gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; 
&gt; &gt; On Sat, Jul 04, 2009 at 10:19:35AM +1000, Ben Finney wrote:
&gt; &gt; &gt; Instead of a separate command for each output format, could we have
&gt; &gt; &gt; a single "produce a static report of the bug database" command, and
&gt; &gt; &gt; specify output format as an option?
&gt; &gt; 
&gt; &gt; Do people like this architecture better than my be-xml-to-mbox
&gt; &gt; approach?
&gt; 
&gt; I think this question is illuminated by the related question: Is mbox
&gt; output a static report, or another read-write data store?

Gianluca is clearly thinking about a static report:

On Fri, Jul 03, 2009 at 10:50:17PM +0200, Gianluca Montecchi wrote:
&gt; The goal is to be able to do something like "be html /web/page" to have in the
&gt; /web/page directory some static html pages that basically are the dump of the
&gt; be repository, much like ditz have

I think truly interactive frontends like Steve's working on need to be
build on top of libbe directly, since they'll need to make lots of
small changes to the database, and it's to slow to be reloading the
database for every change.  Static dumps like my mbox or Gianluca's
html could just parse the xml output of `be list' and other be
commands.

There should also be an xml import for `be new' and `be comment' so
you could import new bugs/comments from whatever format after writing
a whatever-&gt;xml converter.  This would allow you to email new bugs and
comments to the database (e.g. via some procmail-spawned
be-parse-email script) which would give you some level of
interactivity, but you'd have to regenerate your mbox to see your new
comments in your mail reader.

I think interactive use that gives you live-updates in your mail
reader isn't worth the trouble, since you'd need to teach BE imap or
smtp+mbox-locking.  Hmm, maybe it smtp+mbox-locking wouldn't be so bad,
but that would be a distinct frontend project like Steve's, not part
of the becommands.

Trevor

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
  <comment>
    <uuid>fd7ab206-5937-4ede-9e78-97aff098b677</uuid>
    <alt-id>&lt;200907062238.56930.gian@grys.it&gt;</alt-id>
    <short-name>bea/2f0/fd7</short-name>
    <in-reply-to>55263144-9775-4b18-ab83-29d66ed91a53</in-reply-to>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Mon, 06 Jul 2009 22:38:56 +0200</date>
    <content-type>text/plain</content-type>
    <body>On Monday 06 July 2009 12:48:39 W. Trevor King wrote:
&gt; On Mon, Jul 06, 2009 at 08:26:24AM +1000, Ben Finney wrote:
&gt; &gt; "W. Trevor King" &lt;wking@drexel.edu&gt; writes:
&gt; &gt; &gt; On Sat, Jul 04, 2009 at 10:19:35AM +1000, Ben Finney wrote:
&gt; &gt; &gt; &gt; Instead of a separate command for each output format, could we have
&gt; &gt; &gt; &gt; a single "produce a static report of the bug database" command, and
&gt; &gt; &gt; &gt; specify output format as an option?
&gt; &gt; &gt;
&gt; &gt; &gt; Do people like this architecture better than my be-xml-to-mbox
&gt; &gt; &gt; approach?
&gt; &gt;
&gt; &gt; I think this question is illuminated by the related question: Is mbox
&gt; &gt; output a static report, or another read-write data store?
&gt;
&gt; Gianluca is clearly thinking about a static report:

You are right, static, but not exactly a report as I think Ben is thinking

&gt;
&gt; On Fri, Jul 03, 2009 at 10:50:17PM +0200, Gianluca Montecchi wrote:
&gt; &gt; The goal is to be able to do something like "be html /web/page" to have
&gt; &gt; in the /web/page directory some static html pages that basically are the
&gt; &gt; dump of the be repository, much like ditz have
&gt;
&gt; I think truly interactive frontends like Steve's working on need to be
&gt; build on top of libbe directly, since they'll need to make lots of
&gt; small changes to the database, and it's to slow to be reloading the
&gt; database for every change.  Static dumps like my mbox or Gianluca's
&gt; html could just parse the xml output of `be list' and other be
&gt; commands.

Ok, but if I want to have an html dump that is browseable, I need to parse the 
xml. Am I correct ? 
If yes, should not be easiear to use directly the libbe ?


bye
Gianluca

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
</bug>
<bug>
  <uuid>d9959864-ea91-475a-a075-f39aa6760f98</uuid>
  <short-name>bea/d99</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <reporter>Steve Losh &lt;steve@stevelosh.com&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 18:52:44 +0000</created>
  <summary>CherryPy interface "Cherry-flavored BE"</summary>
  <comment>
    <uuid>c339db7e-d55b-400e-996d-41c938556679</uuid>
    <short-name>bea/d99/c33</short-name>
    <author>"W. Trevor King" &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 25 Jun 2010 16:40:50 +0000</date>
    <content-type>text/plain</content-type>
    <body>Chris merged CFBE into the trunk, which fixes this bug.</body>
  </comment>
  <comment>
    <uuid>16357f68-19c0-4bf9-8220-b88b52b3456d</uuid>
    <alt-id>&lt;272FECFE-D16B-47B7-B39A-E2C8A718CCC5@stevelosh.com&gt;</alt-id>
    <short-name>bea/d99/163</short-name>
    <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
    <date>Sat, 07 Feb 2009 16:30:33 -0500</date>
    <content-type>text/plain</content-type>
    <body>Hi everyone.  I found Bugs Everywhere and really like the idea of  
distributed bug tracking.  I felt like practicing building a CherryPy  
site so I put together a quick web interface to BE.  I know there's  
already a TurboGears one in the works, but I needed an excuse to try  
out CherryPy again after working with Django for a while.

Would any of you be willing to take a look at what I've got so far and  
tell me what you think I could improve?

To install and use it:

* Install CherryPy from http://cherrypy.org/ if you don't have it.
* Install Jinja2 from http://jinja.pocoo.org/2/ if you don't have it.
* Install BugsEverywhere - you probably know how to do this :)
* Download a zip/tar of my project (or hg clone) from http://bitbucket.org/sjl/cherryflavoredbugseverywhere/
* Unzip my project and put the folder in your Python site-packages  
directory.
* Symlink site-packages/cherryflavoredbugseverywhere/cfbe.py to /usr/ 
local/bin/cfbe
* Use the "cfbe [project_root]" command to start up the web interface  
for that project.
* Visit http://localhost:8080/ in a browser.

I know that's a lot of steps.  I'd like to streamline it quite a bit,  
but first I wanted to see if you have any feedback on the system  
itself. Thanks!</body>
  </comment>
    <comment>
      <uuid>42d57a41-219f-46db-9fda-21b42351da63</uuid>
      <alt-id>&lt;m3zlgxyjo5.fsf@pullcord.laptop.org&gt;</alt-id>
      <short-name>bea/d99/42d</short-name>
      <in-reply-to>16357f68-19c0-4bf9-8220-b88b52b3456d</in-reply-to>
      <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
      <date>Sat, 07 Feb 2009 17:19:22 -0500</date>
      <content-type>text/plain</content-type>
      <body>Hi Steve,

   &gt; Hi everyone.  I found Bugs Everywhere and really like the idea of
   &gt; distributed bug tracking.  I felt like practicing building a
   &gt; CherryPy site so I put together a quick web interface to BE.  I
   &gt; know there's already a TurboGears one in the works, but I needed an
   &gt; excuse to try out CherryPy again after working with Django for a
   &gt; while.

This looks awesome, thanks!  I've taken some screenshots for others to
see:

http://chris.printf.net/cfbe-main.png
http://chris.printf.net/cfbe-detail.png

My initial impression is that this looks good enough already to merge as
a replacement for the turbogears site.  What does everyone else think?

Could you explain a little about how you handle authorship of bug
changes at the moment, and if it looks plausible to try making it
multiuser?  (Having it handle more than one "user" logged in at once.)

Great work, thanks!

- Chris.</body>
    </comment>
    <comment>
      <uuid>21c90231-d7f2-49bb-97d9-99e16459d799</uuid>
      <alt-id>&lt;D765386C-4D43-4AE0-83E3-986A1CB4008C@stevelosh.com&gt;</alt-id>
      <short-name>bea/d99/21c</short-name>
      <in-reply-to>42d57a41-219f-46db-9fda-21b42351da63</in-reply-to>
      <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
      <date>Sat, 07 Feb 2009 17:48:06 -0500</date>
      <content-type>text/plain</content-type>
      <body>Hey Chris, thanks for the comments.

&gt;
&gt; My initial impression is that this looks good enough already to  
&gt; merge as
&gt; a replacement for the turbogears site.  What does everyone else think?
&gt;

I'm not quite sure it's there yet.  There are a bunch of bugs I've got  
marked as "beta" that I'd like to see fixed before it's ready for real  
use.  Hopefully they shouldn't be too tough to fix.  You can point  
CFBE at itself to see them.  :)

&gt; Could you explain a little about how you handle authorship of bug
&gt; changes at the moment, and if it looks plausible to try making it
&gt; multiuser?  (Having it handle more than one "user" logged in at once.)
&gt;

That's something I need advice on.  Right now CFBE is pretty much only  
suitable for local use - you check out whatever you're working on and  
use it as a local interface to the bugs in the repository.  Change  
those, check in, etc.  It's effectively just a pretty version of the  
command line be tool.

I haven't used CherryPy's session/authentication support before.  This  
might be a good time for me to learn.  One way it might be able to  
handle multiple users hitting a central server:

* Each user has to register with the server and be approved by an admin.
* Each account would be mapped to a contributor string, the same one  
that would show up if you were going to commit to the repository.
* Once you have an account, you'd login to make any changes.


Aside from all that, I'm a little fuzzy on how a centralized interface  
to a distributed bug tracking system should work.  A read-only  
interface to a central "main" repository would be easy.  Run the  
server in read-only mode pointing at the main repository.  People can  
use it to look at the bugs in the tip of that repository.

If it's not read-only, what happens when a user changes/adds/whatevers  
a bug?  Should CFBE commit that change to the repository right then  
and there?  Should it never commit, just update the bugdir and let the  
commits happen manually?

What happens when you have multiple branches for a repository?  Should  
there be one CFBE instance for each branch, or a single one that lets  
you switch between branches (effectively switching between revisions)?

Those are the kind of things that don't really apply when CFBE is just  
a local interface to a single repository.  If anyone has any advice on  
how a multi-user interface should work I'd love to hear it!</body>
    </comment>
      <comment>
        <uuid>1f25cba2-03ee-43e1-a042-ef6724938ad8</uuid>
        <alt-id>&lt;f6f643a20902071531y6aa3d7a6k7c5a4bd4aa5a04f6@mail.gmail.com&gt;</alt-id>
        <short-name>bea/d99/1f2</short-name>
        <in-reply-to>21c90231-d7f2-49bb-97d9-99e16459d799</in-reply-to>
        <author>Matthew Wilson &lt;matt@tplus1.com&gt;</author>
        <date>Sat, 07 Feb 2009 18:31:04 -0500</date>
        <content-type>text/plain</content-type>
        <body>Those are beautiful templates -- can you share those?  I'd love to
study the HTML and CSS behind them.

On Sat, Feb 7, 2009 at 5:48 PM, Steve Losh &lt;steve@stevelosh.com&gt; wrote:
&gt; Hey Chris, thanks for the comments.
&gt;
&gt;&gt;
&gt;&gt; My initial impression is that this looks good enough already to merge as
&gt;&gt; a replacement for the turbogears site.  What does everyone else think?
&gt;&gt;
&gt;
&gt; I'm not quite sure it's there yet.  There are a bunch of bugs I've got
&gt; marked as "beta" that I'd like to see fixed before it's ready for real use.
&gt;  Hopefully they shouldn't be too tough to fix.  You can point CFBE at itself
&gt; to see them.  :)
&gt;
&gt;&gt; Could you explain a little about how you handle authorship of bug
&gt;&gt; changes at the moment, and if it looks plausible to try making it
&gt;&gt; multiuser?  (Having it handle more than one "user" logged in at once.)
&gt;&gt;
&gt;
&gt; That's something I need advice on.  Right now CFBE is pretty much only
&gt; suitable for local use - you check out whatever you're working on and use it
&gt; as a local interface to the bugs in the repository.  Change those, check in,
&gt; etc.  It's effectively just a pretty version of the command line be tool.
&gt;
&gt; I haven't used CherryPy's session/authentication support before.  This might
&gt; be a good time for me to learn.  One way it might be able to handle multiple
&gt; users hitting a central server:
&gt;
&gt; * Each user has to register with the server and be approved by an admin.
&gt; * Each account would be mapped to a contributor string, the same one that
&gt; would show up if you were going to commit to the repository.
&gt; * Once you have an account, you'd login to make any changes.
&gt;
&gt;
&gt; Aside from all that, I'm a little fuzzy on how a centralized interface to a
&gt; distributed bug tracking system should work.  A read-only interface to a
&gt; central "main" repository would be easy.  Run the server in read-only mode
&gt; pointing at the main repository.  People can use it to look at the bugs in
&gt; the tip of that repository.
&gt;
&gt; If it's not read-only, what happens when a user changes/adds/whatevers a
&gt; bug?  Should CFBE commit that change to the repository right then and there?
&gt;  Should it never commit, just update the bugdir and let the commits happen
&gt; manually?
&gt;
&gt; What happens when you have multiple branches for a repository?  Should there
&gt; be one CFBE instance for each branch, or a single one that lets you switch
&gt; between branches (effectively switching between revisions)?
&gt;
&gt; Those are the kind of things that don't really apply when CFBE is just a
&gt; local interface to a single repository.  If anyone has any advice on how a
&gt; multi-user interface should work I'd love to hear it!
&gt;
&gt; --
&gt; Steve Losh
&gt; http://stevelosh.com/
&gt;
&gt;
&gt; _______________________________________________
&gt; Be-devel mailing list
&gt; Be-devel@bugseverywhere.org
&gt; http://void.printf.net/cgi-bin/mailman/listinfo/be-devel
&gt;



-- 
Matthew Wilson
matt@tplus1.com
http://tplus1.com

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
      </comment>
    <comment>
      <uuid>e249e2aa-2029-4a96-bc84-962366e07fd6</uuid>
      <alt-id>&lt;20090721135907.GB4469@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/d99/e24</short-name>
      <in-reply-to>21c90231-d7f2-49bb-97d9-99e16459d799</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Tue, 21 Jul 2009 09:59:07 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Sat, Feb 07, 2009 at 05:48:06PM -0500, Steve Losh wrote:
&gt;&gt; My initial impression is that this looks good enough already to merge as
&gt;&gt; a replacement for the turbogears site.  What does everyone else think?
&gt;
&gt; I'm not quite sure it's there yet.  There are a bunch of bugs I've
&gt; got marked as "beta" that I'd like to see fixed before it's ready
&gt; for real use.  Hopefully they shouldn't be too tough to fix.  You
&gt; can point CFBE at itself to see them.  :)

Steve's also versioning it with Mercurial.  Will he mind changing to
Bazaar?

Steve, I've touched up CFBE to work with my current BE branch.  Some
of the changes apply to the trunk BE, and hopefully the rest will
soon.  I think the version-naming issue is what's currently blocking
their adoption ;).  I've put up my CFBE branch at
  static-http://www.physics.drexel.edu/~wking/code/hg/cfbe
for Mercurial.

Everyone, should CFBE-specific discussions move off-list?  More
generally, I've been sending in lots of what-I'm-working on messages,
but not hearing much back, so let me know if I'm being too obnoxious,
and I'll shut up (or at least move more off-list) ;).

Cheers,
Trevor</body>
    </comment>
    <comment>
      <uuid>2496ccca-130b-4459-bfae-9d9ef0138177</uuid>
      <alt-id>&lt;4701D71B-A14D-4C63-ABCC-E7E5FFE4E4BA@stevelosh.com&gt;</alt-id>
      <short-name>bea/d99/249</short-name>
      <in-reply-to>16357f68-19c0-4bf9-8220-b88b52b3456d</in-reply-to>
      <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
      <date>Fri, 03 Jul 2009 20:34:51 -0400</date>
      <content-type>text/plain</content-type>
      <body>Speaking of that interface, I changed up the look and feel a bit last  
weekend.  It's still at http://bitbucket.org/sjl/cherryflavoredbugseverywhere/ 
  -- if anyone has any feedback (on any aspect of it) I'd appreciate it.</body>
    </comment>
    <comment>
      <uuid>00c6f4d8-f965-4d2f-a652-17e58c20ab8c</uuid>
      <alt-id>&lt;m3eisxtgfx.fsf@pullcord.laptop.org&gt;</alt-id>
      <short-name>bea/d99/00c</short-name>
      <in-reply-to>2496ccca-130b-4459-bfae-9d9ef0138177</in-reply-to>
      <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
      <date>Fri, 03 Jul 2009 20:55:30 -0400</date>
      <content-type>text/plain</content-type>
      <body>Hi,

   &gt; http://bitbucket.org/sjl/cherryflavoredbugseverywhere/

Cool!  I've set up a copy here:

   http://bugsweb.bugseverywhere.org/

(Since we don't have any open bugs lately, click "Closed" at the top,
or create some, but don't expect them to persist if you do.)

   &gt; anyone has any feedback (on any aspect of it) I'd appreciate it.

I'm pretty enthusiastic about merging this and then working on it
further.

Thanks,

- Chris.</body>
    </comment>
    <comment>
      <uuid>5e339bac-f4f3-407b-974a-b88795d3573b</uuid>
      <alt-id>&lt;m31vp82yyj.fsf@pullcord.laptop.org&gt;</alt-id>
      <short-name>bea/d99/5e3</short-name>
      <in-reply-to>16357f68-19c0-4bf9-8220-b88b52b3456d</in-reply-to>
      <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
      <date>Thu, 25 Jun 2009 10:02:44 -0400</date>
      <content-type>text/plain</content-type>
      <body>Hi,

   &gt; Works for me.  I've done this now, which closes the last open bug
   &gt; in my repo :D.

Wow.  Congrats!  I've merged your branch.

   &gt; All the new functionality comes from bug.extra_strings, which
   &gt; provides a list for storing arbitrary strings in the bug's
   &gt; permanent state.

That's going to be really useful.

   &gt; Next up: regexp searching for list --extra-strings! ;).

Awesome.

   &gt; Oh, and obviously there must still be bugs in BE.  Please submit
   &gt; more ;).

Perhaps it's a good time to merge Steve Losh's CherryPy web interface?

http://void.printf.net/pipermail/be-devel/2009-February/000095.html
http://bitbucket.org/sjl/cherryflavoredbugseverywhere/

Thanks,

- Chris.</body>
    </comment>
    <comment>
      <uuid>7fa903a3-f9e6-4e4d-8128-0f26e1ce664b</uuid>
      <alt-id>&lt;26FBD153-39C5-4641-AF5E-749731964086@stevelosh.com&gt;</alt-id>
      <short-name>bea/d99/7fa</short-name>
      <in-reply-to>5e339bac-f4f3-407b-974a-b88795d3573b</in-reply-to>
      <author>Steve Losh &lt;steve@stevelosh.com&gt;</author>
      <date>Thu, 25 Jun 2009 10:23:04 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Jun 25, 2009, at 10:02 AM, Chris Ball &lt;cjb@laptop.org&gt; wrote:
&gt;
&gt;&gt; Oh, and obviously there must still be bugs in BE.  Please submit
&gt;&gt; more ;).
&gt;
&gt; Perhaps it's a good time to merge Steve Losh's CherryPy web interface?
&gt;
&gt; http://void.printf.net/pipermail/be-devel/2009-February/000095.html
&gt; http://bitbucket.org/sjl/cherryflavoredbugseverywhere/
&gt;

Hey, I haven't touched the web interface in a while, but I should have  
some time to fix some stuff up tonight and tomorrow. Hold off on  
merging it in until then.

I'm still curious as to what people think the role of a web interface  
like this should be. When I wrote it I meant it as a single-user  
interface like the command line one. It could definitely work as a  
public, read-only interface too.

If the goal is to allow more than one person to add issues, how should  
commits go? One commit per change? Commit every X minutes if necessary?</body>
    </comment>
  <comment>
    <uuid>fa60ce1f-a809-4fb3-a2cd-1a2e0bdd0e0a</uuid>
    <alt-id>&lt;20090625154734.GA19441@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/d99/fa6</short-name>
    <in-reply-to>16357f68-19c0-4bf9-8220-b88b52b3456d</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 25 Jun 2009 11:47:34 -0400</date>
    <content-type>text/plain</content-type>
    <body>On Thu, Jun 25, 2009 at 10:23:04AM -0400, Steve Losh wrote:
&gt; I'm still curious as to what people think the role of a web interface like 
&gt; this should be. When I wrote it I meant it as a single-user interface like 
&gt; the command line one. It could definitely work as a public, read-only 
&gt; interface too.

I think the multi-user/public is the way to go.  I'd also like to see
a procmail-able script to handle multi-user/public access via email,
which would have all the same issues we're worrying about here.

On Sat, Feb 07, 2009 at 05:48:06PM -0500, Steve Losh wrote:
&gt; I haven't used CherryPy's session/authentication support before.  This 
&gt; might be a good time for me to learn.  One way it might be able to handle 
&gt; multiple users hitting a central server:
&gt;
&gt; * Each user has to register with the server and be approved by an admin.
&gt; * Each account would be mapped to a contributor string, the same one that 
&gt; would show up if you were going to commit to the repository.
&gt; * Once you have an account, you'd login to make any changes.

This sounds good to me.  Yay spam reduction ;).

&gt; If it's not read-only, what happens when a user changes/adds/whatevers a 
&gt; bug?  Should CFBE commit that change to the repository right then and 
&gt; there?  Should it never commit, just update the bugdir and let the commits 
&gt; happen manually?

On Thu, Jun 25, 2009 at 10:23:04AM -0400, Steve Losh wrote:
&gt; One commit per change? Commit every X minutes if necessary?

On Sat, Feb 07, 2009 at 05:48:06PM -0500, Steve Losh wrote:
&gt; What happens when you have multiple branches for a repository?  Should 
&gt; there be one CFBE instance for each branch, or a single one that lets you 
&gt; switch between branches (effectively switching between revisions)?

There are interesting discussions about the role of distributed
bugtracking here (I'm sure there are others):
  http://lwn.net/Articles/281849/
  http://community.livejournal.com/evan_tech/248736.html

Personally, I've never done much cherry-picking or anything that would
require me to determine exactly which parts of someone's work I want
and which I don't want.  I just merge someone's head and edit out the
bits I don't like, a process that also works well for our current
"commit however you want" BE development model ;).  Maybe that just
shows that I only work on minor branches of small projects :p.  In the
absence of big-project advice, I think we just limit the web front end
to our current model, and let the web interface commit however it
wants as well ;).  +1 for adding a &lt;commit&gt; button to the web
interface ;).

One caveat about a multi-user interface would be that it would allow
the casual users to commit bugs about whatever version they had
installed onto the head of the public-bug branch.  In order to figure
out what version of the project they were talking about, the project
should have a way for the user to get a unique version string, ideally
be the bzr-revision-id/git-commit/etc. of the commit for the version
they were using.  This would allow developers to determine what branch
to work on with the bug fix, and what branches needed to pull the
eventual fix.  If the initially reported buggy version wasn't actually
the root of the bug, oh well :p.  Material for a later related bug
report or a reopen.</body>
  </comment>
</bug>
<bug>
  <uuid>e0858b12-0be3-49bb-ad7a-030e488bb2f1</uuid>
  <short-name>bea/e08</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <assigned>W. Trevor King &lt;wking@drexel.edu&gt;</assigned>
  <reporter>W. Trevor King &lt;wking@drexel.edu&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 18:53:50 +0000</created>
  <summary>Interactive email interface</summary>
  <comment>
    <uuid>f1cde826-0506-4b4a-92ab-8499e953fa49</uuid>
    <alt-id>&lt;20090716133930.GC12213@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/e08/f1c</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Thu, 16 Jul 2009 09:39:30 -0400</date>
    <content-type>text/plain</content-type>
    <body>I finally did something towards a useful interactive email interface
;).  As per our new guidelines, I'll develop this feature in it's own
branch:
  http://www.physics.drexel.edu/~wking/code/bzr/be-email

The interface is basically "place your be command in the subject line"
with a few exceptions.  Some examples:
  Subject: [be-bug] list --status=all
  Subject: [be-bug] show --xml ID
  Subject: [be-bug] new
  Subject: [be-bug] comment ID
In the case of "new", the bug description is extracted from the first
non-blank body line.  In the case of "comment", the email body is used
as the comment.  Currently only "list", "show", "new", and "comment"
are allowed.

You should get a reply email with exit status, stdout, and stderr from
your command.

Send some mail to [wking (at) tremily (dot) us] to try it out!  Depending
on spam attraction, this might be a limited time offer ;).

Hopefully this lowers the entry barrier for bug reporting :).

Disclaimer: I imaging the current implementation will choke on
non-text/plain content types.  Also possibly on non-ascii encodings.
Probably lots of other bugs too... ;).  For example, I should probably
allow the "help" command ... ;).

Cheers,
Trevor

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
    <comment>
      <uuid>fba8de97-9c61-4a08-b3e7-d8a95d6efe54</uuid>
      <alt-id>&lt;m3fxct5vl6.fsf@pullcord.laptop.org&gt;</alt-id>
      <short-name>bea/e08/fba</short-name>
      <in-reply-to>f1cde826-0506-4b4a-92ab-8499e953fa49</in-reply-to>
      <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
      <date>Sat, 18 Jul 2009 21:07:33 -0400</date>
      <content-type>text/plain</content-type>
      <body>Hi Trevor,

   &gt; I finally did something towards a useful interactive email
   &gt; interface ;).

Wow, nice!  That'll be really useful.

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;</body>
    </comment>
    <comment>
      <uuid>cfd7cbc7-27ad-4618-8530-cb4d7323514a</uuid>
      <alt-id>&lt;87fxctbnce.fsf@benfinney.id.au&gt;</alt-id>
      <short-name>bea/e08/cfd</short-name>
      <in-reply-to>f1cde826-0506-4b4a-92ab-8499e953fa49</in-reply-to>
      <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
      <date>Sun, 19 Jul 2009 09:09:05 +1000</date>
      <content-type>text/plain</content-type>
      <body>"W. Trevor King" &lt;wking@drexel.edu&gt; writes:

&gt; The interface is basically "place your be command in the subject line"

I would far prefer an interface of “place as many BE commands as you
like at the top of the message body, ending with an optional terminator
command, and they will each be executed in turn”.

This would allow a single message to perform a batch of BE commands that
are related, instead of requiring to send each command in a separate
message.

It would also leave the subject field free for something more
descriptive. The subject field could also be used as the summary field
of newly-created bug reports. With a terminator command, this would
allow the message to be sent both to BE and to some other recipient
(e.g. a mailing list) explaining the change.

Have a look at the email interface of the Debian BTS for an example
&lt;URL:http://www.debian.org/Bugs/server-request&gt;.

-- 
 \        “Pinky, are you pondering what I'm pondering?” “Wuh, I think |
  `\    so, Brain, but will they let the Cranberry Duchess stay in the |
_o__)                         Lincoln Bedroom?” —_Pinky and The Brain_ |
Ben Finney</body>
    </comment>
    <comment>
      <uuid>a0e846ed-1549-4ec3-b94d-391e54610f61</uuid>
      <alt-id>&lt;20090719130153.GA4036@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/e08/a0e</short-name>
      <in-reply-to>cfd7cbc7-27ad-4618-8530-cb4d7323514a</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sun, 19 Jul 2009 09:01:53 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Sun, Jul 19, 2009 at 09:09:05AM +1000, Ben Finney wrote:
&gt; &gt; The interface is basically "place your be command in the subject line"
&gt; 
&gt; I would far prefer an interface of “place as many BE commands as you
&gt; like at the top of the message body, ending with an optional terminator
&gt; command, and they will each be executed in turn”.
&gt; ...

I think the idea behind my first approach was "you guys have
experience with the command line BE interface, so it will be easier to
test if you don't have to learn the DBT interface."  The Debian people
have been doing this for a while though, so I imagine their email
interface is pretty good ;).

Here's a short primer on my take on the DBT interface.

The DBT has three main email addresses, each with it's own parsing style.
  1) creating bugs (submit@bugs.debian.org)
  2) commenting on bugs (&lt;bug-number&gt;@bugs.debian.org)
  3) controlling/managing bugs (control@bugs.debian.org)
I'm trying to squeeze these down into a single email address to avoid
having to tinker with the mail delivery system, so I've got everything
at (wking at tremily dot us) with subject tags:
  1) creating bugs
     Subject: [be-bug:submit] new bug summary ...
  2) commenting on bugs
     Subject: [be-bug:&lt;bug-number&gt;] human-specific subject
  3) control
     Subject: [be-bug] human-specific subject

The parsing styles each follow their DBT counterparts, but currently
have a much restricted breadth.

The control-style consists of a list of allowed be commands, with one
command per line.  Blank lines and lines beginning with '#' are
ignored, as well anything following a line starting with '--'.  All the
listed commands are executed in order and their output returned.

The comment-style interface appends a comment to the bug specified in
the subject tag.  The the first non-multipart body is attached with
the appropriate content-type.  In the case of "text/plain" contents,
anything following a line starting with '--' is stripped.

The create-style interface creates a bug whose summary is given by the
email's post-tag subject.  The body of the email must begin with a
psuedo-header containing at least the "Version" field.  Anything after
the pseudo-header and before a line starting with '--' is, if present,
attached as the bugs first comment.

Take a look at my interfaces/email/interactive/examples for some
examples.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
  <comment>
    <uuid>09f950d4-9366-4e7b-98b3-9057999f8f38</uuid>
    <alt-id>&lt;20090718131220.GA31832@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/e08/09f</short-name>
    <in-reply-to>f1cde826-0506-4b4a-92ab-8499e953fa49</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 18 Jul 2009 09:12:20 -0400</date>
    <content-type>text/plain</content-type>
    <body>On Thu, Jul 16, 2009 at 09:39:30AM -0400, W. Trevor King wrote:
&gt; Disclaimer: I imaging the current implementation will choke on
&gt; non-text/plain content types.  Also possibly on non-ascii encodings.

Non-ascii encodings are now handled (although now the output is
base64-encoded).  This is limited by poor unicode handling in the
email module for current pythons, see the log for more details.

&gt; I should probably allow the "help" command ... ;).

Added, but it currently shows _all_ commands, not just allowed
commands.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
  <comment>
    <uuid>7b904395-86e9-4eb1-8534-69cec63801d4</uuid>
    <alt-id>&lt;20090718220551.GB32230@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/e08/7b9</short-name>
    <in-reply-to>09f950d4-9366-4e7b-98b3-9057999f8f38</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 18 Jul 2009 18:05:51 -0400</date>
    <content-type>text/plain</content-type>
    <body>Ah, it's been a good day :).  My email interface now supports bug
creation/comments that look like:

    $ cat | mail -s "[be-bug] new" "whatever-dev@fancyprojects.com"
    The demuxulizer is broken
    
    &lt;describe bug&gt;
    ^D

Which is probably easy enough for just about anybody ;).  Also easy
for other projects to wrap into one of their tools:

    $ cat | projectAexecutable --report-bug
    The demuxulizer is broken
    
    &lt;describe bug&gt;
    ^D

Which could do things like automatically add the version string, OS
name, etc.

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
  <comment>
    <uuid>704b37ab-01bb-43d3-9e9f-f0d354f63c7d</uuid>
    <alt-id>&lt;20090719130649.GA4164@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/e08/704</short-name>
    <in-reply-to>7b904395-86e9-4eb1-8534-69cec63801d4</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 19 Jul 2009 09:06:49 -0400</date>
    <content-type>text/plain</content-type>
    <body>On Sat, Jul 18, 2009 at 06:05:51PM -0400, W. Trevor King wrote:
&gt; My email interface now supports bug creation/comments that look
&gt; like:
&gt; 
&gt;     $ cat | mail -s "[be-bug] new" "whatever-dev@fancyprojects.com"
&gt;     The demuxulizer is broken
&gt;     
&gt;     &lt;describe bug&gt;
&gt;     ^D

The move towards the DBT interface means this example should now look
like

  $ cat | mail -s "[be-bug:submit] The demuxulizer is broken" whatever-dev@fancyprojects.com
  Version: XYZ

  &lt;describe bug&gt;
  --
  Ignored text
  ^D

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
</bug>
<bug>
  <uuid>22b6f620-d2f7-42a5-a02e-145733a4e366</uuid>
  <short-name>bea/22b</short-name>
  <severity>wishlist</severity>
  <status>fixed</status>
  <assigned>W. Trevor King &lt;wking@drexel.edu&gt;</assigned>
  <reporter>Gianluca Montecchi &lt;gian@grys.it&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Tue, 21 Jul 2009 18:34:25 +0000</created>
  <summary>Sorting targets chronologically</summary>
  <extra-string>BLOCKED-BY:51930348-9ccc-4165-af41-6c7450de050e</extra-string>
  <comment>
    <uuid>4012c6cc-1300-4f6b-af0e-9176eedf8de7</uuid>
    <alt-id>&lt;20090801102742.GA29000@mjolnir.home.net&gt;</alt-id>
    <short-name>bea/22b/401</short-name>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sat, 1 Aug 2009 06:27:42 -0400</date>
    <content-type>text/plain</content-type>
    <body>On Mon, Jul 20, 2009 at 05:03:18PM -0400, Chris Ball wrote:
&gt; Hi Gianluca,
&gt; 
&gt;    &gt; In any case, having the possibility to set a due date does not
&gt;    &gt; means that it is obligatory to do it and should be a good idea to
&gt;    &gt; offer as many possibilities as we can to the users of BE
&gt; 
&gt; Okay, sounds reasonable.  Would you like to write a patch for
&gt; associating due dates and open/closed with a target?

I've been mulling this over, and I think that targets are a lot like
bugs.  Here's a list of issue/implementation pairs:

  * Targeting normal bugs

  With "be depend".  I think we should remove the "target" field from
  bugs, and move target dependencies over into the "be depend"
  framework.  Of course, we could add "blocks" (in addition to the
  current "blocked-by") tags to make target lookup more efficient.

  * "due_by"

  We could add "due-by" to Bug.extra_strings as well, so that anyone
  could set due dates for any issue they wanted.

  * Bugdir-wide target

  Just a pointer to the current target bug.

  * Target dependency tree / time-series.
  
  Use BLOCKS/BLOCKED-BY tags between targets, so you'd know which ones
  came first.

  * be target list

  Would become "be list --severity target".  A target "severity" would
  keep target bugs distinct from other bug/issue types.

  * Commenting on targets
  
  They'd be Bug()s, so commenting already build in, e.g. to add
  release notes, layout roadmaps, etc.

If you want, we could maintain the current "be target" interface,
and just use all this stuff behind the scenes.

Thoughts?
Trevor

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
  </comment>
  <comment>
    <uuid>64424f05-b42b-4835-8afd-8495ae61345d</uuid>
    <short-name>bea/22b/644</short-name>
    <in-reply-to>4012c6cc-1300-4f6b-af0e-9176eedf8de7</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Sun, 06 Dec 2009 05:42:52 +0000</date>
    <content-type>text/plain</content-type>
    <body>Implemented.

You can now list targets by dependency (not by date, but better for
most cases) with
  be depend -t-1 --severity target ID
where ID is the uuid of any target bug, or with
  be depend -t-1 --severity target $(be target --resolve TARGET)
where TARGET is the summary of any target bug.</body>
  </comment>
  <comment>
    <uuid>b9865d8b-46ae-4169-bc83-d75a98164729</uuid>
    <alt-id>&lt;200907182351.03217.gian@grys.it&gt;</alt-id>
    <short-name>bea/22b/b98</short-name>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Sat, 18 Jul 2009 23:51:03 +0200</date>
    <content-type>text/plain</content-type>
    <body>Hello

Just a question and only for curiosity: there is an easy way to determine the 
target succession ?

For example, let's assume we have target a, b, c
There is a way to know that  "a" is a past target, "b" is the current target 
and "c" is a future target ? More: there is a way to know if a target is 
closed or open ?

thanks

bye
Gianluca


_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>6555a651-5a7f-4a8a-9793-47ad1315e9e8</uuid>
    <alt-id>&lt;m3skgt648h.fsf@pullcord.laptop.org&gt;</alt-id>
    <short-name>bea/22b/655</short-name>
    <in-reply-to>b9865d8b-46ae-4169-bc83-d75a98164729</in-reply-to>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Sat, 18 Jul 2009 18:00:46 -0400</date>
    <content-type>text/plain</content-type>
    <body>Hi,

   &gt; For example, let's assume we have target a, b, c There is a way
   &gt; to know that "a" is a past target, "b" is the current target and
   &gt; "c" is a future target ?

We could add a "date due" field for each target.

   &gt; More: there is a way to know if a target is closed or open ?

We could add a "target close" operation that moves all open bugs
assigned to one target to the next date-due target.

I see problems with these ideas in general, because we're assuming
agreement by all parties/branches on when a target's date due is.
Maybe it's okay to demand that social conventions be used to handle
such a disagreement, or maybe not.

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
    <comment>
      <uuid>9bbe9370-99c7-4d7c-80ee-9ade6b6feb9f</uuid>
      <alt-id>&lt;20090718222701.GA304@mjolnir.home.net&gt;</alt-id>
      <short-name>bea/22b/9bb</short-name>
      <in-reply-to>6555a651-5a7f-4a8a-9793-47ad1315e9e8</in-reply-to>
      <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
      <date>Sat, 18 Jul 2009 18:27:01 -0400</date>
      <content-type>text/plain</content-type>
      <body>On Sat, Jul 18, 2009 at 06:00:46PM -0400, Chris Ball wrote:
&gt;    &gt; For example, let's assume we have target a, b, c There is a way
&gt;    &gt; to know that "a" is a past target, "b" is the current target and
&gt;    &gt; "c" is a future target ?
&gt; 
&gt; We could add a "date due" field for each target.

Another option would be a "blocked by" field, since you might miss
deadlines, or have parallel targeted branches.  Or just pick target
names following some scheme so the alphanumeric-sort is also a
dependency-order sort ;).

&gt;    &gt; More: there is a way to know if a target is closed or open ?

There's also
  $ be list --target 0.1
If there are active bugs, the target is open.  Otherwise, you must have
made it ;).

&gt; We could add a "target close" operation that moves all open bugs
&gt; assigned to one target to the next date-due target.

for bug in `be list --target 0.1 --uuids`; do
  be target $bug $NEXT_TARGET
done

To avoid the loop, we could change status, severity, target, etc from
  be COMMAND BUG ARG
to
  be COMMAND ARG BUG [MORE BUGS ...]

-- 
This email may be signed or encrypted with GPG (http://www.gnupg.org).
The GPG signature (if present) will be attached as 'signature.asc'.
For more information, see http://en.wikipedia.org/wiki/Pretty_Good_Privacy

My public key is at http://www.physics.drexel.edu/~wking/pubkey.txt</body>
    </comment>
  <comment>
    <uuid>4952e1c7-e035-42f1-882b-6b5264481d0a</uuid>
    <alt-id>&lt;200907202259.11774.gian@grys.it&gt;</alt-id>
    <short-name>bea/22b/495</short-name>
    <in-reply-to>6555a651-5a7f-4a8a-9793-47ad1315e9e8</in-reply-to>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Mon, 20 Jul 2009 22:59:11 +0200</date>
    <content-type>text/plain</content-type>
    <body>On Sunday 19 July 2009 00:00:46 Chris Ball wrote:
&gt; Hi,
&gt;
&gt;    &gt; For example, let's assume we have target a, b, c There is a way
&gt;    &gt; to know that "a" is a past target, "b" is the current target and
&gt;    &gt; "c" is a future target ?
&gt;
&gt; We could add a "date due" field for each target.

Good idea

&gt;    &gt; More: there is a way to know if a target is closed or open ?
&gt;
&gt; We could add a "target close" operation that moves all open bugs
&gt; assigned to one target to the next date-due target.

Nice. But instead of moving all bugs to the next date-due target, I'd prefer 
to leave the choice to the user


&gt; I see problems with these ideas in general, because we're assuming
&gt; agreement by all parties/branches on when a target's date due is.
&gt; Maybe it's okay to demand that social conventions be used to handle
&gt; such a disagreement, or maybe not.

I don't see these as problems per se. We can have two cases:

1) a personal branch (like my html output or Trevor's email interface). In 
this case there is not any problem to decide the due date

2) a branch with a group of delopers (let it be the canonical branch o an 
experimental branch): in this case I suppose that working together means to be 
able to agree on some things

In any case, having the possibility to set a due date does not means that it 
is obligatory to do it and should be a good idea to offer as many possibilities 
as we can to the users of BE

bye
Gianluca



_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>777182da-a216-45c7-bf4d-42c84e511c66</uuid>
    <alt-id>&lt;m3hbx72hk9.fsf@pullcord.laptop.org&gt;</alt-id>
    <short-name>bea/22b/777</short-name>
    <in-reply-to>4952e1c7-e035-42f1-882b-6b5264481d0a</in-reply-to>
    <author>Chris Ball &lt;cjb@laptop.org&gt;</author>
    <date>Mon, 20 Jul 2009 17:03:18 -0400</date>
    <content-type>text/plain</content-type>
    <body>Hi Gianluca,

   &gt; In any case, having the possibility to set a due date does not
   &gt; means that it is obligatory to do it and should be a good idea to
   &gt; offer as many possibilities as we can to the users of BE

Okay, sounds reasonable.  Would you like to write a patch for
associating due dates and open/closed with a target?

Thanks,

- Chris.
-- 
Chris Ball   &lt;cjb@laptop.org&gt;

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
  <comment>
    <uuid>7750d77c-85d2-4810-9d41-cec62b0da885</uuid>
    <alt-id>&lt;200907202340.39963.gian@grys.it&gt;</alt-id>
    <short-name>bea/22b/775</short-name>
    <in-reply-to>777182da-a216-45c7-bf4d-42c84e511c66</in-reply-to>
    <author>Gianluca Montecchi &lt;gian@grys.it&gt;</author>
    <date>Mon, 20 Jul 2009 23:40:39 +0200</date>
    <content-type>text/plain</content-type>
    <body>On Monday 20 July 2009 23:03:18 Chris Ball wrote:
&gt; Hi Gianluca,
&gt;
&gt;    &gt; In any case, having the possibility to set a due date does not
&gt;    &gt; means that it is obligatory to do it and should be a good idea to
&gt;    &gt; offer as many possibilities as we can to the users of BE
&gt;
&gt; Okay, sounds reasonable.  Would you like to write a patch for
&gt; associating due dates and open/closed with a target?

Ok. As soon as I finish a basic implementation of the html export, I will be 
glad to try to write a  patch.

bye
Gianluca

_______________________________________________
Be-devel mailing list
Be-devel@bugseverywhere.org
http://void.printf.net/cgi-bin/mailman/listinfo/be-devel</body>
  </comment>
</bug>
<bug>
  <uuid>e23d7982-7e32-4c78-b62e-83ecc42b4cd7</uuid>
  <short-name>bea/e23</short-name>
  <severity>target</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 06 Dec 2009 07:14:33 +0000</created>
  <summary>alpha</summary>
  <extra-string>BLOCKED-BY:171819aa-c092-4ddf-ace3-797635fa2572</extra-string>
  <extra-string>BLOCKED-BY:35b962a0-a64a-4b5c-82c5-ea740e8a6322</extra-string>
  <extra-string>BLOCKED-BY:42716dc2-6201-4537-b5fd-e1280812a53d</extra-string>
  <extra-string>BLOCKED-BY:4286c0f8-5703-4bc1-b256-414dc408f067</extra-string>
  <extra-string>BLOCKED-BY:528b2e84-a944-4628-a18f-cc1def1c7e16</extra-string>
  <extra-string>BLOCKED-BY:545311df-8c88-4504-9f83-11d7c5d8aa50</extra-string>
  <extra-string>BLOCKED-BY:55e76f74-37fb-4254-8498-54b703ba54f6</extra-string>
  <extra-string>BLOCKED-BY:870d5dbe-6449-4ec4-ae6f-e84bebadbce0</extra-string>
  <extra-string>BLOCKED-BY:8cb9045c-7266-4c40-9a76-65f3c5d5bb60</extra-string>
  <extra-string>BLOCKED-BY:984472f6-98f5-48fc-b521-70a1e5f60614</extra-string>
  <extra-string>BLOCKED-BY:bef126a0-27be-402f-84fa-85f6342c97c0</extra-string>
  <extra-string>BLOCKED-BY:c7251ff9-24e4-402d-8d4e-605a78b9a91d</extra-string>
  <extra-string>BLOCKED-BY:d63d0bdd-e025-4f7c-9fcf-47a71de6d4d4</extra-string>
  <extra-string>BLOCKED-BY:decc6e78-a3db-4cd3-ad23-2bf8ed77cb0d</extra-string>
  <extra-string>BLOCKED-BY:e645d562-6f84-4df2-b8ee-86ef42546c16</extra-string>
  <extra-string>BLOCKED-BY:fd96c69d-6f78-4c0c-af6e-e01e9b8516d3</extra-string>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>47c8fd5f-1f5a-4048-bef7-bb4c9a37c411</uuid>
  <short-name>bea/47c</short-name>
  <severity>target</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 06 Dec 2009 00:37:15 +0000</created>
  <summary>0.1</summary>
  <extra-string>BLOCKED-BY:f51dc5a7-37b7-4ce1-859a-b7cb58be6494</extra-string>
  <extra-string>BLOCKS:4fc71206-4285-417f-8a3c-ed6fb31bbbda</extra-string>
  <extra-string>BLOCKS:bd0ebb56-fb46-45bc-af08-1e4a94e8ef3c</extra-string>
</bug>
<bug>
  <uuid>bd0ebb56-fb46-45bc-af08-1e4a94e8ef3c</uuid>
  <short-name>bea/bd0</short-name>
  <severity>target</severity>
  <status>fixed</status>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Sun, 06 Dec 2009 00:37:15 +0000</created>
  <summary>0.2</summary>
  <extra-string>BLOCKED-BY:47c8fd5f-1f5a-4048-bef7-bb4c9a37c411</extra-string>
  <extra-string>BLOCKED-BY:4fc71206-4285-417f-8a3c-ed6fb31bbbda</extra-string>
  <extra-string>BLOCKED-BY:f5c06914-dc64-4658-8ec7-32a026a53f55</extra-string>
</bug>
<bug>
  <uuid>24555ea1-76b5-40a8-918f-115a28f5f36a</uuid>
  <short-name>bea/245</short-name>
  <severity>critical</severity>
  <status>wontfix</status>
  <assigned>Steve Losh &lt;steve@stevelosh.com&gt;</assigned>
  <creator>Steve Losh &lt;steve@stevelosh.com&gt;</creator>
  <created>Thu, 25 Jun 2009 21:39:38 +0000</created>
  <summary>Fix the extra severity problem.</summary>
  <extra-string>BLOCKS:76a6140e-0800-453c-9720-29cc161663d1</extra-string>
  <extra-string>TAG:CFBE</extra-string>
</bug>
<bug>
  <uuid>597b03f5-76cb-4951-b370-a01573ad2f75</uuid>
  <short-name>bea/597b</short-name>
  <severity>minor</severity>
  <status>wontfix</status>
  <reporter>Anton Batenev &lt;abbat@abbat&gt;</reporter>
  <creator>W. Trevor King &lt;wking@drexel.edu&gt;</creator>
  <created>Fri, 19 Mar 2010 06:11:12 +0000</created>
  <summary>Set a default EDITOR incase the user has not</summary>
  <comment>
    <uuid>0922b8f7-b5ce-4572-8e55-c4b34dafe6cf</uuid>
    <alt-id>&lt;201003161610.10674.antonbatenev@yandex.ru&gt;</alt-id>
    <short-name>bea/597b/092</short-name>
    <author>Anton Batenev &lt;antonbatenev@yandex.ru&gt;</author>
    <date>Tue, 16 Mar 2010 20:10:10 +0000</date>
    <content-type>text/plain</content-type>
    <body>Hello!

--- 8&lt; ---
$ be comment b35
ERROR:
No comment supplied, and EDITOR not specified.
--- &gt;8 ---

When EDITOR enviroment variable not set try to use vi editor as default editor</body>
  </comment>
  <comment>
    <uuid>5e8d490e-ee06-4403-96dd-ad8eac66b21c</uuid>
    <alt-id>&lt;877hp9w0zy.fsf@benfinney.id.au&gt;</alt-id>
    <short-name>bea/597b/5e8</short-name>
    <in-reply-to>0922b8f7-b5ce-4572-8e55-c4b34dafe6cf</in-reply-to>
    <author>Ben Finney &lt;bignose+hates-spam@benfinney.id.au&gt;</author>
    <date>Fri, 19 Mar 2010 16:31:29 +0000</date>
    <content-type>text/plain</content-type>
    <body>Anton Batenev &lt;antonbatenev@yandex.ru&gt; writes:

&gt; --- 8&lt; ---
&gt; $ be comment b35
&gt; ERROR:
&gt; No comment supplied, and EDITOR not specified.
&gt; --- &gt;8 ---
&gt;
&gt; When EDITOR enviroment variable not set try to use vi editor as
&gt; default editor

-1. It's up to the local operating system configuration to set a default
EDITOR value, and up to the user to over-ride that if they want to. An
application shouldn't be guessing in the absence of those conventions.

The behaviour is clear and the message provides a way for the user to
rectify the problem in a standard way. It doesn't need to change.</body>
  </comment>
  <comment>
    <uuid>212570d2-8116-462e-9664-9ea8d3976b99</uuid>
    <short-name>bea/597b/212</short-name>
    <in-reply-to>5e8d490e-ee06-4403-96dd-ad8eac66b21c</in-reply-to>
    <author>W. Trevor King &lt;wking@drexel.edu&gt;</author>
    <date>Fri, 19 Mar 2010 06:17:38 +0000</date>
    <content-type>text/plain</content-type>
    <body>I agree with Ben.  Setting status to "wontfix".</body>
  </comment>
</bug>
<bug>
  <uuid>9b1a0e71-4f7d-40b1-ab32-18496bf19a3f</uuid>
  <short-name>bea/9b1</short-name>
  <severity>minor</severity>
  <status>wontfix</status>
  <reporter>gianluca &lt;gian@galactica&gt;</reporter>
  <creator>gianluca &lt;gian@galactica&gt;</creator>
  <created>Fri, 03 Jul 2009 22:56:19 +0000</created>
  <summary>Add the html files for the severity detail to "be html" output</summary>
</bug>
<bug>
  <uuid>8385a1fb-63df-4ca6-81cd-28ede83bb0c2</uuid>
  <short-name>bea/838</short-name>
  <severity>minor</severity>
  <status>wontfix</status>
  <reporter>gianluca &lt;gian@galactica&gt;</reporter>
  <creator>gianluca &lt;gian@galactica&gt;</creator>
  <created>Fri, 03 Jul 2009 22:56:09 +0000</created>
  <summary>Add the html files for the status detail to "be html" output</summary>
</bug>
</be-xml>
